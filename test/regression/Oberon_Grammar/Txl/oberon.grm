% TXL Grammar for Oberon

% Reference: EBNF Definition of the Oberon programming language
% Extracted from the book Programmieren in Oberon - Das neue Pascal 
% by N. Wirth and M. Reiser and translated by J. Templ.
% 12 Jul 2002 - Copyright © 2002 ETH Zuerich. All rights reserved.
% E-Mail: oberon-web at inf.ethz.ch
% Homepage: www.oberon.ethz.ch{http://www.oberon.ethz.ch/}

% Modification Log:

% v1.0, Jim Cordy, October 2010.
%    Initial revision.

tokens
    % Allow for nested comments
    comment	"\(\*[(\(\*#(\*\))*\*\))#(\*\))]*\*\)"

    % Oberon numbers
    number	"\d+"				% number = integer | real.  
	    |	"\d[\dABCDEF]*H"		% integer = digit {digit}| digit {hexDigit} "H". 
     						% hexDigit = digit | "A" | "B" | "C" | "D" | "E" | "F". 
	    |	"\d+.\d*([ED][+-]?\d+)?#\:."	% real = digit {digit} "." {digit} [ScaleFactor?]. 
     						% ScaleFactor = ("E" | "D") ["+" | "-"?] digit {digit}. 

    % Oberon strings and character constants
    hexlit	"\d[\dABCDEF]*X" 		% CharConstant = digit {hexDigit} "X". 
    stringlit	"\"#\"*\""			% A string cannot contain a quote mark (")
end tokens

% All special words of Oberon are reserved
keys
    ARRAY BEGIN CASE CONST DEFINITION DIV DO ELSE ELSIF END
    IF IMPORT IN IS LOOP MOD MODULE OF OR POINTER PROCEDURE
    RECORD REPEAT THEN TO TYPE UNTIL VAR WHILE WITH
end keys

compounds 
    := .. <= >=
end compounds

define program
    [module]
end define

define module 
    MODULE [ident] '; 			[IN][NL]  
	[ImportList?] 
	[DeclarationSequence] 		[NL]
        [BEGIN_StatementSequence?]  	[EX]
    END [ident?] '.
end define

define BEGIN_StatementSequence
    					[EX]
    BEGIN 				[IN][NL]
	[StatementSequence]		[EX]
end define

define ident 
     [id]	% letter {letter | digit}. 
     		% letter = "A" .. "Z" | "a" .. "z". 
     		% digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9". 
end define

define ImportList 
     IMPORT [import_,+] '; [NL]
end define

define import_ 
     [ident] [becomes_ident?]
end define

define becomes_ident
    ':= [ident]
end define

define DeclarationSequence 
    [const_type_or_var_declaration*]
    [procedure_or_forward_declaration*]
end define

define const_type_or_var_declaration
	CONST [ConstantDeclaration*]
    | 	TYPE  [TypeDeclaration*]
    | 	VAR   [VariableDeclaration*]
end define

define procedure_or_forward_declaration
	[ProcedureDeclaration]
    |  	[ForwardDeclaration]
end define

define ConstantDeclaration 
     [identdef] '= [ConstExpression] '; [NL]
end define

define identdef 
     [ident] ['* ?]
end define

define ConstExpression 
     [expression]
end define

define expression 
     [SimpleExpression] [relation_SimpleExpression?]
end define

define relation_SimpleExpression
    [relation] [SimpleExpression]
end define

define SimpleExpression 
     [plus_or_minus?] [term] [AddOperator_term*]
end define

define plus_or_minus
    '+ | '-
end define

define AddOperator_term
    [AddOperator] [term]
end define

define term 
     [factor] [MulOperator_factor*]
end define

define MulOperator_factor
    [MulOperator] [factor]
end define

define factor 
    [number] | [CharConstant] | [string] | 'NIL | [set] | 
    [designator] [ActualParameters?] | '( [expression] ') | '~ [factor]
end define

define CharConstant 
     [charlit] | [hexlit]
end define

define string 
    [stringlit]
end define

define set 
     '{ [element,] '}
end define

define element 
     [expression] [dotdot_expression?]
end define

define dotdot_expression 
    '.. [expression]
end define

define designator 
     [qualident] [qualification*]
end define

define qualification
    '. [ident] | '[ [ExpList] '] | '( [qualident] ') | '^
end define

define ExpList 
     [expression,+]
end define

define ActualParameters 
     '( [ExpList?] ')
end define

define MulOperator 
     '* | '/ | DIV | MOD | '&
end define

define AddOperator 
     '+ | '- | OR
end define

define relation 
     '= | '# | '< | '<= | '> | '>= | 'IN | IS
end define

define TypeDeclaration 
     [identdef] '= [type] '; [NL]
end define

define type 
     [qualident] | [ArrayType] | [RecordType] | [PointerType] | [ProcedureType]
end define

define qualident 
     [ident_dot?] [ident]
end define

define ident_dot
    [ident] '.
end define

define ArrayType 
     ARRAY [length,+] OF [type]
end define

define length 
     [ConstExpression]
end define

define RecordType 
    				[IN][NL]
    RECORD [base?] 		[IN][NL]
	[FieldListSequence] 	[EX]
    END				[EX]
end define

define base
    '( [BaseType] ')
end define

define BaseType 
     [qualident]
end define

define FieldListSequence 
     [FieldList] [semi_FieldList*] 
end define

define semi_FieldList
    '; [NL] [FieldList]
end define

define FieldList 
    [IdentList_colon_type?]
end define

define IdentList_colon_type
     [IdentList] ': [type]
end define

define IdentList 
     [identdef,+]
end define

define PointerType 
     POINTER TO [type]
end define

define ProcedureType 
     PROCEDURE [FormalParameters?]
end define

define VariableDeclaration 
     [IdentList] ': [type] '; 	[NL]
end define

define ProcedureDeclaration 
    [ProcedureHeading] '; 	[NL] 
    [ProcedureBody] [ident?] ';	[NL]
end define

define ProcedureHeading 
    [NL]
    PROCEDURE ['* ?] [identdef] [FormalParameters?]
end define

define FormalParameters 
     '( [FPSections?] ') [colon_qualident?]
end define

define FPSections
     [FPSection] [semi_FPSection*]
end define

define semi_FPSection
    '; [FPSection]
end define

define colon_qualident
     ': [qualident]
end define

define FPSection 
     ['VAR ?] [ident,+] ': [FormalType]
end define

define FormalType 
     [ARRAY_OF*] [qualident_or_Procedure_Type]
end define

define ARRAY_OF
    ARRAY OF
end define

define qualident_or_Procedure_Type 
    [qualident] | [ProcedureType]
end define

define ProcedureBody 
     					[IN]
	[DeclarationSequence] 
	[BEGIN_StatementSequence?] 	
    END
end define

define ForwardDeclaration 
    PROCEDURE '^ [ident] ['* ?] [FormalParameters?] ';	[NL]
end define

define StatementSequence 
    [statement_semi*] [statement_nosemi?]
end define

define statement_semi
    [statement?] '; [NL]
end define

define statement_nosemi
    [statement] [NL]
end define

define statement
	[assignment] 
    | 	[ProcedureCall] 
    | 	[IfStatement] 
    | 	[CaseStatement] 
    | 	[WhileStatement] 
    | 	[RepeatStatement] 
    | 	[LoopStatement] 
    | 	[WithStatement] 
    | 	EXIT 
    | 	RETURN [expression?] 
end define

define assignment 
     [designator] ':= [expression]
end define

define ProcedureCall 
     [designator] [ActualParameters?]
end define

define IfStatement 
    IF [expression] THEN 	[IN][NL]
	[StatementSequence] 	[EX]
    [ELSIF_expression_THEN_StatementSequence*]
    [ELSE_StatementSequence?]	
    END
end define

define ELSIF_expression_THEN_StatementSequence
    ELSIF [expression] THEN 	[IN][NL]
	[StatementSequence]	[EX]
end define

define ELSE_StatementSequence
    ELSE 			[IN][NL]
	[StatementSequence] 	[EX]
end define

define CaseStatement 
    CASE [expression] OF 		[IN][NL]
	[case?] 
	[or_case*] 
    [or_ELSE_StatementSequence?]	[EX]
    END
end define

define or_ELSE_StatementSequence
    [opt '|] [ELSE_StatementSequence]
end define

define or_case
    '| [case]
end define

define case 
     [CaseLabelList] ': 	[IN][NL]
	[StatementSequence?]	[EX]
end define

define CaseLabelList 
     [CaseLabels,+] 
end define

define CaseLabels 
     [ConstExpression] [dotdot_ConstExpression?]
end define

define dotdot_ConstExpression
    '.. [ConstExpression]
end define

define WhileStatement 
    WHILE [expression] DO 	[IN][NL]
	[StatementSequence] 	[EX]
    END
end define

define RepeatStatement 
    REPEAT 			[IN][NL]
	[StatementSequence] 	[EX]
    UNTIL [expression]
end define

define LoopStatement 
    LOOP 			[IN][NL]
	[StatementSequence] 	[EX]
    END
end define

define WithStatement 
    WITH [qualident] ': [qualident] DO 	[IN][NL]
	[StatementSequence] 		[EX]
    END
end define

define module 
    	...
    | 	DEFINITION [ident] '; 		[IN][NL]
	    [ImportList?] 
	    [DeclarationSequence] 	[EX]
	END [ident] '.
end define

define ProcedureDeclaration 
   	...
    | 	[ProcedureHeading] ';		[NL]
end define
