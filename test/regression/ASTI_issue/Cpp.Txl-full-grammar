% C++ 3.0 TXL Basis Grammar
% J.R. Cordy, 24 Feb 1992
% Loosely adapted from: 
%       Unix System V, AT&T C++ Language System, Release 2.0
%       Appendix A: Grammar Summary
% but with the (as usual) many bugs in the C++ grammar fixed, and the 
% forms tuned for TXL performance.  As noted in the reference above, 
% this grammar is actually a slight superset of C++ 2.0.
% Lexical conventions of C++
%%
%%  Mike Elges, 1 Oct 1995
%%  Has been updgraded to conform to the ansi 3.0.  
%%  Started with J.R. Cordy original C++ Grammer and updated to 
%%  The annotated C++ Reference Manual by Margret A. Ellis and Bjarne
%%  Stroustrup.  The Templates have been well tested but Exceptions
%%  have not. Since I do not use C++ exception I have little code to
%%  test with.  If you have problems with this Grammar I am more than
%%  willing to fix them time permitting.
%%  Mike Elges
%%  melges@advancedsw.com
%%
%%  James Powell, 21 Oct 1996
%%  Changes made to update this grammar to C++ as described in the
%%  Draft Working Paper of the ANSI Information Processing Systems
%%  committee, published April 28th, 1995.  Changes include extended
%%  exceptions and templates, postfix type casting, and namespace
%%  operations.

tokens
     id             + "\#\i+"
     castintnumber  "\d+[uUlL][lLuU]?"
     hexnumber      "0[XxZz][\dABCDEFabcdef]+[UulL]?[uUlL]?"
     floatnumber    + "\d+(.\d+)?([eE][+-]?\d+)([fFUuLl]?[fFUuLl]?)"
     floatnumber    + "\d+.?([eE][+-]?\d+)([fFUuLl]?[fFUuLl]?)"
     floatnumber    + ".\d+([eE][+-]?\d+)([fFUuLl]?[fFUuLl]?)"
     decimalnumber  + "\d+.\d+([fFUuLl]?[fFUuLl]?)"
     decimalnumber  + "\d+.([fFUuLl]?[fFUuLl]?)"
     decimalnumber  + ".\d+([fFUuLl]?[fFUuLl]?)"
end tokens

comments
        //
        /*  */
end comments

compounds
   !=  '%=  &&  &=  *=  ++  +=  -+  --  -=  
   ->  ->*  .*  ...  /=  ::  <<  <<=  <=  
   ==  >=  >>  >>=  ^=  |=  ||  **
end compounds

keys
   asm auto break case catch char class const
   continue default delete do double else enum extern
   float for friend goto if inline int long
   new operator private protected public register return short
   signed sizeof static struct switch template this typedef
   union unsigned virtual void volatile while declare
   '#define #else #endif #if #ifdef #ifndef #include #line #undef #ident
   try catch throw #LINK namespace using dynamic_cast static_cast
   reinterpret_cast const_cast typeid typename mutable wchar_t bool
end keys

define string
        [opt 'L][repeat stringlit+]
end define

define character_constant
        [opt 'L][charlit]
end define

define floating_constant
      [opt '-] [decimalnumber] 
   |  [opt '-] [floatnumber] 
end define

define integer_constant
     [opt '-] [castintnumber]
   | [opt '-] [integernumber]
   | [hexnumber] 
end define

% Txl grammar goal symbol - a C++ compilation file
define program
        [declaration_list]
end define

%%
%% Syntax of C++ per ANSI DWP of 4/28/95
%%

define expression
     [assignment_expression]
  |  [expression] ', [assignment_expression]
end define

define assignment_expression
        [conditional_expression]
    |   [unary_expression] [assignment_operator] [assignment_expression]
    |   [throw_expression]
end define

define assignment_operator
     = | *= | /= | '%= | += | -= | >>= | <<= | &= | ^= | '|=
end define

define conditional_expression
     [binary_expression] [opt conditional_operation]
end define

define conditional_operation
     ? [expression]  :  [conditional_expression]
end define

define binary_expression
     [cast_expression] [repeat binary_operation]
end define

define binary_operation
     [binary_operator] [cast_expression]
end define

define binary_operator
     '|| | && | '| | ^ | & | == | != | < | > | <= | >=  
   | << | >> | + | - | * | / | '% | .* | ->*  
end define

define cast_expression
     [unary_expression]
   | '(  [type_name] ')  [cast_expression]
end define

define unary_expression
     [postfix_expression]
   | ++  [unary_expression]
   | --  [unary_expression]
   | [unary_operator]  [cast_expression]
   | 'sizeof  [unary_expression]
   | 'sizeof  (  [type_name]  )
   | [allocation_expression]
   | [deallocation_expression]
end define

define throw_expression
     throw [opt assignment_expression]
end define

define unary_operator
     ** | * | & | + | - | ! | ~
end define

define allocation_expression
     [opt '::] 'new [opt placement] [allocation_type_name] [opt allocation_initializer]
   | [opt '::] 'new [opt placement] '( [type_name] ') [opt allocation_initializer]
%%
%% This is added from DWP Grammar section A.10, Special member functions,
%% which says that a constructor can be used explicitly to create new objects
%% of its type, using this syntax.  DWP pg. 12-2 describes in more detail.
%%
   | [class_name] '( [opt expression_list] ')
end define

define placement
     (  [expression_list]  )
end define

define allocation_type_name
     [type_specifiers] [opt allocation_declarator]
end define

define allocation_declarator
     * [opt cv_qualifier_list] [opt allocation_declarator]
   | [opt '::] [nested_name_spec] '* [opt cv_qualifier_list] [opt allocation_declarator]
   | [direct_allocation_declarator]
end define

define direct_allocation_declarator
     '[ [opt expression] ']
   | [direct_allocation_declarator] '[ [opt expression] ']
end define

define allocation_initializer
     '( [opt expression_list] ')
end define

define deallocation_expression
     [opt '::]  'delete [cast_expression]
   | [opt '::]  'delete  '[ [opt expression] ']  [cast_expression]
end define

define postfix_expression
     [primary_expression] [repeat postfix_extension]
   | [simple_type_name]  (  [opt expression_list]  ) [repeat postfix_extension]
   | [postfix_expression] '.  [opt 'template] [name]
   | [postfix_expression] '-> [opt 'template] [name]
   | dynamic_cast     < [type_name] > ( [expression] )
   | static_cast      < [type_name] > ( [expression] )
   | reinterpret_cast < [type_name] > ( [expression] )
   | const_cast       < [type_name] > ( [expression] )
   | typeid ( [expression] )
   | typeid ( [type_name] )
   | __builtin_alignof ( [argument_declaration ] ) %Hack to handle Var args
                                                   %on SGI.
end define

define postfix_extension
     '[  [opt expression]  ']
   | (  [opt expression_list]  )
   | .  [name]
   | ->  [name]
   | ++
   | --
end define

define expression_list
     [assignment_expression]
   | [expression_list] ', [assignment_expression]
end define

define primary_expression
     [literal]
   | 'this
   | ::  [id]
   | ::  [operator_function_name]
   | (  [expression]  )
   | [name]
end define

define name
     [id]
   | '~ [SPOFF] [id] [SPON]
   | [qualified_name]    
   | [operator_function_name]
   | [conversion_function_name]
end define

%
% note: grammar fails on this statement:
%   (new Atemp< Barg, Carg >);
% if the order of class_name entries is reversed.
%
define class_name
   [id] [opt template_extension]
%%     [template_id]
%%   | [id]
end define

define qualified_name
     [opt 'typename] [class_name] ':: [opt 'template] [class_component]
end define

define class_component
     [opt '~] [class_name]              
   | [operator_function_name]
   | [conversion_function_name]
   | [qualified_name]
end define

define literal
     [floating_constant]
   | [integer_constant]
   | [character_constant]
   | [string]
end define

define declaration
     [opt decl_specifiers] [opt declarator_list] ; [KEEP] [NL]  
   | [asm_declaration] [KEEP]
   | [fct_definition] [KEEP]
   | [template_declaration] [KEEP]
   | [explicit_instantiation] [KEEP]
   | [linkage_specification] [KEEP]
   | [exception_specification] [KEEP]
   | [namespace_definition] [KEEP]
   | [namespace_alias_definition] [KEEP]
   | [using_directive] [KEEP]
   | [using_declaration] [KEEP]
   | [preprocessor] [KEEP] [NL]                 
   | [comment] [NL] [repeat comment_NL] [KEEP]
%%
%% Not part of DWP spec, but added to parse custom CPP output for gdesigner.
%%
%   | # [number] [stringlit] [repeat number] [NL] [KEEP]
end define

%%
%%  Templates.
%%

define template_declaration
     'template < [template_parameter_list] > [declaration]
end define

define template_parameter_list
     [template_parameter]
   | [template_parameter_list] ', [template_parameter]
end define

define template_id
     [template_name][SPOFF] [template_extension] [SPON]
end define

%% 
%% This is extracted from template_id for convenient naming in gdesigner.
%%
define template_extension
     < [template_arg_list] >
end define

define template_name
     [id]
end define

define template_arg_list
     [template_arg]
   | [template_arg_list] , [template_arg]
end define

define template_arg
     [template_name]
   | [type_name]
   | [assignment_expression]
end define

define full_template_arg_list
     '< [template_arg_list] '>
end define

define explicit_instantiation
    'template [declaration]
end define

define template_parameter
     [type_argument]
   | [argument_declaration]
end define

define type_argument
     class [id]
   | class [id] = [type_name]
   | typename [opt id]
   | typename [opt id] = [type_name]
   | template < [template_parameter_list] > class [opt id]
   | template < [template_parameter_list] > class [opt id] = [id]
end define

define comment_NL
     [comment] [NL] 
end define

%%
%% Namespace/Using 
%%

define namespace_definition
     'namespace [opt id] { [NL] [IN] [opt declaration_list] [EX] } [NL] [NL]
end define

define namespace_alias_definition
     'namespace [id] '= [qualified_namespace_spec]
end define

define qualified_namespace_spec
     [opt '::] [opt nested_name_spec] [class_or_namespace_name]
end define

define nested_name_spec
     [class_or_namespace_name] ':: [opt nested_name_spec]
end define

define class_or_namespace_name
     [class_name]
   | [namespace_name]
end define

define namespace_name
     [id]
end define

define using_declaration
     'using [opt '::] [nested_name_spec] [name] ;
   | 'using ':: [name] ;
end define

define using_directive
     'using 'namespace [opt '::] [opt nested_name_spec] [id] ;
end define

%%
%% Various declarations.
%%

define asm_declaration
     'asm ( [string] ) ; [NL]
end define

define decl_specifier
     [sc_specifier]
   | [type_specifier]
   | [fct_specifier]
   | 'friend
   | 'typedef
%%
%% Persistance added to support gdesigner rules.
%%
   | [persistance]
end define

define persistance
    'const
 |  'volatile
 |  'NONE
 |  'read
 |  'write
 |  'read_write
end define

define decl_specifiers
     [repeat decl_specifier+]
end define

%%
%% Level 2 added to distinguish nested class definitions for gdesigner.
%%
define level_2_decl_specifiers
     [repeat level_2_decl_specifier+]
   | [repeat Association+]
end define

define sc_specifier
     'auto
   | 'register
   | 'static
   | 'extern
   | 'mutable
end define

define fct_specifier
     'inline
   | 'virtual
%%
%% concrete and abstract are added to support gdesigner translation.
%%
   | 'concrete
   | 'abstract
end define

define type_specifier
     [simple_type_name]
   | [class_specifier]
   | [enum_specifier]
   | [elaborated_type_specifier]
   | [cv_qualifier]
   | [opt '::] [opt nested_name_spec] [type_id]       
end define

define cv_qualifier
     'const
   | 'volatile
end define

define type_specifiers
     [repeat type_specifier+]
end define

define simple_type_name
     'char | 'wchar_t | 'bool | 'short | 'int | 'long | 'signed
   | 'unsigned | 'float | 'double | 'void
   | [opt '::] [opt nested_name_spec] [type_id]
%%
%% Added to support gdesigner rules.
%%
   | [qualified_name]
end define

define enum_name
     [id]
end define

define typedef_name
     [id]
end define

define elaborated_type_specifier
     [class_key] [opt '::] [opt nested_name_spec] [id]
   | 'enum [opt '::] [opt nested_name_spec] [id]
   | 'typename [opt '::] [nested_name_spec] [id] [opt full_template_arg_list]

%% The following line handles member specifications like:
%%  friend class deque <T>;
%% which don't seem to be included in the DWP grammar, but are found in
%% use.  The only possible hint to it is this language from the template
%% section:
%%   A template type parameter can be used in an elaborated type specifier. 

   | [class_key] [class_name]

%% vv delete this line?
%%   | 'enum [id]
end define

define class_key
     'class | 'struct | 'union
end define

define enum_specifier
     'enum [opt id]  {  [opt enum_list]  }
end define

define enum_list
     [enum_definition]
   | [enum_list] , [enum_definition]
end define

define enum_definition
     [enumorator]
   | [enumorator] '= [constant_expression]
end define

define enumorator
     [id]
end define

define constant_expression
     [conditional_expression]
end define

define linkage_specification
     [NL] 'extern [string] {   [NL] [IN]
              [declaration_list]    [EX]
          } [opt ';]                [NL] [NL]
   | 'extern [string]  [declaration]
end define

define declaration_list
     [repeat declaration]
end define

define declarator_list
     [list init_declarator+]
end define

%%
%% exception_spec in init_declarator here handles "void (*fp) throw (int);"
%%

define init_declarator
        [declarator] [opt initializer] [opt exception_specification]
end define

define declarator
        [repeat ptr_operator] [direct_declarator]
end define

define type_id
        [class_name]
    |   [enum_name]
    |   [typedef_name]
end define

define declarator_id
        [name]
    |   [opt nested_name_spec] [type_id]
end define

define direct_declarator
        [declarator_id] [repeat array_extension]
    |   [direct_declarator] [declarator_extension]
%    |   ( [declarator] )
end define

define declarator_extension
     [repeat open_paren+] [parameter_declaration_clause] 
     [repeat close_paren+] [opt cv_qualifier_list]
     [opt exception_specification]
   | '[  [opt constant_expression]  ']
end define

define array_extension
        '[ [opt constant_expression] ']
end define

define parameter_declaration_clause
        [opt parameter_declaration_list] [opt '...]
    |   [parameter_declaration_list] , '...
end define

define parameter_declaration_list
        [parameter_declaration]
    |   [parameter_declaration_list] , [parameter_declaration]
end define

define parameter_declaration
      [decl_specifiers] [declarator]
    | [id] [decl_specifiers]
    | [decl_specifiers] [declarator] '= [assignment_expression]
    | [decl_specifiers] [opt abstract_declarator]
    | [decl_specifiers] [opt abstract_declarator] '= [assignment_expression]
%% 
%% Added optional string to allow rule to fix misparsed declarations.
%%
    |   [opt "FOO*"] [decl_specifiers] [opt abstract_declarator] 
        [opt equal_expression]
end define

define ptr_operator
     [stars]  [opt cv_qualifier_list]
   | &  [opt cv_qualifier_list]
   | [id] ':: [stars]  [opt cv_qualifier_list]
   | [opt '::] [nested_name_spec] '* [cv_qualifier_list]
end define

define stars
     * | **
end define

define cv_qualifier_list
        [repeat cv_qualifier+]
%%
%% Added TRUE and FALSE for gdesigner parse.
%%
    |   'TRUE
    |   'FALSE
end define

define cv_qualifier
     'const
   | 'volatile
end define

define type_name
     [type_specifiers] [opt abstract_declarator]
end define

define abstract_declarator
     [repeat abstract_extension+]
   | ( [abstract_declarator] ) [repeat abstract_extension]
end define

define abstract_extension
     (  [argument_declaration_list]  )  [opt cv_qualifier_list] 
   | '[  [opt constant_expression]  ']
   | [ptr_operator]
   | (  [abstract_declarator]  )
end define

define argument_declaration_list
     [arg_declaration_list]  [opt comma_dotdotdot]
end define

define comma_dotdotdot
     [opt ',] '...
end define

define arg_declaration_list
      [argument_declaration]
    | [arg_declaration_list] , [argument_declaration]
end define

define argument_declaration
     [decl_specifiers] [declarator] [opt equal_expression]
   | [decl_specifiers] [opt abstract_declarator] [opt equal_expression]
end define

define equal_expression
     =  [expression]
end define

define fct_definition
     [NL]
     [opt level_2_decl_specifiers] [declarator] [opt ctor_initializer] [fct_body]
   | [opt level_2_decl_specifiers] [declarator] [function_try_block]
end define

define fct_body
     [NL] [compound_statement] [opt ';] [NL]
end define

define initializer
     = [assignment_expression]
   | = { [initializer_list] [opt ,] }
   | { }
   | ( [opt expression_list] )
end define

define initializer_list
     [assignment_expression]
   | { [initializer_list] [opt ,] }
   | [initializer_list] , [assignment_expression]
   | [initializer_list] , { [initializer_list] [opt ,] }
end define

define class_specifier
    [class_head] {    [NL]
       [opt member_list]
    }
end define

define class_head
       [class_key] [opt id] [opt base_spec]
     | [class_key] [nested_name_spec] [id] [opt base_spec]
%
% This construct (template specialization) isn't
% documented in the DWP spec, but is used in STL code.
% e.g.:
% template < class T >
% class far_allocator {
% public: 
%   typedef T __far * pointer;
% };
%                     vvvvvvvv
% class far_allocator < void > { 
% public : 
% typedef void __far * pointer ; 
% } ; 
% 
     | [class_key] [template_id] [opt base_spec]
end define

define member_list
     [member_declaration] [opt member_list]
   | [EX] [access_specifier_colon] [IN] [opt member_list]
end define

define access_specifier_colon
     [access_specifier]  : [NL]
end define

define member_declaration
     [opt level_2_decl_specifiers] [opt member_declarator_list] ; [NL]
   | [fct_definition]  [opt ;]
   | [qualified_name] ; [NL]
   | [preprocessor] [NL]
   | [comment] [NL] [repeat comment_NL]
   | [using_directive] [NL]
   | [using_declaration] [NL]
%%
%% Incorporate preprocessor output for gdesigner.
%%
   | # [number] [stringlit] [repeat number] [NL]
%%
%% Added to support gdesigner.
   | 'concrete
   | 'virtual
   | 'abstract
end define

define member_declarator_list
     [list member_declarator+]
end define

define member_declarator
     [declarator] [opt pure_specifier]
   | [opt id]  :  [constant_expression]
%%
%% Added extension to member_declarator to fix parse problems
%% due to typedefs.
%%
   | [opt "DATA*"] [declarator] [opt pure_specifier]
%%
%% This supports gcc extensions?
%%
   | [declarator] [opt initializer] %%  This supports gcc extensions
end define

define pure_specifier
     =  0
end define

define base_spec
     :  [base_list]
%%
%% Added to support gdesigner translation
%%
  |  (NULL) [NL] [repeat base_specifier]
end define

define base_list
     [base_specifier] [opt ',] [list base_specifier]
end define

define base_specifier
      [opt '::] [opt nested_name_spec] [class_name]
   |  'virtual [opt access_specifier] [opt '::] [opt nested_name_spec]
      [class_name]
   |  [access_specifier] [opt 'virtual] [opt '::] [opt nested_name_spec] 
      [class_name]
end define

define access_specifier
     'private
   | 'protected
   | 'public
end define

define conversion_function_name
     'operator [conversion_type_name]
end define

define conversion_type_name
     [type_specifiers] [opt ptr_operator]
end define

define ctor_initializer
     :  [mem_initializer_list]
end define

define mem_initializer_list
     [list mem_initializer+]
end define

define mem_initializer 
     [mem_initializer_id] '( [opt expression_list] ')
end define

define mem_initializer_id
     [opt '::] [opt nested_name_spec] [class_name]
   | [id]
end define

define operator_function_name
     'operator [operator]
end define

define operator
     'new | 'delete
   | + | - | * | / | '% | ^ | & | '| | ~
   | ! | = | < | > | += | -= | -+ | *= | /= | '%=
   | ^= | &= | '|= | << | >> | >>= | <<= | == | !=
   | <= | >= | && | '|| | ++ | -- | , | ->* | ->
   | '( [opt type_specifier] ') | '[ ']
end define

define statement
     [repeat label] [null_statement] [KEEP]
   | [repeat label] [expression_statement] [KEEP]       
   | [repeat label] [compound_statement] [KEEP] 
   | [repeat label] [selection_statement] [KEEP]        
   | [repeat label] [iteration_statement] [KEEP]        
   | [repeat label] [jump_statement] [KEEP]             
   | [repeat label] [declaration_statement] [KEEP]      
   | [repeat label] [try_block] [KEEP]
   | [comment] [NL] [repeat comment_NL] [KEEP]
end define

%%
%%  Exceptions.
%%

define try_block
     'try [compound_statement] [handler_seq]
end define

define function_try_block
     'try [opt ctor_initializer] [fct_body] [handler_seq]
end define

define handler_seq
     [handler] [opt handler_seq] 
end define

define handler
     'catch ( [exception_declaration] ) [compound_statement]
end define

define exception_declaration
     [type_specifiers] [opt declarator]
   | [type_specifiers] [opt abstract_declarator]
   | '...
end define

define throw_expression
     'throw [opt assignment_expression]
end define

define exception_specification
     'throw ( [opt type_id_list] )
end define

define type_id_list
     [type_specifier]
   | [type_id_list] , [type_specifier]
end define

%%
%% Various statement constructs.
%%

define label
     [id] : 
   | [EX] 'case [constant_expression] : [NL] [IN]
   | [EX] 'default :                    [NL] [IN]
end define

define expression_statement
     [expression] ; [NL]
end define

define null_statement
     ; [NL]
end define

define compound_statement
     {                          [NL] [IN]
       [opt statement_list]     [EX]
     }                          [NL]
end define

define statement_list
        [repeat statement+]
end define

define selection_statement
     'if ( [expression] ) [statement] [opt else_statement]
   | 'switch  ( [expression] ) [compound_statement]
end define

define else_statement
     'else [statement]
end define

define condition
     [expression]
   | [type_specifiers] [declarator] '= [assignment_expression]
end define

define iteration_statement
     'while ( [condition] ) [statement]
   | 'do [statement] 'while ( [expression] ) ;  [NL]
   | 'for ( [for_init_statement] [opt condition] ;  [opt expression] ) 
          [for_body]
end define

define for_init_statement
     [expression] ;             
   | [opt decl_specifiers] [opt declarator_list] ;
end define

define for_body
     [compound_statement]
   | [IN] [NL] [statement] [EX]
end define

define jump_statement
     'break ;     [NL]
   | 'continue ; [NL]
   | 'return  [opt expression] ; [NL]
   | 'goto [id] ; [NL]
end define

define declaration_statement
     [declaration]
end define

define preprocessor
     '#define [id] ( [list id+] )  [expression]
   | '#define [id]  [expression]
   | '#define [id]
   | [EX] '#else  [IN]
   | [EX] '#endif
   | '#if [expression] [IN]
   | '#ifdef [id] [IN]
   | '#ifndef [id] [IN]
   | '#ident [stringlit]
   | '#include [stringlit]
   | '#include < [SPOFF] [filename] > [SPON]
   | '#line [integernumber] [opt stringlit]
   | '#undef [id]
   | '#LINK [stringlit]
end define

define file_identifier
     [id]
   | [key]
end define

define filename
     [file_identifier] [repeat dot_slash_identifier]
end define

define dot_slash_identifier
     [opt '.]  [opt '/] [file_identifier]
end define

define open_paren
   (
end define

define close_paren
   )
end define

% Trivial parse rule for testing.
function main
        replace [program]
           P [repeat declaration]
        by
           P
end function


define Association
  'ThisSymbolIsNeverUsed
end define

define level_2_decl_specifier
  [decl_specifier]
end define
