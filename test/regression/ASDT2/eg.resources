external function LIBRARYX_XchrX_X1 (LIBRARYX_XchrX_X1X_XiX_X1 : int) : string

external function LIBRARYX_XordX_X1 (LIBRARYX_XordX_X1X_XcX_X1 : string) : int

external function LIBRARYX_XstrintX_X1 (LIBRARYX_XstrintX_X1X_XsX_X1 : string) :
  int

external function LIBRARYX_XintstrX_X1 (LIBRARYX_XintstrX_X1X_XiX_X1 : int,
  LIBRARYX_XintstrX_X1X_XwX_X1 : int) : string

external function LIBRARYX_XstrrealX_X1 (LIBRARYX_XstrrealX_X1X_XsX_X1 : string
  ) : real

external function LIBRARYX_XrealstrX_X1 (LIBRARYX_XrealstrX_X1X_XrX_X1 : real,
  LIBRARYX_XrealstrX_X1X_XwX_X1 : int) : string

external function LIBRARYX_XlengthX_X1 (LIBRARYX_XlengthX_X1X_XsX_X1 : string) :
  int

external function LIBRARYX_XeofX_X1 (LIBRARYX_XeofX_X1X_XiX_X1 : int) : boolean

external function LIBRARYX_XindexX_X1 (LIBRARYX_XindexX_X1X_XsX_X1 : string,
  LIBRARYX_XindexX_X1X_Xs2X_X1 : string) : int

external function LIBRARYX_XmaxX_X1 (LIBRARYX_XmaxX_X1X_XiX_X1 : int,
  LIBRARYX_XmaxX_X1X_Xi2X_X1 : int) : int

external function LIBRARYX_XminX_X1 (LIBRARYX_XminX_X1X_XiX_X1 : int,
  LIBRARYX_XminX_X1X_Xi2X_X1 : int) : int

external function LIBRARYX_XrepeatX_X1 (LIBRARYX_XrepeatX_X1X_XsX_X1 : string,
  LIBRARYX_XrepeatX_X1X_XiX_X1 : int) : string

external function LIBRARYX_XsizeX_X1 (LIBRARYX_XsizeX_X1X_XiX_X1 : int) : int

put "/e[;H/e[JMicro-Turing Monitor  V1.00"
put skip, "Wait ..."
const * PROGRAMX_XmaxlinesX_X1 := 99
const * PROGRAMX_XmaxlinetokensX_X1 := 50
const * PROGRAMX_XmaxidentsX_X1 := 100
const * PROGRAMX_XmaxindentX_X1 := 24
const * PROGRAMX_XmaxrunstackdepthX_X1 := 50
const * PROGRAMX_XmaxstringstackdepthX_X1 := 50
const * PROGRAMX_XmaxarraystackdepthX_X1 := 50
const * PROGRAMX_XmaxscopestackdepthX_X1 := 5
const * PROGRAMX_XmaxoperatorstackdepthX_X1 := 5
const * PROGRAMX_XmaxconstructstackdepthX_X1 := 5
const * PROGRAMX_XmaxidentlengthX_X1 := 50
const * PROGRAMX_XmaxstringlengthX_X1 := 127
const * PROGRAMX_XmaxintegerlengthX_X1 := 9
const * PROGRAMX_XmaxintX_X1 := 999999999
const * PROGRAMX_XmaxrealX_X1 := 0.9999999e19
const * PROGRAMX_XfirsttokenX_X1 := 0
const * PROGRAMX_XtillegalX_X1 := 0
const * PROGRAMX_XtanyX_X1 := PROGRAMX_XtillegalX_X1
const * PROGRAMX_XtintegerX_X1 := 1
const * PROGRAMX_XtstringlitX_X1 := 2
const * PROGRAMX_XtidentifierX_X1 := 3
const * PROGRAMX_XfirstkeywordX_X1 := 4
const * PROGRAMX_XfirststatementX_X1 := 4
const * PROGRAMX_XtvarX_X1 := 4
const * PROGRAMX_XtconstX_X1 := 5
const * PROGRAMX_XttypeX_X1 := 6
const * PROGRAMX_XtassignX_X1 := 7
const * PROGRAMX_XtcallX_X1 := 8
const * PROGRAMX_XtassertX_X1 := 9
const * PROGRAMX_XtifX_X1 := 10
const * PROGRAMX_XtloopX_X1 := 11
const * PROGRAMX_XtforX_X1 := 12
const * PROGRAMX_XtputX_X1 := 13
const * PROGRAMX_XtgetX_X1 := 14
const * PROGRAMX_XtprocedureX_X1 := 15
const * PROGRAMX_XtendX_X1 := 16
const * PROGRAMX_XtendifX_X1 := 17
const * PROGRAMX_XtendloopX_X1 := 18
const * PROGRAMX_XtendforX_X1 := 19
const * PROGRAMX_XtelsifX_X1 := 20
const * PROGRAMX_XtelseifX_X1 := 21
const * PROGRAMX_XtelseX_X1 := 22
const * PROGRAMX_XtinvariantX_X1 := 23
const * PROGRAMX_XtexitX_X1 := 24
const * PROGRAMX_XtexitwhenX_X1 := 25
const * PROGRAMX_XlaststatementX_X1 := 25
const * PROGRAMX_XtarrayX_X1 := 26
const * PROGRAMX_XtofX_X1 := 27
const * PROGRAMX_XtintX_X1 := 28
const * PROGRAMX_XtbooleanX_X1 := 29
const * PROGRAMX_XtstringX_X1 := 30
const * PROGRAMX_XtthenX_X1 := 31
const * PROGRAMX_XtwhenX_X1 := 32
const * PROGRAMX_XtnotX_X1 := 33
const * PROGRAMX_XtdivX_X1 := 34
const * PROGRAMX_XtmodX_X1 := 35
const * PROGRAMX_XtandX_X1 := 36
const * PROGRAMX_XtorX_X1 := 37
const * PROGRAMX_XttrueX_X1 := 38
const * PROGRAMX_XtfalseX_X1 := 39
const * PROGRAMX_XtchrX_X1 := 40
const * PROGRAMX_XtordX_X1 := 41
const * PROGRAMX_XtlengthX_X1 := 42
const * PROGRAMX_XlastkeywordX_X1 := 42
const * PROGRAMX_XfirstspecialsymbolX_X1 := 43
const * PROGRAMX_XtlparenX_X1 := 43
const * PROGRAMX_XtrparenX_X1 := 44
const * PROGRAMX_XtcommaX_X1 := 45
const * PROGRAMX_XtcolonX_X1 := 46
const * PROGRAMX_XtcolonequalX_X1 := 47
const * PROGRAMX_XtdotdotX_X1 := 48
const * PROGRAMX_XtplusX_X1 := 49
const * PROGRAMX_XtminusX_X1 := 50
const * PROGRAMX_XtstarX_X1 := 51
const * PROGRAMX_XtgreaterX_X1 := 52
const * PROGRAMX_XtlessX_X1 := 53
const * PROGRAMX_XtequalX_X1 := 54
const * PROGRAMX_XtgreaterequalX_X1 := 55
const * PROGRAMX_XtlessequalX_X1 := 56
const * PROGRAMX_XtnotequalX_X1 := 57
const * PROGRAMX_XtsemicolonX_X1 := 58
const * PROGRAMX_XlastspecialsymbolX_X1 := 58
const * PROGRAMX_XtcommentX_X1 := 59
const * PROGRAMX_XteolX_X1 := 60
const * PROGRAMX_XlasttokenX_X1 := PROGRAMX_XteolX_X1
type * tokentype : record
token : PROGRAMX_XfirsttokenX_X1..PROGRAMX_XlasttokenX_X1
value : int
error : boolean
end record
const * PROGRAMX_XtokentextX_X1 : array PROGRAMX_XfirsttokenX_X1..
  PROGRAMX_XlasttokenX_X1 of string (15) :=
    init ("illegal", "integer", "stringlit", "identifier", "var", "const",
      "type", "assign", "call", "assert", "if", "loop", "for", "put", "get",
      "procedure", "end", "end if", "end loop", "end for", "elsif", "elseif",
      "else", "invariant", "exit", "exit when", "array", "of", "int", "boolean"
      , "string", "then", "when", "not", "div", "mod", "and", "or", "true",
      "false", "chr", "ord", "length", "(", ")", ",", ":", ":=", "..", "+", "-"
      , "*", ">", "<", "=", ">=", "<=", "not=", ";", "%", "end-of-line")
type * linetype : record
tokens : array 1..PROGRAMX_XmaxlinetokensX_X1 of int
error : boolean
indent : int
end record
var PROGRAMX_XlinesX_X1 : array 1..PROGRAMX_XmaxlinesX_X1 of int
var PROGRAMX_XcurrentlineX_X1 : int
var PROGRAMX_XcurrentptrX_X1 := 1
var PROGRAMX_XcurrentnumX_X1 := 0
var PROGRAMX_XcurrenterrorX_X1 := ""
PROGRAMX_XcurrentlineX_X1.tokens (1).token := PROGRAMX_XteolX_X1
PROGRAMX_XcurrentlineX_X1.tokens (1).error := false
PROGRAMX_XcurrentlineX_X1.error := false
PROGRAMX_XcurrentlineX_X1.indent := 0
for PROGRAMX_XiX_X1 : 1..PROGRAMX_XmaxlinesX_X1
    PROGRAMX_XlinesX_X1 (PROGRAMX_XiX_X1).tokens (1).token := PROGRAMX_XteolX_X1
    PROGRAMX_XlinesX_X1 (PROGRAMX_XiX_X1).tokens (1).error := false
    PROGRAMX_XlinesX_X1 (PROGRAMX_XiX_X1).error := false
    PROGRAMX_XlinesX_X1 (PROGRAMX_XiX_X1).indent := 0
end for
procedure PROGRAMX_XerrorX_X1 (PROGRAMX_XerrorX_X1X_XmsgX_X1 : string)
    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
        PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 := true
        PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
          PROGRAMX_XerrorX_X1 := true
        PROGRAMX_XcurrenterrorX_X1 := PROGRAMX_XerrorX_X1X_XmsgX_X1
    end if
end PROGRAMX_XerrorX_X1
module PROGRAMX_XidentX_X1
    var PROGRAMX_XidentX_X1X_XidenttableX_X1 : array 1..PROGRAMX_XmaxidentsX_X1
      of record
    ident : string (PROGRAMX_XmaxstringlengthX_X1)
    token : int
    end record
    for PROGRAMX_XidentX_X1X_XixX_X2 : 1..PROGRAMX_XmaxidentsX_X1
        PROGRAMX_XidentX_X1X_XidenttableX_X1 (PROGRAMX_XidentX_X1X_XixX_X2).
          token := PROGRAMX_XtidentifierX_X1
        PROGRAMX_XidentX_X1X_XidenttableX_X1 (PROGRAMX_XidentX_X1X_XixX_X2).
          ident := ""
    end for
    function PROGRAMX_XidentX_X1X_XidentindexX_X1 (
      PROGRAMX_XidentX_X1X_XidentindexX_X1X_XidentX_X1 : string) : int
        for PROGRAMX_XidentX_X1X_XidentindexX_X1X_XixX_X1 : 1..
          PROGRAMX_XmaxidentsX_X1
            if PROGRAMX_XidentX_X1X_XidenttableX_X1 (
              PROGRAMX_XidentX_X1X_XidentindexX_X1X_XixX_X1).
              PROGRAMX_XidentX_X1X_XidentindexX_X1X_XidentX_X1 =
              PROGRAMX_XidentX_X1X_XidentindexX_X1X_XidentX_X1 then
                result PROGRAMX_XidentX_X1X_XidentindexX_X1X_XixX_X1
            end if
        end for
        result 0
    end PROGRAMX_XidentX_X1X_XidentindexX_X1
    function PROGRAMX_XidentX_X1X_XidentidentX_X1 (
      PROGRAMX_XidentX_X1X_XidentidentX_X1X_Xindex_X_X1 : int) : string
        result PROGRAMX_XidentX_X1X_XidenttableX_X1 (
          PROGRAMX_XidentX_X1X_XidentidentX_X1X_Xindex_X_X1).ident
    end PROGRAMX_XidentX_X1X_XidentidentX_X1
    function PROGRAMX_XidentX_X1X_XidenttokenX_X1 (
      PROGRAMX_XidentX_X1X_XidenttokenX_X1X_Xindex_X_X1 : int) : int
        result PROGRAMX_XidentX_X1X_XidenttableX_X1 (
          PROGRAMX_XidentX_X1X_XidenttokenX_X1X_Xindex_X_X1).token
    end PROGRAMX_XidentX_X1X_XidenttokenX_X1
    procedure PROGRAMX_XidentX_X1X_XenteridentX_X1 (var
      PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 : int,
      PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1 : string)
        pre LIBRARYX_XlengthX_X1 (
          PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1) <=
          PROGRAMX_XmaxstringlengthX_X1

        PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 :=
          PROGRAMX_XidentX_X1X_XidentindexX_X1 (
          PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1)
        if PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 = 0 then
            for PROGRAMX_XidentX_X1X_XenteridentX_X1X_XixX_X1 : 1..
              PROGRAMX_XmaxidentsX_X1
                if PROGRAMX_XidentX_X1X_XidenttableX_X1 (
                  PROGRAMX_XidentX_X1X_XenteridentX_X1X_XixX_X1).
                  PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1 = "" then
                    PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 :=
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_XixX_X1
                    PROGRAMX_XidentX_X1X_XidenttableX_X1 (
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_XixX_X1).
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1 :=
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_XidentX_X1
                    exit
                end if
            end for
            if PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 = 0 then
                PROGRAMX_XerrorX_X1 ("too many identifiers and strings")
                PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1 :=
                  PROGRAMX_XmaxidentsX_X1
            end if
        end if
    end PROGRAMX_XidentX_X1X_XenteridentX_X1
    procedure PROGRAMX_XidentX_X1X_XreinitializeX_X1
        for PROGRAMX_XidentX_X1X_XreinitializeX_X1X_XiX_X1 : 1..
          PROGRAMX_XmaxidentsX_X1
            if PROGRAMX_XidentX_X1X_XidenttableX_X1 (
              PROGRAMX_XidentX_X1X_XreinitializeX_X1X_XiX_X1).token =
              PROGRAMX_XtidentifierX_X1 then
                PROGRAMX_XidentX_X1X_XidenttableX_X1 (
                  PROGRAMX_XidentX_X1X_XreinitializeX_X1X_XiX_X1).ident := ""
            end if
        end for
    end PROGRAMX_XidentX_X1X_XreinitializeX_X1
    const PROGRAMX_XidentX_X1X_XnkeywordsX_X1 := 37
    const PROGRAMX_XidentX_X1X_XkeywordX_X1 : array 1..
      PROGRAMX_XidentX_X1X_XnkeywordsX_X1 of string (10) :=
        init ("var", "const", "type", "assert", "if", "loop", "for", "put",
          "get", "procedure", "end", "endif", "endloop", "endfor", "elsif",
          "elseif", "else", "invariant", "exit", "exitwhen", "array", "of",
          "int", "boolean", "string", "then", "when", "not", "div", "mod", "and"
          , "or", "true", "false", "chr", "ord", "length")
    const PROGRAMX_XidentX_X1X_XkeywordtokenX_X1 : array 1..
      PROGRAMX_XidentX_X1X_XnkeywordsX_X1 of int :=
        init (PROGRAMX_XtvarX_X1, PROGRAMX_XtconstX_X1, PROGRAMX_XttypeX_X1,
          PROGRAMX_XtassertX_X1, PROGRAMX_XtifX_X1, PROGRAMX_XtloopX_X1,
          PROGRAMX_XtforX_X1, PROGRAMX_XtputX_X1, PROGRAMX_XtgetX_X1,
          PROGRAMX_XtprocedureX_X1, PROGRAMX_XtendX_X1, PROGRAMX_XtendifX_X1,
          PROGRAMX_XtendloopX_X1, PROGRAMX_XtendforX_X1, PROGRAMX_XtelsifX_X1,
          PROGRAMX_XtelseifX_X1, PROGRAMX_XtelseX_X1, PROGRAMX_XtinvariantX_X1,
          PROGRAMX_XtexitX_X1, PROGRAMX_XtexitwhenX_X1, PROGRAMX_XtarrayX_X1,
          PROGRAMX_XtofX_X1, PROGRAMX_XtintX_X1, PROGRAMX_XtbooleanX_X1,
          PROGRAMX_XtstringX_X1, PROGRAMX_XtthenX_X1, PROGRAMX_XtwhenX_X1,
          PROGRAMX_XtnotX_X1, PROGRAMX_XtdivX_X1, PROGRAMX_XtmodX_X1,
          PROGRAMX_XtandX_X1, PROGRAMX_XtorX_X1, PROGRAMX_XttrueX_X1,
          PROGRAMX_XtfalseX_X1, PROGRAMX_XtchrX_X1, PROGRAMX_XtordX_X1,
          PROGRAMX_XtlengthX_X1)
    for PROGRAMX_XidentX_X1X_XkwX_X1 : 1..PROGRAMX_XidentX_X1X_XnkeywordsX_X1
        var PROGRAMX_XidentX_X1X_XixX_X1 : int
        PROGRAMX_XidentX_X1X_XenteridentX_X1 (PROGRAMX_XidentX_X1X_XixX_X1 : var
          PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1,
          PROGRAMX_XidentX_X1X_XkeywordX_X1 (PROGRAMX_XidentX_X1X_XkwX_X1))
        PROGRAMX_XidentX_X1X_XidenttableX_X1 (PROGRAMX_XidentX_X1X_XixX_X1).
          token := PROGRAMX_XidentX_X1X_XkeywordtokenX_X1 (
          PROGRAMX_XidentX_X1X_XkwX_X1)
    end for
    import PROGRAMX_XerrorX_X1

    export PROGRAMX_XidentX_X1X_XidentindexX_X1

    export PROGRAMX_XidentX_X1X_XidenttokenX_X1

    export PROGRAMX_XidentX_X1X_XidentidentX_X1

    export PROGRAMX_XidentX_X1X_XenteridentX_X1

    export PROGRAMX_XidentX_X1X_XreinitializeX_X1

end PROGRAMX_XidentX_X1
module PROGRAMX_XscanX_X1
    const PROGRAMX_XscanX_X1X_XcblankX_X1 := 0
    const PROGRAMX_XscanX_X1X_XcletterX_X1 := 1
    const PROGRAMX_XscanX_X1X_XcdigitX_X1 := 2
    const PROGRAMX_XscanX_X1X_XcspecialcharX_X1 := 3
    const PROGRAMX_XscanX_X1X_XcquoteX_X1 := 4
    const PROGRAMX_XscanX_X1X_XccommentX_X1 := 5
    const PROGRAMX_XscanX_X1X_XcillegalX_X1 := 6
    var PROGRAMX_XscanX_X1X_XcharclassX_X1 : array 0..255 of int
    for PROGRAMX_XscanX_X1X_XcX_X1 : 0..255
        PROGRAMX_XscanX_X1X_XcharclassX_X1 (PROGRAMX_XscanX_X1X_XcX_X1) :=
          PROGRAMX_XscanX_X1X_XcillegalX_X1
    end for
    PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 (" ")) :=
      PROGRAMX_XscanX_X1X_XcblankX_X1
    PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 ("/t")) :=
      PROGRAMX_XscanX_X1X_XcblankX_X1
    PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 ("%")) :=
      PROGRAMX_XscanX_X1X_XccommentX_X1
    for PROGRAMX_XscanX_X1X_XcX_X2 : LIBRARYX_XordX_X1 ("a")..LIBRARYX_XordX_X1
      ("z")
        PROGRAMX_XscanX_X1X_XcharclassX_X1 (PROGRAMX_XscanX_X1X_XcX_X2) :=
          PROGRAMX_XscanX_X1X_XcletterX_X1
    end for
    for PROGRAMX_XscanX_X1X_XcX_X3 : LIBRARYX_XordX_X1 ("A")..LIBRARYX_XordX_X1
      ("Z")
        PROGRAMX_XscanX_X1X_XcharclassX_X1 (PROGRAMX_XscanX_X1X_XcX_X3) :=
          PROGRAMX_XscanX_X1X_XcletterX_X1
    end for
    for PROGRAMX_XscanX_X1X_XcX_X4 : LIBRARYX_XordX_X1 ("0")..LIBRARYX_XordX_X1
      ("9")
        PROGRAMX_XscanX_X1X_XcharclassX_X1 (PROGRAMX_XscanX_X1X_XcX_X4) :=
          PROGRAMX_XscanX_X1X_XcdigitX_X1
    end for
    PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 ("\"")) :=
      PROGRAMX_XscanX_X1X_XcquoteX_X1
    const PROGRAMX_XscanX_X1X_XspecialcharsX_X1 := "():,.+-*><=;"
    const PROGRAMX_XscanX_X1X_XspecialchartokenX_X1 : array 1..12 of int :=
        init (PROGRAMX_XtlparenX_X1, PROGRAMX_XtrparenX_X1, PROGRAMX_XtcolonX_X1
          , PROGRAMX_XtcommaX_X1, PROGRAMX_XtillegalX_X1, PROGRAMX_XtplusX_X1,
          PROGRAMX_XtminusX_X1, PROGRAMX_XtstarX_X1, PROGRAMX_XtgreaterX_X1,
          PROGRAMX_XtlessX_X1, PROGRAMX_XtequalX_X1, PROGRAMX_XtsemicolonX_X1)
    for PROGRAMX_XscanX_X1X_XscX_X1 : 1..LIBRARYX_XlengthX_X1 (
      PROGRAMX_XscanX_X1X_XspecialcharsX_X1)
        PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 (
          PROGRAMX_XscanX_X1X_XspecialcharsX_X1 (PROGRAMX_XscanX_X1X_XscX_X1)))
          := PROGRAMX_XscanX_X1X_XcspecialcharX_X1
    end for
    procedure PROGRAMX_XscanX_X1X_XscanlineX_X1 (
      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XlinetextX_X1 : string)
        var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XlinetextX_X1
        var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1 := 1
        loop
            loop
                exit when LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1) = 0 or
                  PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 (
                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1))) not =
                  PROGRAMX_XscanX_X1X_XcblankX_X1
                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (2..*)
            end loop
            exit when LIBRARYX_XlengthX_X1 (
              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1) = 0
            var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1 : int
            PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.PROGRAMX_XerrorX_X1 :=
              false
            case PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1 (
              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1))) of
                label PROGRAMX_XscanX_X1X_XcletterX_X1 :
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1 := 1
                    loop
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1 += 1
                        exit when
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1 >
                          LIBRARYX_XlengthX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1)
                        const PROGRAMX_XscanX_X1X_XscanlineX_X1X_XccX_X1 :=
                          PROGRAMX_XscanX_X1X_XcharclassX_X1 (LIBRARYX_XordX_X1
                          (PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1)))
                        exit when PROGRAMX_XscanX_X1X_XscanlineX_X1X_XccX_X1 not
                          = PROGRAMX_XscanX_X1X_XcletterX_X1 and
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XccX_X1 not =
                          PROGRAMX_XscanX_X1X_XcdigitX_X1
                    end loop
                    const PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1..
                      LIBRARYX_XminX_X1 (PROGRAMX_XmaxidentlengthX_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1 - 1))
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidlengthX_X1..*)
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidindexX_X1 : int
                    PROGRAMX_XidentX_X1X_XenteridentX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidindexX_X1 : var
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidtextX_X1)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                      PROGRAMX_XidentX_X1X_XidenttokenX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidindexX_X1)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XidindexX_X1
                label PROGRAMX_XscanX_X1X_XcdigitX_X1 :
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1 := 1
                    loop
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1 += 1
                        exit when
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1 >
                          LIBRARYX_XlengthX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1)
                        exit when PROGRAMX_XscanX_X1X_XcharclassX_X1 (
                          LIBRARYX_XordX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1)))
                          not = PROGRAMX_XscanX_X1X_XcdigitX_X1
                    end loop
                    const PROGRAMX_XscanX_X1X_XscanlineX_X1X_XintextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1..
                      LIBRARYX_XminX_X1 (PROGRAMX_XmaxintegerlengthX_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1 - 1))
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XinlengthX_X1..*)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                      PROGRAMX_XtintegerX_X1
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                      LIBRARYX_XstrintX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XintextX_X1)
                label PROGRAMX_XscanX_X1X_XcquoteX_X1 :
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1 := 1
                    loop
                        exit when
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1 =
                          LIBRARYX_XlengthX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1)
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1 += 1
                        exit when PROGRAMX_XscanX_X1X_XcharclassX_X1 (
                          LIBRARYX_XordX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1))) =
                          PROGRAMX_XscanX_X1X_XcquoteX_X1
                    end loop
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1..
                      LIBRARYX_XminX_X1 (PROGRAMX_XmaxstringlengthX_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1))
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1 + 1..*)
                    if LIBRARYX_XlengthX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1) = 1 or
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstlengthX_X1) not =
                      "\"" then
                        loop
                            exit when LIBRARYX_XlengthX_X1 (
                              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1) =
                              1 or
                              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 (
                              LIBRARYX_XlengthX_X1 (
                              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1))
                              not = " "
                            PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 :=
                              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 (1
                              ..LIBRARYX_XlengthX_X1 (
                              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1) -
                              1)
                        end loop
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 :=
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1 + "\""
                    end if
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstindexX_X1 : int
                    PROGRAMX_XidentX_X1X_XenteridentX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstindexX_X1 : var
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XsttextX_X1)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                      PROGRAMX_XtstringlitX_X1
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XstindexX_X1
                label PROGRAMX_XscanX_X1X_XcspecialcharX_X1 :
                    const PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (2..*)
                    if LIBRARYX_XlengthX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1) > 0 and (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = ">" or
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = "<" or
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = ":" or
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = ".") then
                        if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = ">" then
                            if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1)
                              = "=" then
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtgreaterequalX_X1
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                                  2..*)
                            else
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtgreaterX_X1
                            end if
                        elsif PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = "<"
                          then
                            if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1)
                              = "=" then
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtlessequalX_X1
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                                  2..*)
                            else
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtlessX_X1
                            end if
                        elsif PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1 = ":"
                          then
                            if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1)
                              = "=" then
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtcolonequalX_X1
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                                  2..*)
                            else
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtcolonX_X1
                            end if
                        else
                            if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1)
                              = "." then
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtdotdotX_X1
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                                  PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (
                                  2..*)
                            else
                                PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.
                                  token := PROGRAMX_XtillegalX_X1
                            end if
                        end if
                    else
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                          PROGRAMX_XscanX_X1X_XspecialchartokenX_X1 (
                          LIBRARYX_XindexX_X1 (
                          PROGRAMX_XscanX_X1X_XspecialcharsX_X1,
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1))
                    end if
                    if PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token =
                      PROGRAMX_XtillegalX_X1 then
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                          LIBRARYX_XordX_X1 (
                          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcX_X1)
                    else
                        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value := 0
                    end if
                label PROGRAMX_XscanX_X1X_XccommentX_X1 :
                    var PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcoindexX_X1 : int
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1..
                      LIBRARYX_XminX_X1 (LIBRARYX_XlengthX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1),
                      PROGRAMX_XmaxstringlengthX_X1))
                    PROGRAMX_XidentX_X1X_XenteridentX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcoindexX_X1 : var
                      PROGRAMX_XidentX_X1X_XenteridentX_X1X_Xindex_X_X1,
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1)
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 := ""
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                      PROGRAMX_XtcommentX_X1
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcoindexX_X1
                label :
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.token :=
                      PROGRAMX_XtillegalX_X1
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1.value :=
                      LIBRARYX_XordX_X1 (
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (1))
                    PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XscanlineX_X1X_XtextX_X1 (2..*)
            end case
            PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1) :=
              PROGRAMX_XscanX_X1X_XscanlineX_X1X_XttX_X1
            exit when PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1 =
              PROGRAMX_XmaxlinetokensX_X1
            PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1 += 1
        end loop
        PROGRAMX_XcurrentlineX_X1.tokens (
          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1).token :=
          PROGRAMX_XteolX_X1
        PROGRAMX_XcurrentlineX_X1.tokens (
          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1).value := 0
        PROGRAMX_XcurrentlineX_X1.tokens (
          PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1).
          PROGRAMX_XerrorX_X1 := false
        PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 := false
        PROGRAMX_XscanX_X1X_XscanlineX_X1X_XcurrentptrX_X1 := 1
    end PROGRAMX_XscanX_X1X_XscanlineX_X1
    procedure PROGRAMX_XscanX_X1X_XexpandlineX_X1 (var
      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 : string)
        PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 := ""
        for PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1 : 1..
          PROGRAMX_XmaxlinetokensX_X1
            const PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).token
            const PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
              := PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
              PROGRAMX_XerrorX_X1
            if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 <=
              PROGRAMX_XlastkeywordX_X1 then
                if LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1) > 0 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = " " and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = "("
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + " "
                end if
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + "/e[7m"
                end if
                case PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 of
                    label PROGRAMX_XtidentifierX_X1, PROGRAMX_XtstringlitX_X1 :
                        PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                          PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                          PROGRAMX_XcurrentlineX_X1.tokens (
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
                          value)
                    label PROGRAMX_XtintegerX_X1 :
                        PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                          LIBRARYX_XintstrX_X1 (PROGRAMX_XcurrentlineX_X1.
                          tokens (
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
                          value, 1)
                    label PROGRAMX_XtillegalX_X1 :
                        PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                          LIBRARYX_XchrX_X1 (PROGRAMX_XcurrentlineX_X1.tokens (
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
                          value)
                    label PROGRAMX_XtcallX_X1 :
                    label :
                        PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                          PROGRAMX_XtokentextX_X1 (
                          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1)
                end case
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + "/e[m"
                end if
            elsif PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 <=
              PROGRAMX_XlastspecialsymbolX_X1 then
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 not =
                  PROGRAMX_XtrparenX_X1 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 not =
                  PROGRAMX_XtcommaX_X1 and LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1) > 0 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = " " and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = "("
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + " "
                end if
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + "/e[7m"
                end if
                PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                  PROGRAMX_XtokentextX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1)
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + "/e[m"
                end if
                if PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 not =
                  PROGRAMX_XtlparenX_X1 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 not =
                  PROGRAMX_XtrparenX_X1 then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + " "
                end if
            elsif PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommentX_X1 then
                if LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1) > 0 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = " "
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + " "
                end if
                if PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                      "/e[7m /e[m "
                end if
                PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).value)
            else
                if LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1) > 0 and
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 (
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)) not = " "
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 + " "
                end if
                if PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XlineptrX_X1).
                  PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XPROGRAMX_XerrorX_X1X_X1
                  then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 :=
                      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1 +
                      "/e[7m /e[m"
                end if
                exit
            end if
        end for
    end PROGRAMX_XscanX_X1X_XexpandlineX_X1
    import var PROGRAMX_XcurrentlineX_X1

    import var PROGRAMX_XcurrentptrX_X1

    import var PROGRAMX_XidentX_X1

    export PROGRAMX_XscanX_X1X_XscanlineX_X1

    export PROGRAMX_XscanX_X1X_XexpandlineX_X1

end PROGRAMX_XscanX_X1
module PROGRAMX_XparseX_X1
    procedure PROGRAMX_XparseX_X1X_XparseerrorX_X1 (
      PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XmsgX_X1 : string)
        if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
            const PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
            const PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XvalueX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).value
            var PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
              PROGRAMX_XtokentextX_X1 (
              PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1)
            if PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 =
              PROGRAMX_XtidentifierX_X1 then
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XvalueX_X1)
            elsif PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 =
              PROGRAMX_XtstringlitX_X1 then
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XvalueX_X1)
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 (2..
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1) - 1)
            elsif PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 =
              PROGRAMX_XtintegerX_X1 then
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
                  LIBRARYX_XintstrX_X1 (
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XvalueX_X1, 1)
            elsif PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommentX_X1 then
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 := "%"
            elsif PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XtokenX_X1 =
              PROGRAMX_XtillegalX_X1 then
                PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XttextX_X1 :=
                  LIBRARYX_XchrX_X1 (
                  PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XvalueX_X1)
            end if
            PROGRAMX_XerrorX_X1 ("SYNTAX ERROR : " +
              PROGRAMX_XparseX_X1X_XparseerrorX_X1X_XmsgX_X1)
        end if
    end PROGRAMX_XparseX_X1X_XparseerrorX_X1
    procedure PROGRAMX_XparseX_X1X_XparsetokenX_X1 (
      PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 :
      PROGRAMX_XfirsttokenX_X1..PROGRAMX_XlasttokenX_X1)
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
          PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 =
          PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 then
            PROGRAMX_XcurrentptrX_X1 += 1
        elsif PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 =
          PROGRAMX_XtanyX_X1 then
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 not =
              PROGRAMX_XteolX_X1 then
                PROGRAMX_XcurrentptrX_X1 += 1
            end if
        else
            PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("'" + PROGRAMX_XtokentextX_X1
              (PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1) + "' expected"
              )
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              PROGRAMX_XparseX_X1X_XparsetokenX_X1X_XtokenX_X1 not =
              PROGRAMX_XteolX_X1 then
                PROGRAMX_XcurrentptrX_X1 += 1
            end if
        end if
    end PROGRAMX_XparseX_X1X_XparsetokenX_X1
    procedure PROGRAMX_XparseX_X1X_XparseshiftX_X1
        for PROGRAMX_XparseX_X1X_XparseshiftX_X1X_XiX_X1 :
          PROGRAMX_XcurrentptrX_X1..PROGRAMX_XmaxlinetokensX_X1 - 1
            PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XparseX_X1X_XparseshiftX_X1X_XiX_X1) :=
              PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XparseX_X1X_XparseshiftX_X1X_XiX_X1 + 1)
        end for
    end PROGRAMX_XparseX_X1X_XparseshiftX_X1
    procedure PROGRAMX_XparseX_X1X_XparsevariableX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtlparenX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtlparenX_X1)
            PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtrparenX_X1)
        end if
    end PROGRAMX_XparseX_X1X_XparsevariableX_X1
    procedure PROGRAMX_XparseX_X1X_XparseconstantX_X1
        const PROGRAMX_XparseX_X1X_XparseconstantX_X1X_XtokenX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
        case PROGRAMX_XparseX_X1X_XparseconstantX_X1X_XtokenX_X1 of
            label PROGRAMX_XtidentifierX_X1, PROGRAMX_XtintegerX_X1,
              PROGRAMX_XtstringlitX_X1, PROGRAMX_XttrueX_X1,
              PROGRAMX_XtfalseX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
            label :
                PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("constant value expected"
                  )
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
        end case
    end PROGRAMX_XparseX_X1X_XparseconstantX_X1
    procedure PROGRAMX_XparseX_X1X_XparseoperandX_X1
        const PROGRAMX_XparseX_X1X_XparseoperandX_X1X_XtokenX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
        if PROGRAMX_XparseX_X1X_XparseoperandX_X1X_XtokenX_X1 =
          PROGRAMX_XtplusX_X1 or
          PROGRAMX_XparseX_X1X_XparseoperandX_X1X_XtokenX_X1 =
          PROGRAMX_XtminusX_X1 or
          PROGRAMX_XparseX_X1X_XparseoperandX_X1X_XtokenX_X1 =
          PROGRAMX_XtnotX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
        end if
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
          PROGRAMX_XparseX_X1X_XparseoperandX_X1X_XtokenX_X1 of
            label PROGRAMX_XtintegerX_X1, PROGRAMX_XtstringlitX_X1,
              PROGRAMX_XttrueX_X1, PROGRAMX_XtfalseX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
            label PROGRAMX_XtlparenX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtlparenX_X1)
                PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtrparenX_X1)
            label PROGRAMX_XtchrX_X1, PROGRAMX_XtordX_X1, PROGRAMX_XtlengthX_X1
              :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtlparenX_X1)
                PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtrparenX_X1)
            label PROGRAMX_XtidentifierX_X1 :
                PROGRAMX_XparseX_X1X_XparsevariableX_X1
            label :
                PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("expression expected")
        end case
    end PROGRAMX_XparseX_X1X_XparseoperandX_X1
    procedure PROGRAMX_XparseX_X1X_XparseoperatorX_X1
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
          of
            label PROGRAMX_XtplusX_X1, PROGRAMX_XtminusX_X1, PROGRAMX_XtstarX_X1
              , PROGRAMX_XtdivX_X1, PROGRAMX_XtmodX_X1, PROGRAMX_XtgreaterX_X1,
              PROGRAMX_XtlessX_X1, PROGRAMX_XtequalX_X1,
              PROGRAMX_XtgreaterequalX_X1, PROGRAMX_XtlessequalX_X1,
              PROGRAMX_XtandX_X1, PROGRAMX_XtorX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
            label PROGRAMX_XtnotX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtnotX_X1)
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtequalX_X1)
            label :
                PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("operator expected")
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
        end case
    end PROGRAMX_XparseX_X1X_XparseoperatorX_X1
    procedure PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
        loop
            PROGRAMX_XparseX_X1X_XparseoperandX_X1
            const PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
            exit when PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XteolX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtsemicolonX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommaX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtrparenX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtthenX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtdotdotX_X1 or
              PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommentX_X1
            PROGRAMX_XparseX_X1X_XparseoperatorX_X1
        end loop
    end PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
    procedure PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        PROGRAMX_XparseX_X1X_XparsesubexpressionX_X1
    end PROGRAMX_XparseX_X1X_XparseexpressionX_X1
    procedure PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
          of
            label PROGRAMX_XtintX_X1, PROGRAMX_XtbooleanX_X1,
              PROGRAMX_XtstringX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
            label PROGRAMX_XtidentifierX_X1 :
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 +
                  1).token = PROGRAMX_XtdotdotX_X1 then
                    PROGRAMX_XparseX_X1X_XparseconstantX_X1
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtdotdotX_X1
                      )
                    PROGRAMX_XparseX_X1X_XparseconstantX_X1
                else
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (
                      PROGRAMX_XtidentifierX_X1)
                end if
            label PROGRAMX_XtintegerX_X1 :
                PROGRAMX_XparseX_X1X_XparseconstantX_X1
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtdotdotX_X1)
                PROGRAMX_XparseX_X1X_XparseconstantX_X1
            label :
                PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("simple type expected")
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
        end case
    end PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
    procedure PROGRAMX_XparseX_X1X_XparsearrayboundsX_X1
        PROGRAMX_XparseX_X1X_XparseconstantX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtdotdotX_X1)
        PROGRAMX_XparseX_X1X_XparseconstantX_X1
    end PROGRAMX_XparseX_X1X_XparsearrayboundsX_X1
    procedure PROGRAMX_XparseX_X1X_XparsearraytypeX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtarrayX_X1)
        PROGRAMX_XparseX_X1X_XparsearrayboundsX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtofX_X1)
        PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
    end PROGRAMX_XparseX_X1X_XparsearraytypeX_X1
    procedure PROGRAMX_XparseX_X1X_XparsevarX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtvarX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtcolonequalX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonequalX_X1)
            PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        else
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonX_X1)
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token = PROGRAMX_XtarrayX_X1 then
                PROGRAMX_XparseX_X1X_XparsearraytypeX_X1
            else
                PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
            end if
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token = PROGRAMX_XtcolonequalX_X1 then
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonequalX_X1
                  )
                PROGRAMX_XparseX_X1X_XparseexpressionX_X1
            end if
        end if
    end PROGRAMX_XparseX_X1X_XparsevarX_X1
    procedure PROGRAMX_XparseX_X1X_XparseconstX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtconstX_X1)
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtidentifierX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonequalX_X1)
            PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        else
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        end if
    end PROGRAMX_XparseX_X1X_XparseconstX_X1
    procedure PROGRAMX_XparseX_X1X_XparsetypeX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XttypeX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonX_X1)
        PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
    end PROGRAMX_XparseX_X1X_XparsetypeX_X1
    procedure PROGRAMX_XparseX_X1X_XparsecallX_X1
        for decreasing PROGRAMX_XparseX_X1X_XparsecallX_X1X_XiX_X1 :
          PROGRAMX_XmaxlinetokensX_X1..2
            PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XparseX_X1X_XparsecallX_X1X_XiX_X1) :=
              PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XparseX_X1X_XparsecallX_X1X_XiX_X1 - 1)
        end for
        PROGRAMX_XcurrentlineX_X1.tokens (1).token := PROGRAMX_XtcallX_X1
        PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XmaxlinetokensX_X1).token :=
          PROGRAMX_XteolX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
    end PROGRAMX_XparseX_X1X_XparsecallX_X1
    procedure PROGRAMX_XparseX_X1X_XparseassignmentX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonequalX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
    end PROGRAMX_XparseX_X1X_XparseassignmentX_X1
    procedure PROGRAMX_XparseX_X1X_XparseidentX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        var PROGRAMX_XparseX_X1X_XparseidentX_X1X_XproccallX_X1 := false
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtlparenX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtlparenX_X1)
            loop
                PROGRAMX_XparseX_X1X_XparseexpressionX_X1
                exit when PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtcommaX_X1
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcommaX_X1)
                PROGRAMX_XparseX_X1X_XparseidentX_X1X_XproccallX_X1 := true
            end loop
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtrparenX_X1)
        end if
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtcolonequalX_X1 and not
          PROGRAMX_XparseX_X1X_XparseidentX_X1X_XproccallX_X1 then
            PROGRAMX_XparseX_X1X_XparseassignmentX_X1
        else
            PROGRAMX_XparseX_X1X_XparsecallX_X1
        end if
    end PROGRAMX_XparseX_X1X_XparseidentX_X1
    procedure PROGRAMX_XparseX_X1X_XparseassertX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtassertX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
    end PROGRAMX_XparseX_X1X_XparseassertX_X1
    procedure PROGRAMX_XparseX_X1X_XparseforX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtforX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtdotdotX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
    end PROGRAMX_XparseX_X1X_XparseforX_X1
    procedure PROGRAMX_XparseX_X1X_XparseifX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtifX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtthenX_X1)
    end PROGRAMX_XparseX_X1X_XparseifX_X1
    procedure PROGRAMX_XparseX_X1X_XparseputX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtputX_X1)
        loop
            PROGRAMX_XparseX_X1X_XparseexpressionX_X1
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtcommaX_X1
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcommaX_X1)
        end loop
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtdotdotX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtdotdotX_X1)
        end if
    end PROGRAMX_XparseX_X1X_XparseputX_X1
    procedure PROGRAMX_XparseX_X1X_XparsegetX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtgetX_X1)
        loop
            PROGRAMX_XparseX_X1X_XparsevariableX_X1
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtcommaX_X1
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcommaX_X1)
        end loop
    end PROGRAMX_XparseX_X1X_XparsegetX_X1
    procedure PROGRAMX_XparseX_X1X_XparseprocedureX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtprocedureX_X1)
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1)
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtlparenX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtlparenX_X1)
            loop
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XtvarX_X1 then
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtvarX_X1)
                end if
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtidentifierX_X1
                  )
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtcolonX_X1)
                PROGRAMX_XparseX_X1X_XparsesimpletypeX_X1
                exit when PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XcurrentptrX_X1).token = PROGRAMX_XtrparenX_X1 or
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XteolX_X1
            end loop
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtrparenX_X1)
        end if
    end PROGRAMX_XparseX_X1X_XparseprocedureX_X1
    procedure PROGRAMX_XparseX_X1X_XparseendX_X1
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
          of
            label PROGRAMX_XtendloopX_X1, PROGRAMX_XtendifX_X1,
              PROGRAMX_XtendforX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtanyX_X1)
            label PROGRAMX_XtendX_X1 :
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtendX_X1)
                case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1
                  ).token of
                    label PROGRAMX_XtidentifierX_X1 :
                        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (
                          PROGRAMX_XtidentifierX_X1)
                    label PROGRAMX_XtloopX_X1 :
                        PROGRAMX_XcurrentlineX_X1.tokens (
                          PROGRAMX_XcurrentptrX_X1 - 1).token :=
                          PROGRAMX_XtendloopX_X1
                        PROGRAMX_XparseX_X1X_XparseshiftX_X1
                    label PROGRAMX_XtforX_X1 :
                        PROGRAMX_XcurrentlineX_X1.tokens (
                          PROGRAMX_XcurrentptrX_X1 - 1).token :=
                          PROGRAMX_XtendforX_X1
                        PROGRAMX_XparseX_X1X_XparseshiftX_X1
                    label PROGRAMX_XtifX_X1 :
                        PROGRAMX_XcurrentlineX_X1.tokens (
                          PROGRAMX_XcurrentptrX_X1 - 1).token :=
                          PROGRAMX_XtendifX_X1
                        PROGRAMX_XparseX_X1X_XparseshiftX_X1
                    label :
                        PROGRAMX_XparseX_X1X_XparseerrorX_X1 (
                          "missing end label")
                        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (
                          PROGRAMX_XtanyX_X1)
                end case
        end case
    end PROGRAMX_XparseX_X1X_XparseendX_X1
    procedure PROGRAMX_XparseX_X1X_XparseelsifX_X1
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtelseifX_X1 then
            PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token :=
              PROGRAMX_XtelsifX_X1
        end if
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtelsifX_X1)
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
        PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtthenX_X1)
    end PROGRAMX_XparseX_X1X_XparseelsifX_X1
    procedure PROGRAMX_XparseX_X1X_XparseinvariantX_X1
        PROGRAMX_XparseX_X1X_XparseassertX_X1
    end PROGRAMX_XparseX_X1X_XparseinvariantX_X1
    procedure PROGRAMX_XparseX_X1X_XparseexitX_X1
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtexitX_X1 then
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtexitX_X1)
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token = PROGRAMX_XtwhenX_X1 then
                PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1)
                  .token := PROGRAMX_XtexitwhenX_X1
                PROGRAMX_XparseX_X1X_XparseshiftX_X1
            else
                PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtwhenX_X1)
            end if
        else
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtexitwhenX_X1)
        end if
        PROGRAMX_XparseX_X1X_XparseexpressionX_X1
    end PROGRAMX_XparseX_X1X_XparseexitX_X1
    procedure PROGRAMX_XparseX_X1X_XparselineX_X1
        if PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
            return
        end if
        PROGRAMX_XcurrentptrX_X1 := 1
        loop
            case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token of
                label PROGRAMX_XtvarX_X1 :
                    PROGRAMX_XparseX_X1X_XparsevarX_X1
                label PROGRAMX_XtconstX_X1 :
                    PROGRAMX_XparseX_X1X_XparseconstX_X1
                label PROGRAMX_XttypeX_X1 :
                    PROGRAMX_XparseX_X1X_XparsetypeX_X1
                label PROGRAMX_XtidentifierX_X1 :
                    PROGRAMX_XparseX_X1X_XparseidentX_X1
                label PROGRAMX_XtassertX_X1 :
                    PROGRAMX_XparseX_X1X_XparseassertX_X1
                label PROGRAMX_XtifX_X1 :
                    PROGRAMX_XparseX_X1X_XparseifX_X1
                label PROGRAMX_XtloopX_X1 :
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtloopX_X1)
                label PROGRAMX_XtforX_X1 :
                    PROGRAMX_XparseX_X1X_XparseforX_X1
                label PROGRAMX_XtputX_X1 :
                    PROGRAMX_XparseX_X1X_XparseputX_X1
                label PROGRAMX_XtgetX_X1 :
                    PROGRAMX_XparseX_X1X_XparsegetX_X1
                label PROGRAMX_XtprocedureX_X1 :
                    PROGRAMX_XparseX_X1X_XparseprocedureX_X1
                label PROGRAMX_XtendX_X1, PROGRAMX_XtendifX_X1,
                  PROGRAMX_XtendloopX_X1, PROGRAMX_XtendforX_X1 :
                    PROGRAMX_XparseX_X1X_XparseendX_X1
                label PROGRAMX_XtelsifX_X1, PROGRAMX_XtelseifX_X1 :
                    PROGRAMX_XparseX_X1X_XparseelsifX_X1
                label PROGRAMX_XtelseX_X1 :
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtelseX_X1)
                label PROGRAMX_XtinvariantX_X1 :
                    PROGRAMX_XparseX_X1X_XparseinvariantX_X1
                label PROGRAMX_XtexitX_X1, PROGRAMX_XtexitwhenX_X1 :
                    PROGRAMX_XparseX_X1X_XparseexitX_X1
                label PROGRAMX_XtcommentX_X1 :
                    PROGRAMX_XparseX_X1X_XparsetokenX_X1 (
                      PROGRAMX_XtcommentX_X1)
                label PROGRAMX_XteolX_X1, PROGRAMX_XtsemicolonX_X1 :
                label :
                    PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("statement expected")
            end case
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtsemicolonX_X1 or
              PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1
            PROGRAMX_XparseX_X1X_XparsetokenX_X1 (PROGRAMX_XtsemicolonX_X1)
        end loop
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token not
          = PROGRAMX_XteolX_X1 then
            PROGRAMX_XparseX_X1X_XparseerrorX_X1 ("end-of-line expected")
        end if
    end PROGRAMX_XparseX_X1X_XparselineX_X1
    import var PROGRAMX_XcurrentlineX_X1

    import var PROGRAMX_XcurrentptrX_X1

    import PROGRAMX_XerrorX_X1

    import var PROGRAMX_XidentX_X1

    export PROGRAMX_XparseX_X1X_XparselineX_X1

end PROGRAMX_XparseX_X1
const * PROGRAMX_XfirstsymbolkindX_X1 := 0
const * PROGRAMX_XsyconstX_X1 := 0
const * PROGRAMX_XsyvarX_X1 := 1
const * PROGRAMX_XsytypeX_X1 := 2
const * PROGRAMX_XsyprocedureX_X1 := 3
const * PROGRAMX_XsytempX_X1 := 4
const * PROGRAMX_XsydescriptorX_X1 := 5
const * PROGRAMX_XsyelementdescriptorX_X1 := 6
const * PROGRAMX_XlastsymbolkindX_X1 := 6
type * symbolkinds : PROGRAMX_XfirstsymbolkindX_X1..
  PROGRAMX_XlastsymbolkindX_X1
const * PROGRAMX_XfirsttypekindX_X1 := 0
const * PROGRAMX_XtyintX_X1 := 0
const * PROGRAMX_XtyrealX_X1 := 1
const * PROGRAMX_XtybooleanX_X1 := 2
const * PROGRAMX_XtystringX_X1 := 3
const * PROGRAMX_XtyintarrayX_X1 := 4
const * PROGRAMX_XtyrealarrayX_X1 := 5
const * PROGRAMX_XtybooleanarrayX_X1 := 6
const * PROGRAMX_XtystringarrayX_X1 := 7
const * PROGRAMX_XtyprocedureX_X1 := 8
const * PROGRAMX_XlasttypekindX_X1 := 8
type * typekinds : PROGRAMX_XfirsttypekindX_X1..PROGRAMX_XlasttypekindX_X1
const * PROGRAMX_XfirstscopekindX_X1 := 0
const * PROGRAMX_XscmainX_X1 := 0
const * PROGRAMX_XscprocedureX_X1 := 1
const * PROGRAMX_XscforX_X1 := 2
const * PROGRAMX_XscloopX_X1 := 3
const * PROGRAMX_XscifX_X1 := 4
const * PROGRAMX_XscelseX_X1 := 5
const * PROGRAMX_XlastscopekindX_X1 := 5
type * scopekinds : PROGRAMX_XfirstscopekindX_X1..PROGRAMX_XlastscopekindX_X1
module PROGRAMX_XrunstackX_X1
    const PROGRAMX_XrunstackX_X1X_XscalartypeX_X1 : array
      PROGRAMX_XtyintarrayX_X1..PROGRAMX_XtystringarrayX_X1 of int :=
        init (PROGRAMX_XtyintX_X1, PROGRAMX_XtyrealX_X1, PROGRAMX_XtybooleanX_X1
          , PROGRAMX_XtystringX_X1)
    const PROGRAMX_XrunstackX_X1X_XarraytypeX_X1 : array PROGRAMX_XtyintX_X1..
      PROGRAMX_XtystringX_X1 of int :=
        init (PROGRAMX_XtyintarrayX_X1, PROGRAMX_XtyrealarrayX_X1,
          PROGRAMX_XtybooleanarrayX_X1, PROGRAMX_XtystringarrayX_X1)
    const PROGRAMX_XrunstackX_X1X_XuninitintX_X1 := - 2147483647
    const PROGRAMX_XrunstackX_X1X_XuninitrealX_X1 := 1e-38
    const PROGRAMX_XrunstackX_X1X_XuninitstringX_X1 := "XXX"
    type runstacktype : record
    ident : int
    kind : int
    typekind : int
    upperbound, lowerbound : int
    intvalue : int
    realvalue : real
    stringvalue : string
    indirect : int
    end record
    var PROGRAMX_XrunstackX_X1X_XrunstackX_X1 : array 0..
      PROGRAMX_XmaxrunstackdepthX_X1 of int
    var PROGRAMX_XrunstackX_X1X_XruntopX_X1 := 0
    const PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1 : int :=
        init (0, PROGRAMX_XsyconstX_X1, PROGRAMX_XtyintX_X1, 0, 0,
          PROGRAMX_XrunstackX_X1X_XuninitintX_X1,
          PROGRAMX_XrunstackX_X1X_XuninitrealX_X1,
          PROGRAMX_XrunstackX_X1X_XuninitstringX_X1, 0)
    PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (0) :=
      PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1
    var PROGRAMX_XrunstackX_X1X_XarraystackX_X1 : array 0..
      PROGRAMX_XmaxarraystackdepthX_X1 of int
    var PROGRAMX_XrunstackX_X1X_XarraytopX_X1 := 0
    PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (0) :=
      PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1
    var PROGRAMX_XrunstackX_X1X_XscopestackX_X1 : array 1..
      PROGRAMX_XmaxscopestackdepthX_X1 of record
    kind : int
    line : int
    ident : int
    value : int
    runbase, arraybase : int
    end record
    var PROGRAMX_XrunstackX_X1X_XscopetopX_X1 := 0
    procedure PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunerrorX_X1X_XmsgX_X1 : string)
        if PROGRAMX_XcurrentptrX_X1 > 1 then
            PROGRAMX_XcurrentptrX_X1 -= 1
            PROGRAMX_XerrorX_X1 ("RUN ERROR : " +
              PROGRAMX_XrunstackX_X1X_XrunerrorX_X1X_XmsgX_X1)
            PROGRAMX_XcurrentptrX_X1 += 1
        else
            PROGRAMX_XerrorX_X1 ("RUN ERROR : " +
              PROGRAMX_XrunstackX_X1X_XrunerrorX_X1X_XmsgX_X1)
        end if
    end PROGRAMX_XrunstackX_X1X_XrunerrorX_X1
    procedure PROGRAMX_XrunstackX_X1X_XinitscopeX_X1
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 := 0
        PROGRAMX_XrunstackX_X1X_XarraytopX_X1 := 0
        PROGRAMX_XrunstackX_X1X_XscopetopX_X1 := 0
    end PROGRAMX_XrunstackX_X1X_XinitscopeX_X1
    procedure PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (
      PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XkindX_X1 : int,
      PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XlineX_X1 : int,
      PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XidentX_X1 : int,
      PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XvalueX_X1 : int)
        if PROGRAMX_XrunstackX_X1X_XscopetopX_X1 <
          PROGRAMX_XmaxscopestackdepthX_X1 then
            PROGRAMX_XrunstackX_X1X_XscopetopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XkindX_X1 :=
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XkindX_X1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XlineX_X1 :=
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XlineX_X1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XidentX_X1 :=
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XidentX_X1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XvalueX_X1 :=
              PROGRAMX_XrunstackX_X1X_XpushscopeX_X1X_XvalueX_X1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).runbase :=
              PROGRAMX_XrunstackX_X1X_XruntopX_X1
            PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XscopetopX_X1).arraybase :=
              PROGRAMX_XrunstackX_X1X_XarraytopX_X1
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("nesting too deep")
        end if
    end PROGRAMX_XrunstackX_X1X_XpushscopeX_X1
    function PROGRAMX_XrunstackX_X1X_XscopekindX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).kind
    end PROGRAMX_XrunstackX_X1X_XscopekindX_X1
    function PROGRAMX_XrunstackX_X1X_XscopelineX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).line
    end PROGRAMX_XrunstackX_X1X_XscopelineX_X1
    function PROGRAMX_XrunstackX_X1X_XscopeidentX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).ident
    end PROGRAMX_XrunstackX_X1X_XscopeidentX_X1
    function PROGRAMX_XrunstackX_X1X_XscopevalueX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).value
    end PROGRAMX_XrunstackX_X1X_XscopevalueX_X1
    procedure PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 :=
          PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).runbase
        PROGRAMX_XrunstackX_X1X_XarraytopX_X1 :=
          PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1).arraybase
        PROGRAMX_XrunstackX_X1X_XscopetopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrundumpX_X1
        put "run stack dump"
        for decreasing PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1 :
          PROGRAMX_XrunstackX_X1X_XruntopX_X1..1
            put "ident ", PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).ident, "  kind ",
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).kind, "  type ",
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).typekind, "  value "
              ..
            case PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).kind of
                label PROGRAMX_XsyvarX_X1, PROGRAMX_XsyconstX_X1,
                  PROGRAMX_XsytempX_X1 :
                    case PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).typekind of
                        label PROGRAMX_XtyintX_X1 :
                            put PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              intvalue
                        label PROGRAMX_XtyrealX_X1 :
                            put PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              realvalue
                        label PROGRAMX_XtystringX_X1 :
                            put "\"", PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              stringvalue, "\""
                        label PROGRAMX_XtyintarrayX_X1,
                          PROGRAMX_XtyrealarrayX_X1,
                          PROGRAMX_XtybooleanarrayX_X1,
                          PROGRAMX_XtystringarrayX_X1 :
                            put PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              indirect, "  lower ",
                              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              lowerbound, "  upper ",
                              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                              PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).
                              upperbound
                        label :
                            put ""
                    end case
                label :
                    put PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrundumpX_X1X_XiX_X1).indirect
            end case
        end for
        put "end dump"
    end PROGRAMX_XrunstackX_X1X_XrundumpX_X1
    function PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XidentX_X1 : int) : int
        var PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XproctopX_X1 :=
          PROGRAMX_XrunstackX_X1X_XscopetopX_X1
        loop
            exit when PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XproctopX_X1).kind =
              PROGRAMX_XscprocedureX_X1
            PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XproctopX_X1 -= 1
        end loop
        for decreasing PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X1 :
          PROGRAMX_XrunstackX_X1X_XruntopX_X1..
          PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (
          PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XproctopX_X1).runbase + 1
            if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X1).
              PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XidentX_X1 =
              PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XidentX_X1 then
                result PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X1
            end if
        end for
        if PROGRAMX_XrunstackX_X1X_XscopetopX_X1 > 1 then
            for PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X2 : 1..
              PROGRAMX_XrunstackX_X1X_XscopestackX_X1 (2).runbase
                if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X2).
                  PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XidentX_X1 =
                  PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XidentX_X1 then
                    result PROGRAMX_XrunstackX_X1X_XrunlookupX_X1X_XriX_X2
                end if
            end for
        end if
        result 0
    end PROGRAMX_XrunstackX_X1X_XrunlookupX_X1
    function PROGRAMX_XrunstackX_X1X_XruntypeX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind
    end PROGRAMX_XrunstackX_X1X_XruntypeX_X1
    function PROGRAMX_XrunstackX_X1X_XrunkindX_X1 : int
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsydescriptorX_X1
          then
            result PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).kind
        elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
          PROGRAMX_XsyelementdescriptorX_X1 then
            result PROGRAMX_XsyvarX_X1
        else
            result PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind
        end if
    end PROGRAMX_XrunstackX_X1X_XrunkindX_X1
    function PROGRAMX_XrunstackX_X1X_XrunidentX_X1 : int
        result PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident
    end PROGRAMX_XrunstackX_X1X_XrunidentX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpopX_X1
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XrunpopX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunswapX_X1
        const PROGRAMX_XrunstackX_X1X_XrunswapX_X1X_XtX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1)
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
          PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 1)
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 1) :=
          PROGRAMX_XrunstackX_X1X_XrunswapX_X1X_XtX_X1
    end PROGRAMX_XrunstackX_X1X_XrunswapX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (var
      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1 : int)
        assert PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsytempX_X1
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind = PROGRAMX_XtyintX_X1
          then
            PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).intvalue
            if PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1 =
              PROGRAMX_XrunstackX_X1X_XuninitintX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                  "uninitialized integer variable")
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1 := 1
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("integer value required")
            PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1 := 1
        end if
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XrunpopintX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1 (var
      PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1 : real)
        assert PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsytempX_X1
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind = PROGRAMX_XtyrealX_X1
          then
            PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).realvalue
            if PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1 =
              PROGRAMX_XrunstackX_X1X_XuninitrealX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                  "uninitialized real variable")
                PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1 := 1
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("real value required")
            PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1 := 1
        end if
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (var
      PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1 : int)
        assert PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsytempX_X1
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind =
          PROGRAMX_XtybooleanX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).intvalue
            if PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1 =
              PROGRAMX_XrunstackX_X1X_XuninitintX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                  "uninitialized boolean variable")
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1 := 1
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("boolean value required")
            PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1 := 1
        end if
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (var
      PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1 : string)
        assert PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsytempX_X1
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind = PROGRAMX_XtystringX_X1
          then
            PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).stringvalue
            if PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1 =
              PROGRAMX_XrunstackX_X1X_XuninitstringX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                  "uninitialized string variable")
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1 := "?"
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("string value required")
            PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1 := "?"
        end if
        PROGRAMX_XrunstackX_X1X_XruntopX_X1 -= 1
    end PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunpushintX_X1X_XvalueX_X1 : int)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident := 0
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind := PROGRAMX_XsytempX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
              PROGRAMX_XtyintX_X1
            if PROGRAMX_XrunstackX_X1X_XrunpushintX_X1X_XvalueX_X1 >= -
              PROGRAMX_XmaxintX_X1 and
              PROGRAMX_XrunstackX_X1X_XrunpushintX_X1X_XvalueX_X1 <=
              PROGRAMX_XmaxintX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).intvalue :=
                  PROGRAMX_XrunstackX_X1X_XrunpushintX_X1X_XvalueX_X1
            else
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("integer overflow")
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).intvalue := 1
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunpushintX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1X_XvalueX_X1 : real)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident := 0
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind := PROGRAMX_XsytempX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
              PROGRAMX_XtyrealX_X1
            if PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1X_XvalueX_X1 >= -
              PROGRAMX_XmaxrealX_X1 and
              PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1X_XvalueX_X1 <=
              PROGRAMX_XmaxrealX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).realvalue :=
                  PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1X_XvalueX_X1
            else
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("real overflow")
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).realvalue := 1
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunpushrealX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1X_XvalueX_X1 : int)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident := 0
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind := PROGRAMX_XsytempX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
              PROGRAMX_XtybooleanX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).intvalue :=
              PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1X_XvalueX_X1
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1X_XvalueX_X1 : string)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident := 0
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind := PROGRAMX_XsytempX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
              PROGRAMX_XtystringX_X1
            if LIBRARYX_XlengthX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1X_XvalueX_X1) <=
              PROGRAMX_XmaxstringlengthX_X1 then
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).stringvalue :=
                  PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1X_XvalueX_X1
            else
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("string length overflow"
                  )
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).stringvalue := "?"
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_XidentindexX_X1 : int)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            const PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_Xindex_X_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_XidentindexX_X1)
            if PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_Xindex_X_X1 = 0 then
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("undeclared identifier")
            end if
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_Xindex_X_X1)
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).ident := 0
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind :=
              PROGRAMX_XsydescriptorX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect :=
              PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1X_Xindex_X_X1
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1
        var PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XsubscriptX_X1 : int
        PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
          PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XsubscriptX_X1 : var
          PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
        const PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind
        if PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 =
          PROGRAMX_XtyintarrayX_X1 or
          PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 =
          PROGRAMX_XtyrealarrayX_X1 or
          PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 =
          PROGRAMX_XtybooleanarrayX_X1 or
          PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 =
          PROGRAMX_XtystringarrayX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind :=
              PROGRAMX_XsyelementdescriptorX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).
              PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 :=
              PROGRAMX_XrunstackX_X1X_XscalartypeX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1)
            if PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XsubscriptX_X1 >=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).lowerbound and
              PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XsubscriptX_X1 <=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).upperbound then
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect :=
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect +
                  PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XsubscriptX_X1 -
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).lowerbound
            else
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("subscript out of range"
                  )
                PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect := 0
            end if
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal subscript")
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind :=
              PROGRAMX_XsydescriptorX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).
              PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1 :=
              PROGRAMX_XrunstackX_X1X_XscalartypeX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1X_XtypekindX_X1)
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect := 0
        end if
    end PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind = PROGRAMX_XsydescriptorX_X1
          then
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect)
        elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
          PROGRAMX_XsyelementdescriptorX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
              PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect)
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
              "variable reference required")
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
              PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1
        end if
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind := PROGRAMX_XsytempX_X1
    end PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunassignX_X1
        assert PROGRAMX_XrunstackX_X1X_XruntopX_X1 >= 2
        case PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 1).typekind of
            label PROGRAMX_XtyintX_X1 :
                var PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X1 : int
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsydescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).intvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X1
                elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsyelementdescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).intvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X1
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal assignment"
                      )
                end if
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
            label PROGRAMX_XtyrealX_X1 :
                var PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X2 : real
                PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpoprealX_X1X_XvalueX_X1)
                if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsydescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).realvalue
                      := PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X2
                elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsyelementdescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).realvalue
                      := PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X2
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal assignment"
                      )
                end if
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
            label PROGRAMX_XtybooleanX_X1 :
                var PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X3 : int
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X3 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsydescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).intvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X3
                elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsyelementdescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).intvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X3
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal assignment"
                      )
                end if
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
            label PROGRAMX_XtystringX_X1 :
                var PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X4 : string
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X4 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsydescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).
                      stringvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X4
                elsif PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XruntopX_X1).kind =
                  PROGRAMX_XsyelementdescriptorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                      PROGRAMX_XrunstackX_X1X_XruntopX_X1).indirect).
                      stringvalue :=
                      PROGRAMX_XrunstackX_X1X_XrunassignX_X1X_XvX_X4
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal assignment"
                      )
                end if
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
            label :
                PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("illegal assignment")
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                PROGRAMX_XrunstackX_X1X_XrunpopX_X1
        end case
    end PROGRAMX_XrunstackX_X1X_XrunassignX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XidentX_X1 : int,
      PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XkindX_X1 : int)
        if PROGRAMX_XrunstackX_X1X_XruntopX_X1 < PROGRAMX_XmaxrunstackdepthX_X1
          then
            PROGRAMX_XrunstackX_X1X_XruntopX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1) :=
              PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).
              PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XidentX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XidentX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).
              PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XkindX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunallocateX_X1X_XkindX_X1
            PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 1).typekind
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunallocateX_X1
    procedure PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1 (
      PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XidentX_X1 : int,
      PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XkindX_X1 : int)
        const PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XelementtypeX_X1 :=
          PROGRAMX_XrunstackX_X1X_XruntypeX_X1
        PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XidentX_X1,
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XkindX_X1)
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).typekind :=
          PROGRAMX_XrunstackX_X1X_XarraytypeX_X1 (
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XelementtypeX_X1)
        var PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 : int
        var PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 : int
        if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 3).typekind =
          PROGRAMX_XtyintX_X1 and PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 2).typekind =
          PROGRAMX_XtyintX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 3).intvalue
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 :=
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XruntopX_X1 - 2).intvalue
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
              "array bounds must be integers")
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 := 1
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 := 10
        end if
        if PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 >
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
              "array lower bound exceeds upper")
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 := 1
            PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 := 10
        end if
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1
        PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
          PROGRAMX_XrunstackX_X1X_XruntopX_X1).
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1
        const PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XarraysizeX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XupperboundX_X1 -
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XlowerboundX_X1 + 1
        if PROGRAMX_XrunstackX_X1X_XarraytopX_X1 +
          PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XarraysizeX_X1 <=
          PROGRAMX_XmaxarraystackdepthX_X1 then
            for PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XiX_X1 : 1..
              PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XarraysizeX_X1
                PROGRAMX_XrunstackX_X1X_XarraytopX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XarraytopX_X1) :=
                  PROGRAMX_XrunstackX_X1X_XnullrunstackentryX_X1
                PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XarraytopX_X1).
                  PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XkindX_X1 :=
                  PROGRAMX_XsyvarX_X1
                PROGRAMX_XrunstackX_X1X_XarraystackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XarraytopX_X1).typekind :=
                  PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1X_XelementtypeX_X1
            end for
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("out of array memory")
        end if
    end PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1
    procedure PROGRAMX_XrunstackX_X1X_XprintvalueX_X1 (
      PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1 : int)
        case PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.typekind of
            label PROGRAMX_XtyintX_X1 :
                if PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.intvalue =
                  PROGRAMX_XrunstackX_X1X_XuninitintX_X1 then
                    put "uninitialized"..
                else
                    put PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.
                      intvalue..
                end if
            label PROGRAMX_XtybooleanX_X1 :
                if PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.intvalue =
                  PROGRAMX_XrunstackX_X1X_XuninitintX_X1 then
                    put "uninitialized"..
                elsif PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.intvalue =
                  1 then
                    put "true"..
                else
                    put "false"..
                end if
            label PROGRAMX_XtystringX_X1 :
                if PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.stringvalue =
                  PROGRAMX_XrunstackX_X1X_XuninitstringX_X1 then
                    put "uninitialized"..
                else
                    put "\"", PROGRAMX_XrunstackX_X1X_XprintvalueX_X1X_XsX_X1.
                      stringvalue, "\""..
                end if
            label :
        end case
    end PROGRAMX_XrunstackX_X1X_XprintvalueX_X1
    const PROGRAMX_XrunstackX_X1X_XkindnameX_X1 : array 1..1 of string (10) :=
        init ("const", "var", "type", "procedure", "", "", "")
    const PROGRAMX_XrunstackX_X1X_XtypenameX_X1 : array 1..1 of string (20) :=
        init ("int", "real", "boolean", "string", "array of int",
          "array of real", "array of boolean", "array of string", "")
    procedure PROGRAMX_XrunstackX_X1X_XprintvarsX_X1
        for decreasing PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1 :
          PROGRAMX_XrunstackX_X1X_XruntopX_X1..1
            if PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1).ident not = 0 and
              PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
              PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1).kind <=
              PROGRAMX_XsyprocedureX_X1 then
                put PROGRAMX_XrunstackX_X1X_XkindnameX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1).kind), " ",
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1).ident), " : "
                  , PROGRAMX_XrunstackX_X1X_XtypenameX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1).typekind),
                  "/t"..
                PROGRAMX_XrunstackX_X1X_XprintvalueX_X1 (
                  PROGRAMX_XrunstackX_X1X_XrunstackX_X1 (
                  PROGRAMX_XrunstackX_X1X_XprintvarsX_X1X_XiX_X1))
                put ""
            end if
        end for
    end PROGRAMX_XrunstackX_X1X_XprintvarsX_X1
    import var PROGRAMX_XcurrentptrX_X1

    import var PROGRAMX_XidentX_X1

    import PROGRAMX_XerrorX_X1

    export PROGRAMX_XrunstackX_X1X_XinitscopeX_X1

    export PROGRAMX_XrunstackX_X1X_XscopekindX_X1

    export PROGRAMX_XrunstackX_X1X_XscopelineX_X1

    export PROGRAMX_XrunstackX_X1X_XscopeidentX_X1

    export PROGRAMX_XrunstackX_X1X_XscopevalueX_X1

    export PROGRAMX_XrunstackX_X1X_XpushscopeX_X1

    export PROGRAMX_XrunstackX_X1X_XpopscopeX_X1

    export PROGRAMX_XrunstackX_X1X_XprintvarsX_X1

    export PROGRAMX_XrunstackX_X1X_XrunerrorX_X1

    export PROGRAMX_XrunstackX_X1X_XrunkindX_X1

    export PROGRAMX_XrunstackX_X1X_XruntypeX_X1

    export PROGRAMX_XrunstackX_X1X_XrunidentX_X1

    export PROGRAMX_XrunstackX_X1X_XrunlookupX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpopX_X1

    export PROGRAMX_XrunstackX_X1X_XrunswapX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpopintX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpushintX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1

    export PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1

    export PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1

    export PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1

    export PROGRAMX_XrunstackX_X1X_XrunassignX_X1

    export PROGRAMX_XrunstackX_X1X_XrunallocateX_X1

    export PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1

end PROGRAMX_XrunstackX_X1
const * PROGRAMX_XfirstoperatorX_X1 := 0
const * PROGRAMX_XopendexpressionX_X1 := 0
const * PROGRAMX_XoplparenX_X1 := 1
const * PROGRAMX_XoprparenX_X1 := 2
const * PROGRAMX_XoporX_X1 := 3
const * PROGRAMX_XopandX_X1 := 4
const * PROGRAMX_XopnotX_X1 := 5
const * PROGRAMX_XopgreaterX_X1 := 6
const * PROGRAMX_XopequalX_X1 := 7
const * PROGRAMX_XoplessX_X1 := 8
const * PROGRAMX_XopgreaterequalX_X1 := 9
const * PROGRAMX_XoplessequalX_X1 := 10
const * PROGRAMX_XopnotequalX_X1 := 11
const * PROGRAMX_XopaddX_X1 := 12
const * PROGRAMX_XopsubtractX_X1 := 13
const * PROGRAMX_XopmultiplyX_X1 := 14
const * PROGRAMX_XopdivX_X1 := 15
const * PROGRAMX_XopmodX_X1 := 16
const * PROGRAMX_XopplusX_X1 := 17
const * PROGRAMX_XopminusX_X1 := 18
const * PROGRAMX_XlastoperatorX_X1 := 18
type * operators : PROGRAMX_XfirstoperatorX_X1..PROGRAMX_XlastoperatorX_X1
const * PROGRAMX_XoperatorprecedenceX_X1 : array 1..1 of int :=
    init (0, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 6, 6, 7, 7, 7, 8, 8)
const * PROGRAMX_XbinaryoperatorX_X1 : array PROGRAMX_XtdivX_X1..
  PROGRAMX_XtnotequalX_X1 of int :=
    init (PROGRAMX_XopdivX_X1, PROGRAMX_XopmodX_X1, PROGRAMX_XopandX_X1,
      PROGRAMX_XoporX_X1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, PROGRAMX_XopaddX_X1,
      PROGRAMX_XopsubtractX_X1, PROGRAMX_XopmultiplyX_X1,
      PROGRAMX_XopgreaterX_X1, PROGRAMX_XoplessX_X1, PROGRAMX_XopequalX_X1,
      PROGRAMX_XopgreaterequalX_X1, PROGRAMX_XoplessequalX_X1,
      PROGRAMX_XopnotequalX_X1)
const * PROGRAMX_XunaryoperatorX_X1 : array PROGRAMX_XtnotX_X1..
  PROGRAMX_XtminusX_X1 of int :=
    init (PROGRAMX_XopnotX_X1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
      PROGRAMX_XopplusX_X1, PROGRAMX_XopminusX_X1)
module PROGRAMX_XoperatorX_X1
    var PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 : array 1..
      PROGRAMX_XmaxoperatorstackdepthX_X1 of int
    var PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 := 0
    procedure PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1 (
      PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1X_XoperatorX_X1 : int)
        if PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 <
          PROGRAMX_XmaxoperatorstackdepthX_X1 then
            PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 += 1
            PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
              PROGRAMX_XoperatorX_X1X_XoperatortopX_X1) :=
              PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1X_XoperatorX_X1
        else
            PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 ("expression too complex")
        end if
    end PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1
    procedure PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
        PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 -= 1
    end PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
    procedure PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1 (var
      PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1 : int)
        case PROGRAMX_XrunstackX_X1X_XruntypeX_X1 of
            label PROGRAMX_XtyintX_X1 :
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X1 : int
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X1 : int
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X1 =
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X1 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopequalX_X1
                elsif PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X1 >
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X1 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopgreaterX_X1
                else
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XoplessX_X1
                end if
            label PROGRAMX_XtybooleanX_X1 :
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X2 : int
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X2 : int
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X2 =
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X2 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopequalX_X1
                elsif PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X2 >
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X2 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopgreaterX_X1
                else
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XoplessX_X1
                end if
            label PROGRAMX_XtystringX_X1 :
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X3 :
                  string
                var PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X3 :
                  string
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X3 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X3 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X3 =
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X3 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopequalX_X1
                elsif PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv2X_X3 >
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_Xv1X_X3 then
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XopgreaterX_X1
                else
                    PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                      := PROGRAMX_XoplessX_X1
                end if
        end case
    end PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1
    procedure PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1 (
      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XoperatorX_X1 : int)
        var PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : int
        var PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : int
        var PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs1X_X1 : string
        var PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs2X_X1 : string
        var PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1 : int
        case PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XoperatorX_X1 of
            label PROGRAMX_XoporX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 = 1 or
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 = 1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XopandX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 = 1 and
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 = 1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XopnotX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 = 1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                end if
            label PROGRAMX_XopgreaterX_X1, PROGRAMX_XoplessX_X1,
              PROGRAMX_XopequalX_X1 :
                PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1 :
                  var
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                  )
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1
                  = PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XoperatorX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XopgreaterequalX_X1 :
                PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1 :
                  var
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                  )
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1
                  not = PROGRAMX_XoplessX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XoplessequalX_X1 :
                PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1 :
                  var
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                  )
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1
                  not = PROGRAMX_XopgreaterX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XopnotequalX_X1 :
                PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1 :
                  var
                  PROGRAMX_XoperatorX_X1X_XoperatorcompareX_X1X_XcompareresultX_X1
                  )
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XcompareresultX_X1
                  not = PROGRAMX_XopequalX_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                end if
            label PROGRAMX_XopaddX_X1 :
                if PROGRAMX_XrunstackX_X1X_XruntypeX_X1 = PROGRAMX_XtystringX_X1
                  then
                    PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs1X_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs2X_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs2X_X1 +
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xs1X_X1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 +
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
                end if
            label PROGRAMX_XopsubtractX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 -
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
            label PROGRAMX_XopmultiplyX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 not = 0 and
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 <
                  PROGRAMX_XmaxintX_X1 div
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 *
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                      "integer multiply overflow")
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                end if
            label PROGRAMX_XopdivX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 not = 0
                  then
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 div
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                      "integer div by zero")
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                end if
            label PROGRAMX_XopmodX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 not = 0
                  then
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv2X_X1 mod
                      PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunerrorX_X1 (
                      "integer mod by zero")
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                end if
            label PROGRAMX_XopplusX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
            label PROGRAMX_XopminusX_X1 :
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (-
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_Xv1X_X1)
            label :
                put "assertion failure with operatorrun of ",
                  PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1X_XoperatorX_X1
        end case
    end PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1
    procedure PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
      PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1X_XoperatorX_X1 : int)
        case PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1X_XoperatorX_X1 of
            label PROGRAMX_XoplparenX_X1 :
                PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1 (
                  PROGRAMX_XoplparenX_X1)
            label PROGRAMX_XoprparenX_X1 :
                loop
                    exit when PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatortopX_X1) =
                      PROGRAMX_XoplparenX_X1
                    PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatortopX_X1))
                    PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
                end loop
                PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
            label PROGRAMX_XopendexpressionX_X1 :
                loop
                    exit when PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 = 0
                    PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatortopX_X1))
                    PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
                end loop
            label :
                loop
                    exit when PROGRAMX_XoperatorX_X1X_XoperatortopX_X1 = 0 or
                      PROGRAMX_XoperatorprecedenceX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatortopX_X1)) <
                      PROGRAMX_XoperatorprecedenceX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1X_XoperatorX_X1)
                    PROGRAMX_XoperatorX_X1X_XoperatorrunX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatorstackX_X1 (
                      PROGRAMX_XoperatorX_X1X_XoperatortopX_X1))
                    PROGRAMX_XoperatorX_X1X_XoperatorpopX_X1
                end loop
                PROGRAMX_XoperatorX_X1X_XoperatorpushX_X1 (
                  PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1X_XoperatorX_X1)
        end case
    end PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1
    import var PROGRAMX_XrunstackX_X1

    export PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1

end PROGRAMX_XoperatorX_X1
module PROGRAMX_XexecX_X1
    procedure PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
      PROGRAMX_XexecX_X1X_XexecerrorX_X1X_XmsgX_X1 : string)
        if PROGRAMX_XcurrentptrX_X1 > 1 then
            PROGRAMX_XcurrentptrX_X1 -= 1
            PROGRAMX_XerrorX_X1 ("RUN ERROR : " +
              PROGRAMX_XexecX_X1X_XexecerrorX_X1X_XmsgX_X1)
            PROGRAMX_XcurrentptrX_X1 += 1
        else
            PROGRAMX_XerrorX_X1 ("RUN ERROR : " +
              PROGRAMX_XexecX_X1X_XexecerrorX_X1X_XmsgX_X1)
        end if
    end PROGRAMX_XexecX_X1X_XexecerrorX_X1
    procedure PROGRAMX_XexecX_X1X_XexecvariableX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (PROGRAMX_XcurrentlineX_X1.
          tokens (PROGRAMX_XcurrentptrX_X1 - 1).value)
        if PROGRAMX_XrunstackX_X1X_XrunkindX_X1 = PROGRAMX_XsyvarX_X1 or
          PROGRAMX_XrunstackX_X1X_XrunkindX_X1 = PROGRAMX_XsyconstX_X1 then
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token = PROGRAMX_XtlparenX_X1 then
                PROGRAMX_XcurrentptrX_X1 += 1
                if PROGRAMX_XrunstackX_X1X_XrunkindX_X1 = PROGRAMX_XsyvarX_X1
                  and (PROGRAMX_XrunstackX_X1X_XruntypeX_X1 =
                  PROGRAMX_XtyintarrayX_X1 or
                  PROGRAMX_XrunstackX_X1X_XruntypeX_X1 =
                  PROGRAMX_XtystringarrayX_X1 or
                  PROGRAMX_XrunstackX_X1X_XruntypeX_X1 =
                  PROGRAMX_XtybooleanarrayX_X1) then
                    PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                    PROGRAMX_XrunstackX_X1X_XrunsubscriptX_X1
                else
                    PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                      "subscripted identifier is not an array")
                    PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                end if
                PROGRAMX_XcurrentptrX_X1 += 1
            end if
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("variable reference expected")
            PROGRAMX_XrunstackX_X1X_XrunpopX_X1
            PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (0)
        end if
    end PROGRAMX_XexecX_X1X_XexecvariableX_X1
    procedure PROGRAMX_XexecX_X1X_XexecconstantX_X1
        const PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XtokenX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
        case PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XtokenX_X1 of
            label PROGRAMX_XtidentifierX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1
                  ).value)
                if PROGRAMX_XrunstackX_X1X_XrunkindX_X1 = PROGRAMX_XsyconstX_X1
                  then
                    PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1
                else
                    PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("constant expected")
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                end if
            label PROGRAMX_XtintegerX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1
                  ).value)
            label PROGRAMX_XtstringlitX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                var PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XstextX_X1 :=
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1
                  ).value)
                PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XstextX_X1 :=
                  PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XstextX_X1 (2..
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XstextX_X1) - 1)
                PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (
                  PROGRAMX_XexecX_X1X_XexecconstantX_X1X_XstextX_X1)
            label PROGRAMX_XttrueX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
            label PROGRAMX_XtfalseX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
            label :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("constant value expected")
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
        end case
    end PROGRAMX_XexecX_X1X_XexecconstantX_X1
    procedure PROGRAMX_XexecX_X1X_XexecoperandX_X1
        const PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
        if PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1 =
          PROGRAMX_XtplusX_X1 or
          PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1 =
          PROGRAMX_XtminusX_X1 or
          PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1 = PROGRAMX_XtnotX_X1
          then
            PROGRAMX_XcurrentptrX_X1 += 1
            PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
              PROGRAMX_XunaryoperatorX_X1 (PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1 - 1).
              PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1))
        end if
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
          PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XtokenX_X1 of
            label PROGRAMX_XtintegerX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1
                  ).value)
            label PROGRAMX_XtstringlitX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                var PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XstextX_X1 :=
                  PROGRAMX_XidentX_X1X_XidentidentX_X1 (
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1 - 1
                  ).value)
                PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XstextX_X1 :=
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XstextX_X1 (2..
                  LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XstextX_X1) - 1)
                PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XstextX_X1)
            label PROGRAMX_XttrueX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
            label PROGRAMX_XtfalseX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
            label PROGRAMX_XtlparenX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
                  PROGRAMX_XoplparenX_X1)
                PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
                  PROGRAMX_XoprparenX_X1)
            label PROGRAMX_XtchrX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                var PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X1 : int
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (LIBRARYX_XchrX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X1))
                PROGRAMX_XcurrentptrX_X1 += 1
            label PROGRAMX_XtordX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                var PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X2 : string
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                if LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X2) = 1 then
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (LIBRARYX_XordX_X1 (
                      PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X2))
                else
                    PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                      "length of string passed to ord is not 1")
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                end if
                PROGRAMX_XcurrentptrX_X1 += 1
            label PROGRAMX_XtlengthX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
                var PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X3 : string
                PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X3 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (LIBRARYX_XlengthX_X1 (
                  PROGRAMX_XexecX_X1X_XexecoperandX_X1X_XvX_X3))
                PROGRAMX_XcurrentptrX_X1 += 1
            label PROGRAMX_XtidentifierX_X1 :
                PROGRAMX_XexecX_X1X_XexecvariableX_X1
                PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1
        end case
    end PROGRAMX_XexecX_X1X_XexecoperandX_X1
    procedure PROGRAMX_XexecX_X1X_XexecoperatorX_X1
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
          of
            label PROGRAMX_XtplusX_X1, PROGRAMX_XtminusX_X1, PROGRAMX_XtstarX_X1
              , PROGRAMX_XtdivX_X1, PROGRAMX_XtmodX_X1, PROGRAMX_XtgreaterX_X1,
              PROGRAMX_XtlessX_X1, PROGRAMX_XtequalX_X1,
              PROGRAMX_XtgreaterequalX_X1, PROGRAMX_XtlessequalX_X1,
              PROGRAMX_XtandX_X1, PROGRAMX_XtorX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
                  PROGRAMX_XbinaryoperatorX_X1 (PROGRAMX_XcurrentlineX_X1.
                  tokens (PROGRAMX_XcurrentptrX_X1 - 1).token))
            label PROGRAMX_XtnotX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
                  PROGRAMX_XopnotequalX_X1)
            label :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("operator expected")
                PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (PROGRAMX_XopaddX_X1)
        end case
    end PROGRAMX_XexecX_X1X_XexecoperatorX_X1
    procedure PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
        loop
            PROGRAMX_XexecX_X1X_XexecoperandX_X1
            const PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
            exit when PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XteolX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtsemicolonX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommaX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtrparenX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtthenX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtdotdotX_X1 or
              PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1X_XtokenX_X1 =
              PROGRAMX_XtcommentX_X1
            PROGRAMX_XexecX_X1X_XexecoperatorX_X1
        end loop
    end PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
    procedure PROGRAMX_XexecX_X1X_XexecexpressionX_X1
        PROGRAMX_XexecX_X1X_XexecsubexpressionX_X1
        PROGRAMX_XoperatorX_X1X_XoperatorexecX_X1 (
          PROGRAMX_XopendexpressionX_X1)
    end PROGRAMX_XexecX_X1X_XexecexpressionX_X1
    procedure PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
        case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token
          of
            label PROGRAMX_XtintX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
            label PROGRAMX_XtbooleanX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
            label PROGRAMX_XtstringX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 ("?")
            label PROGRAMX_XtidentifierX_X1 :
                PROGRAMX_XcurrentptrX_X1 += 1
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XtdotdotX_X1 then
                    PROGRAMX_XcurrentptrX_X1 -= 1
                    var PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X1 : int
                    PROGRAMX_XexecX_X1X_XexecconstantX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                      PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                    PROGRAMX_XcurrentptrX_X1 += 1
                    PROGRAMX_XexecX_X1X_XexecconstantX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                      PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                else
                    PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                      PROGRAMX_XcurrentlineX_X1.tokens (
                      PROGRAMX_XcurrentptrX_X1 - 1).value)
                    if PROGRAMX_XrunstackX_X1X_XrunkindX_X1 not =
                      PROGRAMX_XsytypeX_X1 then
                        PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                          "type name expected")
                        PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                        PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                    end if
                end if
            label PROGRAMX_XtintegerX_X1 :
                var PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X2 : int
                PROGRAMX_XexecX_X1X_XexecconstantX_X1
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecconstantX_X1
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1X_XvX_X2 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
            label :
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("simple type expected")
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
        end case
    end PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
    procedure PROGRAMX_XexecX_X1X_XexecarrayboundsX_X1
        var PROGRAMX_XexecX_X1X_XexecarrayboundsX_X1X_XvX_X1 : int
        PROGRAMX_XexecX_X1X_XexecconstantX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecconstantX_X1
    end PROGRAMX_XexecX_X1X_XexecarrayboundsX_X1
    procedure PROGRAMX_XexecX_X1X_XexecarraytypeX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecarrayboundsX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
    end PROGRAMX_XexecX_X1X_XexecarraytypeX_X1
    procedure PROGRAMX_XexecX_X1X_XexecvarX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        const PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).value
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
          PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1) not = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
              "identifier previously declared")
        else
            if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token = PROGRAMX_XtcolonequalX_X1 then
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecexpressionX_X1
                PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
                  PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1,
                  PROGRAMX_XsyvarX_X1)
                PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                  PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1)
                PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                PROGRAMX_XrunstackX_X1X_XrunassignX_X1
            else
                PROGRAMX_XcurrentptrX_X1 += 1
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XtarrayX_X1 then
                    PROGRAMX_XexecX_X1X_XexecarraytypeX_X1
                    PROGRAMX_XrunstackX_X1X_XrunallocatearrayX_X1 (
                      PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1,
                      PROGRAMX_XsyvarX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                else
                    PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
                    PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
                      PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1,
                      PROGRAMX_XsyvarX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpopX_X1
                end if
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XtcolonequalX_X1 then
                    PROGRAMX_XcurrentptrX_X1 += 1
                    PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                      PROGRAMX_XexecX_X1X_XexecvarX_X1X_XidentX_X1)
                    PROGRAMX_XexecX_X1X_XexecexpressionX_X1
                    PROGRAMX_XrunstackX_X1X_XrunassignX_X1
                end if
            end if
        end if
    end PROGRAMX_XexecX_X1X_XexecvarX_X1
    procedure PROGRAMX_XexecX_X1X_XexecconstX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        const PROGRAMX_XexecX_X1X_XexecconstX_X1X_XidentX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).value
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
          PROGRAMX_XexecX_X1X_XexecconstX_X1X_XidentX_X1) not = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
              "identifier previously declared")
        else
            PROGRAMX_XcurrentptrX_X1 += 1
            PROGRAMX_XexecX_X1X_XexecexpressionX_X1
            PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
              PROGRAMX_XexecX_X1X_XexecconstX_X1X_XidentX_X1,
              PROGRAMX_XsyconstX_X1)
            PROGRAMX_XrunstackX_X1X_XrunswapX_X1
            PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
              PROGRAMX_XexecX_X1X_XexecconstX_X1X_XidentX_X1)
            PROGRAMX_XrunstackX_X1X_XrunswapX_X1
            PROGRAMX_XrunstackX_X1X_XrunassignX_X1
        end if
    end PROGRAMX_XexecX_X1X_XexecconstX_X1
    procedure PROGRAMX_XexecX_X1X_XexectypeX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        const PROGRAMX_XexecX_X1X_XexectypeX_X1X_XidentX_X1 :=
          PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).value
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
          PROGRAMX_XexecX_X1X_XexectypeX_X1X_XidentX_X1) not = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
              "identifier previously declared")
        else
            PROGRAMX_XcurrentptrX_X1 += 1
            PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
            PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
              PROGRAMX_XexecX_X1X_XexectypeX_X1X_XidentX_X1,
              PROGRAMX_XsytypeX_X1)
            PROGRAMX_XrunstackX_X1X_XrunswapX_X1
            PROGRAMX_XrunstackX_X1X_XrunpopX_X1
        end if
    end PROGRAMX_XexecX_X1X_XexectypeX_X1
    procedure PROGRAMX_XexecX_X1X_XexeccallX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("procedures not yet implemented")
        PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (PROGRAMX_XcurrentlineX_X1.
          tokens (PROGRAMX_XcurrentptrX_X1).value)
        PROGRAMX_XrunstackX_X1X_XrunpopX_X1
    end PROGRAMX_XexecX_X1X_XexeccallX_X1
    procedure PROGRAMX_XexecX_X1X_XexecassignmentX_X1
        PROGRAMX_XexecX_X1X_XexecvariableX_X1
        const PROGRAMX_XexecX_X1X_XexecassignmentX_X1X_XkindX_X1 :=
          PROGRAMX_XrunstackX_X1X_XrunkindX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecexpressionX_X1
        if PROGRAMX_XexecX_X1X_XexecassignmentX_X1X_XkindX_X1 =
          PROGRAMX_XsyvarX_X1 then
            PROGRAMX_XrunstackX_X1X_XrunassignX_X1
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
              "assignment target is not a variable")
        end if
    end PROGRAMX_XexecX_X1X_XexecassignmentX_X1
    procedure PROGRAMX_XexecX_X1X_XexecassertX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XexecX_X1X_XexecexpressionX_X1
        var PROGRAMX_XexecX_X1X_XexecassertX_X1X_XvX_X1 : int
        PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
          PROGRAMX_XexecX_X1X_XexecassertX_X1X_XvX_X1 : var
          PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
        if PROGRAMX_XexecX_X1X_XexecassertX_X1X_XvX_X1 not = 1 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("assertion failed")
        end if
    end PROGRAMX_XexecX_X1X_XexecassertX_X1
    procedure PROGRAMX_XexecX_X1X_XexecloopX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XcurrentnumX_X1 = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("immediate loop")
        else
            PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscloopX_X1,
              PROGRAMX_XcurrentnumX_X1, 0, 0)
        end if
    end PROGRAMX_XexecX_X1X_XexecloopX_X1
    procedure PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (
      PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XbegintokenX_X1 : int,
      PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XendtokenX_X1 : int)
        const PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XoldnumX_X1 :=
          PROGRAMX_XcurrentnumX_X1
        loop
            exit when PROGRAMX_XcurrentnumX_X1 = PROGRAMX_XmaxlinesX_X1
            PROGRAMX_XcurrentnumX_X1 += 1
            exit when PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1)
              .token = PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XendtokenX_X1
            if PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1).token =
              PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XbegintokenX_X1 then
                PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (
                  PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XbegintokenX_X1,
                  PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XendtokenX_X1)
            end if
        end loop
        if PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1).token not =
          PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XendtokenX_X1 then
            PROGRAMX_XcurrentnumX_X1 :=
              PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XoldnumX_X1
            PROGRAMX_XcurrentptrX_X1 := 1
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("missing " +
              PROGRAMX_XtokentextX_X1 (
              PROGRAMX_XexecX_X1X_XexecskiptoendX_X1X_XendtokenX_X1))
        end if
    end PROGRAMX_XexecX_X1X_XexecskiptoendX_X1
    procedure PROGRAMX_XexecX_X1X_XexecexitX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XcurrentnumX_X1 = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("immediate loop")
        elsif PROGRAMX_XrunstackX_X1X_XscopekindX_X1 not = PROGRAMX_XscloopX_X1
          then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("exit without loop")
        else
            PROGRAMX_XexecX_X1X_XexecexpressionX_X1
            var PROGRAMX_XexecX_X1X_XexecexitX_X1X_XvX_X1 : int
            PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
              PROGRAMX_XexecX_X1X_XexecexitX_X1X_XvX_X1 : var
              PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
            if PROGRAMX_XexecX_X1X_XexecexitX_X1X_XvX_X1 = 1 then
                PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (PROGRAMX_XtloopX_X1,
                  PROGRAMX_XtendloopX_X1)
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
            end if
        end if
    end PROGRAMX_XexecX_X1X_XexecexitX_X1
    procedure PROGRAMX_XexecX_X1X_XexecendloopX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XscopekindX_X1 not = PROGRAMX_XscloopX_X1
          then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("end loop without loop")
        else
            PROGRAMX_XcurrentnumX_X1 := PROGRAMX_XrunstackX_X1X_XscopelineX_X1
        end if
    end PROGRAMX_XexecX_X1X_XexecendloopX_X1
    procedure PROGRAMX_XexecX_X1X_XexecforX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XcurrentnumX_X1 = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("immediate for")
        else
            const PROGRAMX_XexecX_X1X_XexecforX_X1X_XidentX_X1 :=
              PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).value
            PROGRAMX_XcurrentptrX_X1 += 1
            if PROGRAMX_XrunstackX_X1X_XrunlookupX_X1 (
              PROGRAMX_XexecX_X1X_XexecforX_X1X_XidentX_X1) not = 0 then
                PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                  "identifier previously declared")
            else
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecexpressionX_X1
                var PROGRAMX_XexecX_X1X_XexecforX_X1X_XlowerboundX_X1 : int
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecforX_X1X_XlowerboundX_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecexpressionX_X1
                var PROGRAMX_XexecX_X1X_XexecforX_X1X_XupperboundX_X1 : int
                PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecforX_X1X_XupperboundX_X1 : var
                  PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                if PROGRAMX_XexecX_X1X_XexecforX_X1X_XupperboundX_X1 >=
                  PROGRAMX_XexecX_X1X_XexecforX_X1X_XlowerboundX_X1 then
                    PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscforX_X1
                      , PROGRAMX_XcurrentnumX_X1,
                      PROGRAMX_XexecX_X1X_XexecforX_X1X_XidentX_X1,
                      PROGRAMX_XexecX_X1X_XexecforX_X1X_XupperboundX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                      PROGRAMX_XexecX_X1X_XexecforX_X1X_XlowerboundX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunallocateX_X1 (
                      PROGRAMX_XexecX_X1X_XexecforX_X1X_XidentX_X1,
                      PROGRAMX_XsyconstX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                      PROGRAMX_XexecX_X1X_XexecforX_X1X_XidentX_X1)
                    PROGRAMX_XrunstackX_X1X_XrunswapX_X1
                    PROGRAMX_XrunstackX_X1X_XrunassignX_X1
                else
                    PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (PROGRAMX_XtforX_X1,
                      PROGRAMX_XtendforX_X1)
                end if
            end if
        end if
    end PROGRAMX_XexecX_X1X_XexecforX_X1
    procedure PROGRAMX_XexecX_X1X_XexecendforX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XscopekindX_X1 = PROGRAMX_XscforX_X1 then
            const PROGRAMX_XexecX_X1X_XexecendforX_X1X_XupperboundX_X1 :=
              PROGRAMX_XrunstackX_X1X_XscopevalueX_X1
            const PROGRAMX_XexecX_X1X_XexecendforX_X1X_XidentX_X1 :=
              PROGRAMX_XrunstackX_X1X_XscopeidentX_X1
            PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
              PROGRAMX_XexecX_X1X_XexecendforX_X1X_XidentX_X1)
            PROGRAMX_XrunstackX_X1X_XrunevaluateX_X1
            var PROGRAMX_XexecX_X1X_XexecendforX_X1X_XvalueX_X1 : int
            PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
              PROGRAMX_XexecX_X1X_XexecendforX_X1X_XvalueX_X1 : var
              PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
            if PROGRAMX_XexecX_X1X_XexecendforX_X1X_XvalueX_X1 =
              PROGRAMX_XexecX_X1X_XexecendforX_X1X_XupperboundX_X1 then
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
            else
                PROGRAMX_XrunstackX_X1X_XrunpushdescX_X1 (
                  PROGRAMX_XexecX_X1X_XexecendforX_X1X_XidentX_X1)
                PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                  PROGRAMX_XexecX_X1X_XexecendforX_X1X_XvalueX_X1 + 1)
                PROGRAMX_XrunstackX_X1X_XrunassignX_X1
                PROGRAMX_XcurrentnumX_X1 :=
                  PROGRAMX_XrunstackX_X1X_XscopelineX_X1
            end if
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("end for with no for")
        end if
    end PROGRAMX_XexecX_X1X_XexecendforX_X1
    procedure PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1
        const PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XoldnumX_X1 :=
          PROGRAMX_XcurrentnumX_X1
        loop
            exit when PROGRAMX_XcurrentnumX_X1 = PROGRAMX_XmaxlinesX_X1
            PROGRAMX_XcurrentnumX_X1 += 1
            const PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X1 :=
              PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1).token
            exit when PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X1
              = PROGRAMX_XtelsifX_X1 or
              PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X1 =
              PROGRAMX_XtelseX_X1 or
              PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X1 =
              PROGRAMX_XtendifX_X1
            if PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X1 =
              PROGRAMX_XtifX_X1 then
                PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (PROGRAMX_XtifX_X1,
                  PROGRAMX_XtendifX_X1)
            end if
        end loop
        const PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X2 :=
          PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1).token
        if PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X2 not =
          PROGRAMX_XtelsifX_X1 and
          PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X2 not =
          PROGRAMX_XtelseX_X1 and
          PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XtokenX_X2 not =
          PROGRAMX_XtendifX_X1 then
            PROGRAMX_XcurrentnumX_X1 :=
              PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1X_XoldnumX_X1
            PROGRAMX_XcurrentptrX_X1 := 1
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("missing end if")
        else
            PROGRAMX_XcurrentnumX_X1 -= 1
        end if
    end PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1
    procedure PROGRAMX_XexecX_X1X_XexecifX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XcurrentnumX_X1 = 0 then
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("immediate if")
        else
            PROGRAMX_XexecX_X1X_XexecexpressionX_X1
            var PROGRAMX_XexecX_X1X_XexecifX_X1X_XifconditionX_X1 : int
            PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
              PROGRAMX_XexecX_X1X_XexecifX_X1X_XifconditionX_X1 : var
              PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
            PROGRAMX_XcurrentptrX_X1 += 1
            PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscifX_X1, 0, 0,
              PROGRAMX_XexecX_X1X_XexecifX_X1X_XifconditionX_X1)
            if PROGRAMX_XexecX_X1X_XexecifX_X1X_XifconditionX_X1 not = 1 then
                PROGRAMX_XexecX_X1X_XexecskiptoelseorendifX_X1
            end if
        end if
    end PROGRAMX_XexecX_X1X_XexecifX_X1
    procedure PROGRAMX_XexecX_X1X_XexecelsifX_X1
        if PROGRAMX_XrunstackX_X1X_XscopekindX_X1 = PROGRAMX_XscifX_X1 then
            if PROGRAMX_XrunstackX_X1X_XscopevalueX_X1 = 1 then
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
                PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (PROGRAMX_XtifX_X1,
                  PROGRAMX_XtendifX_X1)
            else
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
                PROGRAMX_XexecX_X1X_XexecifX_X1
            end if
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("elsif without if")
        end if
    end PROGRAMX_XexecX_X1X_XexecelsifX_X1
    procedure PROGRAMX_XexecX_X1X_XexecelseX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XscopekindX_X1 = PROGRAMX_XscifX_X1 then
            if PROGRAMX_XrunstackX_X1X_XscopevalueX_X1 = 1 then
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
                PROGRAMX_XexecX_X1X_XexecskiptoendX_X1 (PROGRAMX_XtifX_X1,
                  PROGRAMX_XtendifX_X1)
            else
                PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
                PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscelseX_X1, 0
                  , 0, 1)
            end if
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("else without if")
        end if
    end PROGRAMX_XexecX_X1X_XexecelseX_X1
    procedure PROGRAMX_XexecX_X1X_XexecendifX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XrunstackX_X1X_XscopekindX_X1 = PROGRAMX_XscifX_X1 or
          PROGRAMX_XrunstackX_X1X_XscopekindX_X1 = PROGRAMX_XscelseX_X1 then
            assert PROGRAMX_XrunstackX_X1X_XscopevalueX_X1 = 1
            PROGRAMX_XrunstackX_X1X_XpopscopeX_X1
        else
            PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("end if without if")
        end if
    end PROGRAMX_XexecX_X1X_XexecendifX_X1
    procedure PROGRAMX_XexecX_X1X_XexecputX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        loop
            PROGRAMX_XexecX_X1X_XexecexpressionX_X1
            case PROGRAMX_XrunstackX_X1X_XruntypeX_X1 of
                label PROGRAMX_XtyintX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X1 : int
                    PROGRAMX_XrunstackX_X1X_XrunpopintX_X1 (
                      PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X1 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopintX_X1X_XvalueX_X1)
                    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
                        put PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X1..
                    end if
                label PROGRAMX_XtystringX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X2 : string
                    PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1 (
                      PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X2 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopstringX_X1X_XvalueX_X1)
                    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
                        put PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X2..
                    end if
                label PROGRAMX_XtybooleanX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X3 : int
                    PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1 (
                      PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X3 : var
                      PROGRAMX_XrunstackX_X1X_XrunpopbooleanX_X1X_XvalueX_X1)
                    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
                        if PROGRAMX_XexecX_X1X_XexecputX_X1X_XvX_X3 = 1 then
                            put "true"..
                        else
                            put "false"..
                        end if
                    end if
                label :
                    PROGRAMX_XcurrentptrX_X1 += 1
                    PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("bad put expression")
            end case
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtcommaX_X1
            PROGRAMX_XcurrentptrX_X1 += 1
        end loop
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtdotdotX_X1 then
            PROGRAMX_XcurrentptrX_X1 += 1
        elsif not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
            put ""
        end if
    end PROGRAMX_XexecX_X1X_XexecputX_X1
    procedure PROGRAMX_XexecX_X1X_XexecgetX_X1
        PROGRAMX_XcurrentptrX_X1 += 1
        loop
            PROGRAMX_XexecX_X1X_XexecvariableX_X1
            exit when PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1
            case PROGRAMX_XrunstackX_X1X_XruntypeX_X1 of
                label PROGRAMX_XtyintX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1 : string
                    get PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1
                    var PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvalidX_X1 :=
                      LIBRARYX_XlengthX_X1 (
                      PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1) <= 9
                    for PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1 : 1..
                      LIBRARYX_XlengthX_X1 (
                      PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1)
                        PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvalidX_X1 :=
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvalidX_X1 and ((
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1 (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1) >= "0" and
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1 (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1) <= "9") or (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1 = 1 and (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1 (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1) = "-" or
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1 (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XiX_X1) = "+")))
                    end for
                    if PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvalidX_X1 then
                        PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (
                          LIBRARYX_XstrintX_X1 (
                          PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X1))
                    else
                        PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                          "invalid integer input")
                        PROGRAMX_XrunstackX_X1X_XrunpushintX_X1 (1)
                    end if
                label PROGRAMX_XtystringX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X2 : string
                    get PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X2
                    PROGRAMX_XrunstackX_X1X_XrunpushstringX_X1 (
                      PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X2)
                label PROGRAMX_XtybooleanX_X1 :
                    var PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X3 : string
                    get PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X3
                    if PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X3 = "true" then
                        PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                    elsif PROGRAMX_XexecX_X1X_XexecgetX_X1X_XvX_X3 = "false"
                      then
                        PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (0)
                    else
                        PROGRAMX_XexecX_X1X_XexecerrorX_X1 (
                          "invalid boolean input")
                        PROGRAMX_XrunstackX_X1X_XrunpushbooleanX_X1 (1)
                    end if
            end case
            PROGRAMX_XrunstackX_X1X_XrunassignX_X1
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtcommaX_X1
            PROGRAMX_XcurrentptrX_X1 += 1
        end loop
    end PROGRAMX_XexecX_X1X_XexecgetX_X1
    procedure PROGRAMX_XexecX_X1X_XexecprocedureX_X1
        PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("procedures not yet implemented")
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XcurrentptrX_X1 += 1
        if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).token =
          PROGRAMX_XtlparenX_X1 then
            PROGRAMX_XcurrentptrX_X1 += 1
            loop
                if PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XtvarX_X1 then
                    PROGRAMX_XcurrentptrX_X1 += 1
                end if
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XcurrentptrX_X1 += 1
                PROGRAMX_XexecX_X1X_XexecsimpletypeX_X1
                exit when PROGRAMX_XcurrentlineX_X1.tokens (
                  PROGRAMX_XcurrentptrX_X1).token = PROGRAMX_XtrparenX_X1 or
                  PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
                  token = PROGRAMX_XteolX_X1
            end loop
            PROGRAMX_XcurrentptrX_X1 += 1
        end if
    end PROGRAMX_XexecX_X1X_XexecprocedureX_X1
    procedure PROGRAMX_XexecX_X1X_XexecendX_X1
        PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("procedures not yet implemented")
        PROGRAMX_XcurrentptrX_X1 += 1
        PROGRAMX_XcurrentptrX_X1 += 1
    end PROGRAMX_XexecX_X1X_XexecendX_X1
    procedure PROGRAMX_XexecX_X1X_XexecinvariantX_X1
        PROGRAMX_XexecX_X1X_XexecassertX_X1
    end PROGRAMX_XexecX_X1X_XexecinvariantX_X1
    procedure PROGRAMX_XexecX_X1X_XexeclineX_X1
        PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 := false
        PROGRAMX_XcurrentptrX_X1 := 1
        loop
            case PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XcurrentptrX_X1).
              token of
                label PROGRAMX_XtvarX_X1 :
                    PROGRAMX_XexecX_X1X_XexecvarX_X1
                label PROGRAMX_XtconstX_X1 :
                    PROGRAMX_XexecX_X1X_XexecconstX_X1
                label PROGRAMX_XttypeX_X1 :
                    PROGRAMX_XexecX_X1X_XexectypeX_X1
                label PROGRAMX_XtidentifierX_X1 :
                    PROGRAMX_XexecX_X1X_XexecassignmentX_X1
                label PROGRAMX_XtcallX_X1 :
                    PROGRAMX_XexecX_X1X_XexeccallX_X1
                label PROGRAMX_XtassertX_X1 :
                    PROGRAMX_XexecX_X1X_XexecassertX_X1
                label PROGRAMX_XtifX_X1 :
                    PROGRAMX_XexecX_X1X_XexecifX_X1
                label PROGRAMX_XtelsifX_X1 :
                    PROGRAMX_XexecX_X1X_XexecelsifX_X1
                label PROGRAMX_XtelseX_X1 :
                    PROGRAMX_XexecX_X1X_XexecelseX_X1
                label PROGRAMX_XtendifX_X1 :
                    PROGRAMX_XexecX_X1X_XexecendifX_X1
                label PROGRAMX_XtloopX_X1 :
                    PROGRAMX_XexecX_X1X_XexecloopX_X1
                label PROGRAMX_XtexitwhenX_X1 :
                    PROGRAMX_XexecX_X1X_XexecexitX_X1
                label PROGRAMX_XtendloopX_X1 :
                    PROGRAMX_XexecX_X1X_XexecendloopX_X1
                label PROGRAMX_XtforX_X1 :
                    PROGRAMX_XexecX_X1X_XexecforX_X1
                label PROGRAMX_XtendforX_X1 :
                    PROGRAMX_XexecX_X1X_XexecendforX_X1
                label PROGRAMX_XtputX_X1 :
                    PROGRAMX_XexecX_X1X_XexecputX_X1
                label PROGRAMX_XtgetX_X1 :
                    PROGRAMX_XexecX_X1X_XexecgetX_X1
                label PROGRAMX_XtprocedureX_X1 :
                    PROGRAMX_XexecX_X1X_XexecprocedureX_X1
                label PROGRAMX_XtendX_X1 :
                    PROGRAMX_XexecX_X1X_XexecendX_X1
                label PROGRAMX_XtinvariantX_X1 :
                    PROGRAMX_XexecX_X1X_XexecinvariantX_X1
                label PROGRAMX_XtcommentX_X1 :
                    PROGRAMX_XcurrentptrX_X1 += 1
                label PROGRAMX_XteolX_X1, PROGRAMX_XtsemicolonX_X1 :
                label :
                    PROGRAMX_XexecX_X1X_XexecerrorX_X1 ("statement expected")
            end case
            exit when PROGRAMX_XcurrentlineX_X1.tokens (
              PROGRAMX_XcurrentptrX_X1).token not = PROGRAMX_XtsemicolonX_X1
            PROGRAMX_XcurrentptrX_X1 += 1
        end loop
    end PROGRAMX_XexecX_X1X_XexeclineX_X1
    import var PROGRAMX_XlinesX_X1

    import var PROGRAMX_XcurrentnumX_X1

    import var PROGRAMX_XcurrentlineX_X1

    import var PROGRAMX_XcurrentptrX_X1

    import PROGRAMX_XerrorX_X1

    import var PROGRAMX_XidentX_X1

    import var PROGRAMX_XrunstackX_X1

    import var PROGRAMX_XoperatorX_X1

    export PROGRAMX_XexecX_X1X_XexeclineX_X1

end PROGRAMX_XexecX_X1
var PROGRAMX_XcommandX_X1 : string
procedure PROGRAMX_XlistX_X1
    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (5..*)
    loop
        exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
          PROGRAMX_XcommandX_X1 (1) not = " "
        PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
    end loop
    var PROGRAMX_XlistX_X1X_XfirstX_X1 := 1
    var PROGRAMX_XlistX_X1X_XlastX_X1 := PROGRAMX_XmaxlinesX_X1
    if LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) > 0 and ((
      PROGRAMX_XcommandX_X1 (1) >= "0" and PROGRAMX_XcommandX_X1 (1) <= "9") or
      PROGRAMX_XcommandX_X1 (1) = "-") then
        if PROGRAMX_XcommandX_X1 (1) not = "-" then
            PROGRAMX_XlistX_X1X_XfirstX_X1 := 0
            loop
                exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
                  PROGRAMX_XcommandX_X1 (1) < "0" or PROGRAMX_XcommandX_X1 (1) >
                  "9"
                PROGRAMX_XlistX_X1X_XfirstX_X1 := PROGRAMX_XlistX_X1X_XfirstX_X1
                  * 10 + LIBRARYX_XordX_X1 (PROGRAMX_XcommandX_X1 (1)) -
                  LIBRARYX_XordX_X1 ("0")
                PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
            end loop
            PROGRAMX_XlistX_X1X_XlastX_X1 := PROGRAMX_XlistX_X1X_XfirstX_X1
        end if
        if LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) > 1 and
          PROGRAMX_XcommandX_X1 (1) = "-" then
            PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
            PROGRAMX_XlistX_X1X_XlastX_X1 := 0
            loop
                exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
                  PROGRAMX_XcommandX_X1 (1) < "0" or PROGRAMX_XcommandX_X1 (1) >
                  "9"
                PROGRAMX_XlistX_X1X_XlastX_X1 := PROGRAMX_XlistX_X1X_XlastX_X1 *
                  10 + LIBRARYX_XordX_X1 (PROGRAMX_XcommandX_X1 (1)) -
                  LIBRARYX_XordX_X1 ("0")
                PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
            end loop
        elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 1 and
          PROGRAMX_XcommandX_X1 (1) = "-" then
            PROGRAMX_XlistX_X1X_XlastX_X1 := PROGRAMX_XmaxlinesX_X1
        end if
    end if
    for PROGRAMX_XlistX_X1X_XiX_X1 : PROGRAMX_XlistX_X1X_XfirstX_X1..
      PROGRAMX_XlistX_X1X_XlastX_X1
        if PROGRAMX_XlinesX_X1 (PROGRAMX_XlistX_X1X_XiX_X1).tokens (1).token not
          = PROGRAMX_XteolX_X1 then
            PROGRAMX_XcurrentlineX_X1 := PROGRAMX_XlinesX_X1 (
              PROGRAMX_XlistX_X1X_XiX_X1)
            PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 : var
              PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
            put PROGRAMX_XlistX_X1X_XiX_X1 : 2, " ", LIBRARYX_XrepeatX_X1 (" ",
              PROGRAMX_XcurrentlineX_X1.indent), PROGRAMX_XcommandX_X1
        end if
    end for
    put "Ok"
end PROGRAMX_XlistX_X1
procedure PROGRAMX_XrenumX_X1
    var PROGRAMX_XrenumX_X1X_XnlinesX_X1 := 0
    for PROGRAMX_XrenumX_X1X_XiX_X1 : 1..PROGRAMX_XmaxlinesX_X1
        if PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X1).tokens (1).token
          not = PROGRAMX_XteolX_X1 then
            PROGRAMX_XrenumX_X1X_XnlinesX_X1 += 1
            PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XnlinesX_X1) :=
              PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X1)
        end if
    end for
    for PROGRAMX_XrenumX_X1X_XiX_X2 : PROGRAMX_XrenumX_X1X_XnlinesX_X1 + 1..
      PROGRAMX_XmaxlinesX_X1
        PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X2).tokens (1).token :=
          PROGRAMX_XteolX_X1
    end for
    var PROGRAMX_XrenumX_X1X_XindentX_X1 := 0
    for PROGRAMX_XrenumX_X1X_XiX_X3 : 1..PROGRAMX_XrenumX_X1X_XnlinesX_X1
        const PROGRAMX_XrenumX_X1X_XtokenX_X1 := PROGRAMX_XlinesX_X1 (
          PROGRAMX_XrenumX_X1X_XiX_X3).tokens (1).token
        case PROGRAMX_XrenumX_X1X_XtokenX_X1 of
            label PROGRAMX_XtifX_X1, PROGRAMX_XtloopX_X1, PROGRAMX_XtforX_X1,
              PROGRAMX_XtprocedureX_X1 :
                PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X3).
                  PROGRAMX_XrenumX_X1X_XindentX_X1 :=
                  PROGRAMX_XrenumX_X1X_XindentX_X1
                PROGRAMX_XrenumX_X1X_XindentX_X1 := LIBRARYX_XminX_X1 (
                  PROGRAMX_XrenumX_X1X_XindentX_X1 + 4, PROGRAMX_XmaxindentX_X1
                  )
            label PROGRAMX_XtelsifX_X1, PROGRAMX_XtelseX_X1 :
                PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X3).
                  PROGRAMX_XrenumX_X1X_XindentX_X1 := LIBRARYX_XmaxX_X1 (
                  PROGRAMX_XrenumX_X1X_XindentX_X1 - 4, 0)
            label PROGRAMX_XtendifX_X1, PROGRAMX_XtendloopX_X1,
              PROGRAMX_XtendforX_X1, PROGRAMX_XtendX_X1 :
                PROGRAMX_XrenumX_X1X_XindentX_X1 := LIBRARYX_XmaxX_X1 (
                  PROGRAMX_XrenumX_X1X_XindentX_X1 - 4, 0)
                PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X3).
                  PROGRAMX_XrenumX_X1X_XindentX_X1 :=
                  PROGRAMX_XrenumX_X1X_XindentX_X1
            label :
                PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X3).
                  PROGRAMX_XrenumX_X1X_XindentX_X1 :=
                  PROGRAMX_XrenumX_X1X_XindentX_X1
        end case
    end for
    const PROGRAMX_XrenumX_X1X_XincrementX_X1 := LIBRARYX_XminX_X1 (10,
      PROGRAMX_XmaxlinesX_X1 div (PROGRAMX_XrenumX_X1X_XnlinesX_X1 + 1))
    for decreasing PROGRAMX_XrenumX_X1X_XiX_X4 :
      PROGRAMX_XrenumX_X1X_XnlinesX_X1..1
        const PROGRAMX_XrenumX_X1X_XlX_X1 := PROGRAMX_XrenumX_X1X_XiX_X4 *
          PROGRAMX_XrenumX_X1X_XincrementX_X1
        PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XlX_X1) := PROGRAMX_XlinesX_X1
          (PROGRAMX_XrenumX_X1X_XiX_X4)
    end for
    for PROGRAMX_XrenumX_X1X_XiX_X5 : 1..PROGRAMX_XmaxlinesX_X1
        if PROGRAMX_XrenumX_X1X_XiX_X5 mod PROGRAMX_XrenumX_X1X_XincrementX_X1
          not = 0 then
            PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X5).tokens (1).token
              := PROGRAMX_XteolX_X1
            PROGRAMX_XlinesX_X1 (PROGRAMX_XrenumX_X1X_XiX_X5).
              PROGRAMX_XrenumX_X1X_XindentX_X1 := 0
        end if
    end for
    put "Ok"
end PROGRAMX_XrenumX_X1
var PROGRAMX_XtraceX_X1 := false
procedure PROGRAMX_XtronX_X1
    PROGRAMX_XtraceX_X1 := true
    put "Ok"
end PROGRAMX_XtronX_X1
procedure PROGRAMX_XtroffX_X1
    PROGRAMX_XtraceX_X1 := false
    put "Ok"
end PROGRAMX_XtroffX_X1
procedure PROGRAMX_XrunX_X1
    PROGRAMX_XrunstackX_X1X_XinitscopeX_X1
    PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscprocedureX_X1, 0, 0, 0)
    var PROGRAMX_XrunX_X1X_XlinenumX_X1 := 1
    loop
        if PROGRAMX_XlinesX_X1 (PROGRAMX_XrunX_X1X_XlinenumX_X1).tokens (1).
          token not = PROGRAMX_XteolX_X1 then
            PROGRAMX_XcurrentnumX_X1 := PROGRAMX_XrunX_X1X_XlinenumX_X1
            PROGRAMX_XcurrentlineX_X1 := PROGRAMX_XlinesX_X1 (
              PROGRAMX_XcurrentnumX_X1)
            if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
                if PROGRAMX_XtraceX_X1 then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 :
                      var PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
                    put LIBRARYX_XintstrX_X1 (PROGRAMX_XcurrentnumX_X1, 3) + " "
                      + PROGRAMX_XcommandX_X1
                end if
                PROGRAMX_XexecX_X1X_XexeclineX_X1
                PROGRAMX_XrunX_X1X_XlinenumX_X1 := PROGRAMX_XcurrentnumX_X1
            else
                PROGRAMX_XparseX_X1X_XparselineX_X1
            end if
        end if
        exit when PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 or
          PROGRAMX_XrunX_X1X_XlinenumX_X1 = PROGRAMX_XmaxlinesX_X1
        PROGRAMX_XrunX_X1X_XlinenumX_X1 += 1
    end loop
    if PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
        PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 : var
          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
        put LIBRARYX_XintstrX_X1 (PROGRAMX_XcurrentnumX_X1, 3) + " " +
          PROGRAMX_XcommandX_X1
        put PROGRAMX_XcurrenterrorX_X1
    else
        put "Ok"
    end if
end PROGRAMX_XrunX_X1
procedure PROGRAMX_XclearX_X1
    PROGRAMX_XcurrentlineX_X1.tokens (1).token := PROGRAMX_XteolX_X1
    PROGRAMX_XcurrentlineX_X1.tokens (1).PROGRAMX_XerrorX_X1 := false
    PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 := false
    PROGRAMX_XcurrentnumX_X1 := 1
    for PROGRAMX_XclearX_X1X_XiX_X1 : 1..PROGRAMX_XmaxlinesX_X1
        PROGRAMX_XlinesX_X1 (PROGRAMX_XclearX_X1X_XiX_X1).tokens (1).token :=
          PROGRAMX_XteolX_X1
        PROGRAMX_XlinesX_X1 (PROGRAMX_XclearX_X1X_XiX_X1).tokens (1).
          PROGRAMX_XerrorX_X1 := false
        PROGRAMX_XlinesX_X1 (PROGRAMX_XclearX_X1X_XiX_X1).PROGRAMX_XerrorX_X1 :=
          false
        PROGRAMX_XlinesX_X1 (PROGRAMX_XclearX_X1X_XiX_X1).indent := 0
    end for
    PROGRAMX_XidentX_X1X_XreinitializeX_X1
    PROGRAMX_XrunstackX_X1X_XinitscopeX_X1
    PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscprocedureX_X1, 0, 0, 0)
end PROGRAMX_XclearX_X1
procedure PROGRAMX_XfilenameX_X1
    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (5..*)
    loop
        exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
          PROGRAMX_XcommandX_X1 (1) not = " "
        PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
    end loop
    if LIBRARYX_XindexX_X1 (PROGRAMX_XcommandX_X1, " ") not = 0 or
      PROGRAMX_XcommandX_X1 = "" then
        PROGRAMX_XerrorX_X1 ("ERROR : illegal filename")
        put PROGRAMX_XcurrenterrorX_X1
        PROGRAMX_XcommandX_X1 := ""
    end if
end PROGRAMX_XfilenameX_X1
procedure PROGRAMX_XloadX_X1
    PROGRAMX_XclearX_X1
    PROGRAMX_XfilenameX_X1
    if PROGRAMX_XcommandX_X1 not = "" then
        var PROGRAMX_XloadX_X1X_XfX_X1 : int
        open (PROGRAMX_XloadX_X1X_XfX_X1, PROGRAMX_XcommandX_X1, "r")
        if PROGRAMX_XloadX_X1X_XfX_X1 = 0 then
            PROGRAMX_XerrorX_X1 ("ERROR : can't open file")
            put PROGRAMX_XcurrenterrorX_X1
        else
            for PROGRAMX_XloadX_X1X_XiX_X1 : 1..PROGRAMX_XmaxlinesX_X1
                exit when LIBRARYX_XeofX_X1 (PROGRAMX_XloadX_X1X_XfX_X1)
                get : PROGRAMX_XloadX_X1X_XfX_X1, PROGRAMX_XcommandX_X1 : *
                PROGRAMX_XscanX_X1X_XscanlineX_X1 (PROGRAMX_XcommandX_X1)
                PROGRAMX_XparseX_X1X_XparselineX_X1
                PROGRAMX_XlinesX_X1 (PROGRAMX_XloadX_X1X_XiX_X1) :=
                  PROGRAMX_XcurrentlineX_X1
            end for
            close (PROGRAMX_XloadX_X1X_XfX_X1)
            PROGRAMX_XrenumX_X1
        end if
    end if
end PROGRAMX_XloadX_X1
procedure PROGRAMX_XsaveX_X1
    PROGRAMX_XfilenameX_X1
    if PROGRAMX_XcommandX_X1 not = "" then
        var PROGRAMX_XsaveX_X1X_XfX_X1 : int
        open (PROGRAMX_XsaveX_X1X_XfX_X1, PROGRAMX_XcommandX_X1, "w")
        if PROGRAMX_XsaveX_X1X_XfX_X1 = 0 then
            PROGRAMX_XerrorX_X1 ("ERROR : can't write file")
            put PROGRAMX_XcurrenterrorX_X1
        else
            for PROGRAMX_XsaveX_X1X_XiX_X1 : 1..PROGRAMX_XmaxlinesX_X1
                PROGRAMX_XcurrentlineX_X1 := PROGRAMX_XlinesX_X1 (
                  PROGRAMX_XsaveX_X1X_XiX_X1)
                if PROGRAMX_XcurrentlineX_X1.tokens (1).token not =
                  PROGRAMX_XteolX_X1 then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 :
                      var PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
                    put : PROGRAMX_XsaveX_X1X_XfX_X1, LIBRARYX_XrepeatX_X1 (" "
                      , PROGRAMX_XcurrentlineX_X1.indent), PROGRAMX_XcommandX_X1
                end if
            end for
            close (PROGRAMX_XsaveX_X1X_XfX_X1)
            put "Ok"
        end if
    end if
end PROGRAMX_XsaveX_X1
procedure PROGRAMX_Xnew_X_X1
    PROGRAMX_XclearX_X1
    put "Ok"
end PROGRAMX_Xnew_X_X1
procedure PROGRAMX_XenterX_X1
    PROGRAMX_XcurrentnumX_X1 := 0
    loop
        exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
          PROGRAMX_XcommandX_X1 (1) < "0" or PROGRAMX_XcommandX_X1 (1) > "9"
        PROGRAMX_XcurrentnumX_X1 := PROGRAMX_XcurrentnumX_X1 * 10 +
          LIBRARYX_XordX_X1 (PROGRAMX_XcommandX_X1 (1)) - LIBRARYX_XordX_X1 (
          "0")
        PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
    end loop
    if PROGRAMX_XcurrentnumX_X1 > PROGRAMX_XmaxlinesX_X1 then
        PROGRAMX_XcurrentnumX_X1 := PROGRAMX_XmaxlinesX_X1
    elsif PROGRAMX_XcurrentnumX_X1 < 1 then
        PROGRAMX_XcurrentnumX_X1 := 1
    end if
    PROGRAMX_XscanX_X1X_XscanlineX_X1 (PROGRAMX_XcommandX_X1)
    PROGRAMX_XparseX_X1X_XparselineX_X1
    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
        if PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1).tokens (1).token not =
          PROGRAMX_XteolX_X1 then
            PROGRAMX_XcurrentlineX_X1.indent := PROGRAMX_XlinesX_X1 (
              PROGRAMX_XcurrentnumX_X1).indent
        end if
        PROGRAMX_XlinesX_X1 (PROGRAMX_XcurrentnumX_X1) :=
          PROGRAMX_XcurrentlineX_X1
    else
        PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 : var
          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
        PROGRAMX_XcommandX_X1 := LIBRARYX_XintstrX_X1 (PROGRAMX_XcurrentnumX_X1
          , 3) + " " + PROGRAMX_XcommandX_X1
        put PROGRAMX_XcurrenterrorX_X1
        put "/e[2A/e[K", PROGRAMX_XcommandX_X1, "/n"
    end if
end PROGRAMX_XenterX_X1
procedure PROGRAMX_XexecuteX_X1
    PROGRAMX_XcurrentnumX_X1 := 0
    PROGRAMX_XscanX_X1X_XscanlineX_X1 (PROGRAMX_XcommandX_X1)
    PROGRAMX_XparseX_X1X_XparselineX_X1
    if not PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
        PROGRAMX_XexecX_X1X_XexeclineX_X1
    end if
    if PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 then
        PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 : var
          PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
        put PROGRAMX_XcurrenterrorX_X1
        put "/e[2A/e[K", PROGRAMX_XcommandX_X1, "/n"
    end if
end PROGRAMX_XexecuteX_X1
procedure PROGRAMX_XvarsX_X1
    PROGRAMX_XrunstackX_X1X_XprintvarsX_X1
    put "Ok"
end PROGRAMX_XvarsX_X1
type TTYSET : set of 0..31
type TTYtype : record
filler : int
flags : int
end record
const * PROGRAMX_XECHOmodeX_X1 := TTYSET (3, 19)
const * PROGRAMX_XCBREAKmodeX_X1 := TTYSET (1, 17)
var PROGRAMX_XttyX_X1 : int
external procedure LIBRARYX_XgttyX_X1 (LIBRARYX_XgttyX_X1X_XlX_X1 : int, var
  LIBRARYX_XgttyX_X1X_XtX_X1 : int)

external procedure LIBRARYX_XsttyX_X1 (LIBRARYX_XsttyX_X1X_XlX_X1 : int, var
  LIBRARYX_XsttyX_X1X_XtX_X1 : int)

procedure PROGRAMX_XcrmodeX_X1
    LIBRARYX_XgttyX_X1 (1, PROGRAMX_XttyX_X1)
    PROGRAMX_XttyX_X1.flags += PROGRAMX_XCBREAKmodeX_X1
    LIBRARYX_XsttyX_X1 (1, PROGRAMX_XttyX_X1)
end PROGRAMX_XcrmodeX_X1
procedure PROGRAMX_XnocrmodeX_X1
    LIBRARYX_XgttyX_X1 (1, PROGRAMX_XttyX_X1)
    PROGRAMX_XttyX_X1.flags -= PROGRAMX_XCBREAKmodeX_X1
    LIBRARYX_XsttyX_X1 (1, PROGRAMX_XttyX_X1)
end PROGRAMX_XnocrmodeX_X1
procedure PROGRAMX_XnoechoX_X1
    LIBRARYX_XgttyX_X1 (1, PROGRAMX_XttyX_X1)
    PROGRAMX_XttyX_X1.flags -= PROGRAMX_XECHOmodeX_X1
    LIBRARYX_XsttyX_X1 (1, PROGRAMX_XttyX_X1)
end PROGRAMX_XnoechoX_X1
procedure PROGRAMX_XechoX_X1
    LIBRARYX_XgttyX_X1 (1, PROGRAMX_XttyX_X1)
    PROGRAMX_XttyX_X1.flags += PROGRAMX_XECHOmodeX_X1
    LIBRARYX_XsttyX_X1 (1, PROGRAMX_XttyX_X1)
end PROGRAMX_XechoX_X1
external procedure LIBRARYX_XioctlX_X1 (LIBRARYX_XioctlX_X1X_XfX_X1 : int,
  LIBRARYX_XioctlX_X1X_XiX_X1 : int, var LIBRARYX_XioctlX_X1X_XnX_X1 : int)

const * PROGRAMX_XFIONREADX_X1 := 16 # 40000000 + 4 shl 16 + LIBRARYX_XordX_X1 (
  'f') shl 8 + 127
const * PROGRAMX_XttyinputX_X1 := 0
function PROGRAMX_XhaschX_X1 : boolean
    var PROGRAMX_XhaschX_X1X_XncharsX_X1 := 0
    LIBRARYX_XioctlX_X1 (PROGRAMX_XttyinputX_X1, PROGRAMX_XFIONREADX_X1,
      PROGRAMX_XhaschX_X1X_XncharsX_X1)
    result PROGRAMX_XhaschX_X1X_XncharsX_X1 > 0
end PROGRAMX_XhaschX_X1
procedure PROGRAMX_XeditX_X1
    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (5..*)
    loop
        exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
          PROGRAMX_XcommandX_X1 (1) not = " "
        PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
    end loop
    var PROGRAMX_XeditX_X1X_XlinenumX_X1 := 0
    if LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) > 0 and (
      PROGRAMX_XcommandX_X1 (1) >= "0" and PROGRAMX_XcommandX_X1 (1) <= "9")
      then
        loop
            exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
              PROGRAMX_XcommandX_X1 (1) < "0" or PROGRAMX_XcommandX_X1 (1) > "9"
            PROGRAMX_XeditX_X1X_XlinenumX_X1 := PROGRAMX_XeditX_X1X_XlinenumX_X1
              * 10 + LIBRARYX_XordX_X1 (PROGRAMX_XcommandX_X1 (1)) -
              LIBRARYX_XordX_X1 ("0")
            PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
        end loop
    end if
    if PROGRAMX_XeditX_X1X_XlinenumX_X1 < 1 or PROGRAMX_XeditX_X1X_XlinenumX_X1
      > PROGRAMX_XmaxlinesX_X1 then
        PROGRAMX_XeditX_X1X_XlinenumX_X1 := PROGRAMX_XcurrentnumX_X1
    end if
    if PROGRAMX_XeditX_X1X_XlinenumX_X1 not = PROGRAMX_XcurrentnumX_X1 then
        PROGRAMX_XcurrentnumX_X1 := PROGRAMX_XeditX_X1X_XlinenumX_X1
        PROGRAMX_XcurrentlineX_X1 := PROGRAMX_XlinesX_X1 (
          PROGRAMX_XeditX_X1X_XlinenumX_X1)
    end if
    PROGRAMX_XcurrentlineX_X1.PROGRAMX_XerrorX_X1 := false
    for PROGRAMX_XeditX_X1X_XiX_X1 : 1..PROGRAMX_XmaxlinetokensX_X1
        PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XeditX_X1X_XiX_X1).
          PROGRAMX_XerrorX_X1 := false
        exit when PROGRAMX_XcurrentlineX_X1.tokens (PROGRAMX_XeditX_X1X_XiX_X1)
          .token = PROGRAMX_XteolX_X1
    end for
    PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 : var
      PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
    if PROGRAMX_XeditX_X1X_XlinenumX_X1 not = 0 then
        PROGRAMX_XcommandX_X1 := LIBRARYX_XintstrX_X1 (
          PROGRAMX_XeditX_X1X_XlinenumX_X1, 3) + " " + PROGRAMX_XcommandX_X1
    end if
    PROGRAMX_XcrmodeX_X1
    PROGRAMX_XnoechoX_X1
    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (1..LIBRARYX_XminX_X1 (
      LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1), 80))
    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 + LIBRARYX_XrepeatX_X1 (" ",
      80 - LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1))
    put PROGRAMX_XcommandX_X1, "/r"..
    var PROGRAMX_XeditX_X1X_XpositionX_X1 : int := 1
    loop
        var PROGRAMX_XeditX_X1X_XnextcharX_X1 : string (1)
        get PROGRAMX_XeditX_X1X_XnextcharX_X1 : 1
        exit when PROGRAMX_XeditX_X1X_XnextcharX_X1 = "/n"
        if PROGRAMX_XeditX_X1X_XnextcharX_X1 = "/e" then
            get PROGRAMX_XeditX_X1X_XnextcharX_X1 : 1
            if PROGRAMX_XeditX_X1X_XnextcharX_X1 = "[" then
                get PROGRAMX_XeditX_X1X_XnextcharX_X1 : 1
                if PROGRAMX_XeditX_X1X_XnextcharX_X1 = "A" then
                    put "/e[4h /e[4l/e[D"..
                    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (1..
                      PROGRAMX_XeditX_X1X_XpositionX_X1 - 1) + " " +
                      PROGRAMX_XcommandX_X1 (PROGRAMX_XeditX_X1X_XpositionX_X1
                      ..LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) - 1)
                elsif PROGRAMX_XeditX_X1X_XnextcharX_X1 = "B" then
                    put "/e[P"..
                    PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (1..
                      PROGRAMX_XeditX_X1X_XpositionX_X1 - 1) +
                      PROGRAMX_XcommandX_X1 (PROGRAMX_XeditX_X1X_XpositionX_X1 +
                      1..*) + " "
                elsif PROGRAMX_XeditX_X1X_XnextcharX_X1 = "C" and
                  PROGRAMX_XeditX_X1X_XpositionX_X1 < 80 then
                    put "/e[C"..
                    PROGRAMX_XeditX_X1X_XpositionX_X1 += 1
                elsif PROGRAMX_XeditX_X1X_XnextcharX_X1 = "D" and
                  PROGRAMX_XeditX_X1X_XpositionX_X1 > 1 then
                    put "/e[D"..
                    PROGRAMX_XeditX_X1X_XpositionX_X1 -= 1
                end if
                PROGRAMX_XeditX_X1X_XnextcharX_X1 := "/e"
            elsif PROGRAMX_XeditX_X1X_XnextcharX_X1 = "O" then
                get PROGRAMX_XeditX_X1X_XnextcharX_X1 : 1
                if PROGRAMX_XeditX_X1X_XnextcharX_X1 = "P" then
                    PROGRAMX_XscanX_X1X_XexpandlineX_X1 (PROGRAMX_XcommandX_X1 :
                      var PROGRAMX_XscanX_X1X_XexpandlineX_X1X_XtextX_X1)
                    PROGRAMX_XcommandX_X1 := LIBRARYX_XintstrX_X1 (
                      PROGRAMX_XeditX_X1X_XlinenumX_X1, 3) + " " +
                      PROGRAMX_XcommandX_X1
                    put "/r/e[K", PROGRAMX_XcommandX_X1, "/r"..
                    PROGRAMX_XeditX_X1X_XpositionX_X1 := 1
                end if
                PROGRAMX_XeditX_X1X_XnextcharX_X1 := "/e"
            end if
        end if
        if PROGRAMX_XeditX_X1X_XnextcharX_X1 >= " " then
            put PROGRAMX_XeditX_X1X_XnextcharX_X1..
            PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (1..
              PROGRAMX_XeditX_X1X_XpositionX_X1 - 1) +
              PROGRAMX_XeditX_X1X_XnextcharX_X1 + PROGRAMX_XcommandX_X1 (
              PROGRAMX_XeditX_X1X_XpositionX_X1 + 1..*)
            PROGRAMX_XeditX_X1X_XpositionX_X1 += 1
        end if
    end loop
    PROGRAMX_XechoX_X1
    PROGRAMX_XnocrmodeX_X1
    put ""
    loop
        exit when LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) = 0 or
          PROGRAMX_XcommandX_X1 (1) not = " "
        PROGRAMX_XcommandX_X1 := PROGRAMX_XcommandX_X1 (2..*)
    end loop
    if LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) > 0 and
      PROGRAMX_XcommandX_X1 (1) >= "1" and PROGRAMX_XcommandX_X1 (1) <= "9" then
        PROGRAMX_XenterX_X1
    else
        PROGRAMX_XexecuteX_X1
    end if
end PROGRAMX_XeditX_X1
PROGRAMX_XrunstackX_X1X_XinitscopeX_X1
PROGRAMX_XrunstackX_X1X_XpushscopeX_X1 (PROGRAMX_XscprocedureX_X1, 0, 0, 0)
put "/e[A/rOk      "
loop
    get : 1, skip, PROGRAMX_XcommandX_X1 : *
    if LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) >= 4 and
      PROGRAMX_XcommandX_X1 (1..4) = "quit" then
        put "Bye"
        exit
    elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) >= 4 and
      PROGRAMX_XcommandX_X1 (1..4) = "list" then
        PROGRAMX_XlistX_X1
    elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) >= 4 and
      PROGRAMX_XcommandX_X1 (1..4) = "edit" then
        PROGRAMX_XeditX_X1
    elsif PROGRAMX_XcommandX_X1 = "renum" then
        PROGRAMX_XrenumX_X1
    elsif PROGRAMX_XcommandX_X1 = "run" then
        PROGRAMX_XrunX_X1
    elsif PROGRAMX_XcommandX_X1 = "tron" then
        PROGRAMX_XtronX_X1
    elsif PROGRAMX_XcommandX_X1 = "troff" then
        PROGRAMX_XtroffX_X1
    elsif PROGRAMX_XcommandX_X1 = "vars" then
        PROGRAMX_XvarsX_X1
    elsif PROGRAMX_XcommandX_X1 = "new" then
        PROGRAMX_Xnew_X_X1
    elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) >= 4 and
      PROGRAMX_XcommandX_X1 (1..4) = "load" then
        PROGRAMX_XloadX_X1
    elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) >= 4 and
      PROGRAMX_XcommandX_X1 (1..4) = "save" then
        PROGRAMX_XsaveX_X1
    elsif LIBRARYX_XlengthX_X1 (PROGRAMX_XcommandX_X1) > 0 and
      PROGRAMX_XcommandX_X1 (1) >= "1" and PROGRAMX_XcommandX_X1 (1) <= "9" then
        PROGRAMX_XenterX_X1
    else
        PROGRAMX_XexecuteX_X1
    end if
end loop
PROGRAMX_XrunstackX_X1X_XpopscopeX_X1

