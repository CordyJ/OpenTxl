
comments
	--
	(*  *)
end comments

compounds
	<= >= <> :<>: :=:
end compounds

keys
ABS ABSTRACT ACOS AGGREGATE ALIAS AND ANDOR ARRAY AS ASIN ATAN BAG
BEGIN BINARY BLENGTH BOOLEAN BY CALL CASE CONSTANT CONST_E CONTEXT
COS CRITERIA DERIVE DIV ELSE END END_ALIAS END_CALL END_CASE END_CONSTANT
END_CONTEXT END_CRITERIA END_ENTITY END_FUNCTION END_IF END_LOCAL
END_MODEL END_NOTES END_OBJECTIVE END_PARAMETER END_PROCEDURE
END_PURPOSE END_REALIZATION END_REFERENCES END_REPEAT END_RULE END_SCHEMA
END_SCHEMA_DATA END_TEST_CASE END_TYPE ENTITY ENUMERATION ESCAPE EXISTS
EXP FALSE FIXED FOR FORMAT FROM FUNCTION GENERIC HIBOUND HIINDEX IF IMPORT
INSERT INTEGER INVERSE LENGTH LIKE LIST LOBOUND LOCAL LOG LOGICAL LOINDEX
MOD MODEL NOT NOTES NUMBER NVL OBJECTIVE ODD OF ONEOF OPTIONAL OR OTHERWISE
PARAMETER PI PROCEDURE PURPOSE QUERY REAL REALIZATION REFERENCE REFERENCES
REMOVE REPEAT RETURN ROLESOF RULE SCHEMA SCHEMA_DATA SELECT SELF SET SIN 
SIZEOF SKIP SQRT STRING SUBOF SUBTYPE SUPERTYPE SUPOF TAN TEST_CASE THEN
TO TRUE TYPE TYPEOF UNIQUE UNKNOWN UNTIL USE USEDIN USING VALUE VAR WHERE
WHILE WITH XOR IN

end keys

compounds
 <-- --> <= >= <> :<>: :=:
end compounds

define  program 
	[repeat schema_decl+]
end define

define bit 
	'0 | '1
end define

define digit 
	 '0 | '1 | '2 | '3 | '4 | '5 | '6 | '7 | '8 | '9 
end define

define digits
	[repeat digit+]
end define

define encoded_character 
	[octet] [octet] [octet] [octet]
end define

define hex_digit 
	[digit] | 'a | 'b | 'c | 'd | 'e | 'f 
end define

define letter
	'a | 'b | 'c | 'd | 'e | 'f | 'g | 'h | 'i | 'j | 'k |
	'l | 'm | 'n | 'o | 'p | 'q | 'r | 's | 't | 'u | 'v |
	'w | 'x | 'y | 'z
end define

define lparen_not_star 
	'( [not_star]
end define

define not_lparen_star 
	[not_paren_star] | ')
end define

define not_paren_star 
	[letter] | [digit] | [not_paren_star_special]
end define

define not_paren_star_quote_special
	 '! | '# | '$ | '% | '& | '+ |
         ', | '- | '. | '/ | ': | '; | '< | '= | '> | '? |
         '@ | '[ | '\ | '] | '^ | '_ | '` | '{ | '| | '} |
         '~
end define

define not_paren_star_special 
	[not_paren_star_quote_special] | '''' 
end define


define not_quote
	[not_paren_star_quote_special] | [letter] | [digit] | '( | ') | '* 
end define

define not_rparen 
	[not_paren_star] | '* | '( 
end define

define not_star 
	[not_paren_star] | '( | ')
end define

define octet 
	[hex_digit] [hex_digit]
end define

% add double quote eventually to this production
define special
	[not_paren_star_quote_special] | '( | ') | '*
end define

define star_not_rparen 
	'* [not_rparen]
end define

define    BinaryValue 
	[binary_literal]
end define

define    BooleanValue 
	FALSE | TRUE 
end define


define    Description 
%	{ \a | \s | \n } 
	[repeat stringlit+]
end define


%NOT DONE
%define    EncodeStringValue 
% '" { encoded_character | \n } '"' 
%end define

define    EnumerationValue 
	'! [simple_id]
end define

define    IntegerValue 
	[opt sign] [integer_literal]
end define

define    Nil 
	'?
end define

define    SignedMathConstant 
	[opt sign] [MathConstant]
end define

define    SignedRealLiteral 
	[opt  sign] [real_literal]
end define

%NOT DONE
%define    SimpleStringValue 
%  \q { ( \q \q ) | not_quote | \s | \o | \n } \q 
%end define

define binary_literal 
	'% [repeat bit+]
end define


define encoded_string_literal 
%	'" [repeat encoded_character+] '"
	[stringlit]
end define

define integer_literal
	[digits]
end define

define real_literal 
	[digits] '. [opt digits] [opt exponent]
end define

define exponent
	'e [opt sign] [digits]
end define

define simple_id 
	[id]
end define

define simple_string_literal 
% \q { ( \q \q ) | not_quote | \s | \o } \q 
	[charlit]
end define

%NOT DONE
%define embedded_remark 
% (* { not_lparen_star | lparen_not_star | 
%                      star_not_rparen | embedded_remark } *) 
%end define

%NOT DONE
%define remark 
% embedded_remark | tail_remark 
%end define

%NOT DONE
%define tail_remark 
% '--' { \a | \s | \o } \n 
%end define

define    ConstantRef 
	[ConstantId]
end define

define ContextRef 
	[ContextId]
end define

define    EntityInstanceRef 
	'@ [EntityInstanceId]
end define

define    EnumerationInstanceRef 
 '@ [EnumerationInstanceId]
end define

define    ModelRef 
	[ModelId]
end define

define    ParameterRef 
	[ParameterId]
end define

define    SelectInstanceRef 
	'@ [SelectInstanceId]
end define

define    SimpleInstanceRef 
	'@ [SimpleInstanceId]
end define

define    TypeInstanceRef 
	'@ [TypeInstanceId]
end define

define TypeInstanceId
	[simple_id]
end define


define alias_ref 
	[alias_id]
end define

define attribute_ref 
	[attribute_id]
end define

define constant_ref 
	[constant_id]
end define

define entity_ref 
	[entity_id]
end define

define enumeration_ref 
	[enumeration_id]
end define

define function_ref 
	[function_id]
end define

define parameter_ref 
	[parameter_id]
end define

define procedure_ref 
	[procedure_id]
end define

define schema_ref 
	[schema_id]
end define

define type_ref 
	[type_id]
end define

define variable_ref 
	[variable_id]
end define

define    ActualParameter 
	[ParameterRef] ':= [ParmValue] '; 
end define

define    AggregationValue 
	[FixedAggr] | [DynamicAggr]
end define

define    Assignment 
	[variable_id] ':= [SelectableInstanceRef] '; 
end define

define    BaseValue 
	[EnumerationValue] | [SimpleValue]
end define

define    BequeathsTo 
	SUPOF '( [EntityRefList] ') 
end define

define    Constant 
	[LogicalConstant] | [MathConstant] | [Nil]
end define

define    ConstantBlock 
	CONSTANT [repeat ConstantSpec] END_CONSTANT '; 
end define

define    ConstantId
	[constant_ref]
end define

define    ConstantSpec 
	[ConstantId] '== [ConstantValue] ';
end define

define    ConstantValue 
	[AggregationValue] | [BaseValue] | [EntityInstanceValue] |
	[NamedInstanceValue] | [SelectValue] | [TypeValue] 
end define

define    ContextBlock 
	CONTEXT [ContextId] '; [ContextBody] END_CONTEXT ';
end define

define    ContextBody 
	[repeat SchemaReferenceSpec] [opt FormalParameterBlock]
        [repeat ContextBodyElem]
end define

define ContextBodyElem
	[SchemaInstanceBlock] | [SupportAlgorithm]
end define

define    ContextId
	[simple_id]
end define

define    DerattValue 
	[AggregationValue] | [BaseValue] | [EntityInstanceRef] |
        [EntityInstanceValue] | [EnumerationInstanceValue] |
        [TypeInstanceRef] | [TypeInstanceValue] | [TypeValue]
end define

define DerivedAttr 
	[RoleName] [opt DeriveAttrOpt] ';
end define

define DeriveAttrOpt
	'<-- [DerattValue] 
end define

define DynamicAggr 
	'( [opt DynamicList] ') 
end define

define DynamicEntityRefList
	'( [opt EntityRefList] ') 
end define

define    DynamicList 
	[list DynamicMember+]
end define

define    DynamicMember
	[AggregationValue] | [ConstantValue] | [DerattValue] |
        [ParmValue] | [ReqattValue] | [TypeValue]
end define

define    EntityDomain 
	[opt EntityDomainOpt] [EntityId]
end define

define EntityDomainOpt
	[SchemaId] '.
end define

define    EntityId 
	[entity_ref]
end define

define    EntityInstance 
	[EntityInstanceId] '= [EntityInstanceValue] '; 
end define

define    EntityInstanceId 
	[simple_id]
end define

define    EntityInstanceValue 
	[EntityDomain] '{
        [opt InheritsFrom]
        [repeat ExplicitAttr]
        [repeat DerivedAttr ]
        [repeat InverseAttr ]
        [opt BequeathsTo] '} 
end define

define    EntityRefList 
	[list EntityInstanceRef+]
end define

define    EnumerationDomain
	[opt EnumDomainOpt] [EnumerationId]
end define

define EnumDomainOpt
	[SchemaId] '.
end define

define    EnumerationId 
	[type_ref]
end define

define    EnumerationInstance 
	[EnumerationInstanceId] '= [EnumerationInstanceValue] ';
end define

define    EnumerationInstanceId 
	[simple_id]
end define

define    EnumerationInstanceValue 
	[EnumerationDomain] '{ [EnumerationValue] '} 
end define

define    ExplicitAttr 
	[RequiredAttr] | [OptionalAttr] 
end define

define    ExpressI 
	[repeat TestCaseBlock] [repeat ContextBlock]
        [repeat ModelBlock] [repeat SchemaInstanceBlock]
        [repeat ObjectInstance]
end define

define    FixedAggr 
	'[ [FixedList] '] 
end define

define    FixedList 
	[list FixedMember+]
end define

define    FixedMember 
	[DynamicMember] | [Nil]
end define

define    FormalParameter 
	[ParameterId] ': [parameter_type] [opt FormalParameterOpt] ';
end define

define FormalParameterOpt
	':= [ParmValueDefault]
end define

define    FormalParameterBlock 
	PARAMETER [repeat FormalParameter] END_PARAMETER ';
end define

define    ImportSpec 
	IMPORT '( [repeat Assignment] ') '; 
end define

define    InheritsFrom 
	SUBOF '( [opt EntityRefList] ') '; 
end define

define    IntegerDomain 
	INTEGER
end define

define    InvattValue 
	[DynamicEntityRefList]
end define

define    InverseAttr
	[RoleName] [opt InverseAttrOpt] ';
end define

define InverseAttrOpt
	'<-- [InvattValue]
end define

define    LogicalValue 
	FALSE | TRUE | UNKNOWN
end define

%This production was not listed in express-l.tex
define LogicalConstant
	[LogicalValue]
end define

define    MathConstant 
	CONST_E | PI 
end define

define    ModelBlock 
	MODEL [StoreId] '; [ModelBody] END_MODEL '; 
end define

define StoreId
	[simple_id]
end define

define    ModelBody 
	[repeat SchemaInstanceBlock]
end define

define    ModelId
	[simple_id]
end define

define    NamedDomain 
	[EntityDomain] | [EnumerationDomain] | [SelectDomain] |
        [TypeDomain]
end define

define    NamedInstanceValue 
	[EnumerationInstanceValue] | [SelectInstanceValue] |
        [TypeInstanceValue]
end define

define    NumberValue 
	[IntegerValue] | [RealValue]
end define

define    ObjectInstance 
	[EntityInstance] | [EnumerationInstance] |
        [SelectInstance] | [TypeInstance]
end define

define    ObjectInstanceRef 
	[EntityInstanceRef] | [EnumerationInstanceRef] |
        [SelectInstanceRef] | [TypeInstanceRef] |
        [SimpleInstanceRef]
end define

define    ObjectiveBlock 
	OBJECTIVE [repeat TestPurpose] [repeat TestReference]
                  [repeat TestCriteria] [repeat TestNotes]
        END_OBJECTIVE ';
end define

define    OptattValue 
	[ReqattValue] | [Nil]
end define

define    OptionalAttr 
	[RoleName] '--> [OptattValue] '; 
end define

define    ParameterId 
	[simple_id]
end define

define    ParameterSpec 
	WITH '( [repeat ActualParameter] ') '; 
end define

define    ParmValue 
	[ObjectInstanceRef] | [expression]
end define

define    ParmValueDefault 
	[AggregationValue] | [BaseValue] | [ConstantRef] |
        [EntityInstanceValue] | [NamedInstanceValue] | 
        [ObjectInstanceRef] | [SelectValue] | [TypeValue] |
        [expression]
end define

define    RealValue 
	[SignedMathConstant] | [SignedRealLiteral]
end define

define    ReqattValue 
	[AggregationValue] | [BaseValue] | [ConstantRef] |
        [NamedInstanceValue] | [ObjectInstanceRef] | [ParameterRef] |
        [SelectValue] | [TypeValue]
end define

define    RequiredAttr 
	[RoleName] '--> [ReqAttrGrp] ';
end define

define ReqAttrGrp
	 [ReqattValue] | [Nil]
end define

define    RoleName
	[attribute_ref]
end define

define    SchemaId 
	[schema_ref]
end define

define    SchemaInstanceBlock 
	SCHEMA_DATA [SchemaId] '; [opt SchemaInstanceBody]
        END_SCHEMA_DATA ';
end define

define    SchemaInstanceBody 
	[opt ConstantBlock] [repeat ObjectInstance]
end define

define    SchemaReferenceSpec 
	WITH [schema_ref] [opt SchemaReferenceSpecOpt] ';
end define

define SchemaReferenceSpecOpt
	USING '( [list resource_ref+] ')
end define

define    SelectableInstanceRef 
	[EntityInstanceRef] | [EnumerationInstanceRef] |
        [SelectInstanceRef] | [TypeInstanceRef]
end define

define    SelectDomain 
	[opt SelectDomainOpt] [SelectId]
end define

define SelectDomainOpt
	[SchemaId] '.
end define

define    SelectId 
	[type_ref]
end define

define    SelectInstance 
	[SelectInstanceId] '= [SelectInstanceValue] ';
end define

define    SelectInstanceId
	[simple_id]
end define

define    SelectInstanceValue 
	[SelectDomain] '{ [SelectValue] '} 
end define

define    SelectValue 
	[EnumerationValue] | [NamedInstanceValue] |
        [ObjectInstanceRef] | [TypeValue]
end define

define    SimpleInstance 
	[SimpleInstanceId]  '= [SimpleValue] '; 
end define

define SimpleInstanceId 
	[simple_id]
end define

define    SimpleValue 
	[BinaryValue] | [BooleanValue] | [IntegerValue] |
        [LogicalValue] | [NumberValue] | [RealValue] |
        [StringValue]
end define

define    StringValue 
	[charlit] | [stringlit]
%	[SimpleStringValue] | [EncodedStringValue]
end define

define       SupportAlgorithm 
	[function_decl] | [procedure_decl]
end define

define    TestCaseBlock 
	TEST_CASE [TestCaseId] '; [TestCaseBody] END_TEST_CASE ';
end define

define    TestCaseBody 
	[SchemaReferences] [ObjectiveBlock] [TestRealization]
        [repeat SupportAlgorithm]
end define

define SchemaReferences
	[empty]
end define

define    TestCaseId 
	[simple_id]
end define

define    TestCaseDefinition 
	[repeat TestCaseDefElem]
end define

define TestCaseDefElem
	[TestCaseRealization] | [function_decl] | [procedure_decl]
end define

define TestCaseRealization
	[empty]
end define

define    TestRealization 
	REALIZATION [repeat local_decl] [repeat UseContextBlock]
                    [repeat assignment_stmt]
        END_REALIZATION ; 
end define

define    TestCriteria 
	CRITERIA [Description] END_CRITERIA '; 
end define

define    TestNotes 
	NOTES [Description] END_NOTES ';
end define

define    TestPurpose 
	PURPOSE [Description] END_PURPOSE ';
end define

define    TestReference 
	REFERENCES [Description] END_REFERENCES ';
end define

define    TypeDomain 
	[opt TypeDomainOpt] [TypeId]
end define

define TypeDomainOpt
	[SchemaId] '.
end define

define    TypeId 
	[type_ref]
end define

define    TypeInstance 
	[TypeInstanceId] '=  [TypeInstanceValue] ';
end define

define    TypeInstanceValue 
	[TypeDomain] '{ [TypeValue] '} 
end define

define    TypeValue 
	[AggregationValue] | [BaseValue] | [ConstantRef] |
        [EntityInstanceValue] | [NamedInstanceValue] |
        [ObjectInstanceRef] | [ParameterRef]
end define

define    UseContextBlock 
	CALL [ContextRef] '; [UseContextBody] END_CALL ';
end define

define    UseContextBody 
	[opt ImportSpec] [opt ParameterSpec]
end define

define  add_like_op 
	'+ | '- | OR | XOR 
end define

define  actual_parameter_list 
	'( [list parameter+] ')
end define

define  aggregate_initializer 
	'[ [opt aggregate_init_opt] '] 
end define

define aggregate_init_opt
	[list element+]
end define

define  aggregate_source 
	[simple_expression]
end define

define  aggregate_type 
	AGGREGATE [opt aggregate_type_opt] OF [parameter_type]
end define

define aggregate_type_opt
	': [type_label]
end define

define  aggregation_types 
	[array_type] | [bag_type] | [llist_type] | [set_type]
end define

define  algorithm_head 
	[repeat declaration] [opt constant_decl] [opt local_decl]
end define

define  alias_id 
	[simple_id]
end define

define  alias_stmt 
	ALIAS [alias_id] FOR [general_ref] [repeat qualifier] ';
        [repeat stmt+] END_ALIAS ';
end define

define  array_type 
	ARRAY [bound_spec] OF [opt 'OPTIONAL] [opt 'UNIQUE] [base_type]
end define

define  assignment_stmt 
	[general_ref] [repeat qualifier] ':= [expression] '; 
end define

define  attribute_decl 
	[attribute_id] | [qualified_attribute]
end define

define  attribute_id 
	[simple_id]
end define

define  attribute_qualifier 
	'. [attribute_ref]
end define

define  bag_type 
	BAG [opt bound_spec] OF [base_type]
end define

define  base_type 
	[aggregation_types] | [simple_types] | [named_types]
end define

define  binary_type 
	BINARY [opt binary_type_opt]
end define

define binary_type_opt
	'( [width] ') [opt 'FIXED]
end define

define  boolean_type 
	BOOLEAN 
end define

define  bound_1 
	[numeric_expression]
end define

define  bound_2 
	[numeric_expression]
end define


define  bound_spec 
	'[ [bound_1] ': [bound_2] '] 
end define

define  built_in_constant 
	CONST_E | PI | SELF | '? 
end define

define  built_in_function 
	ABS | ACOS | ASIN | ATAN | BLENGTH | COS | EXISTS |
        EXP | FORMAT | HIBOUND | HIINDEX | LENGTH | LOBOUND | LOINDEX |
        LOG | LOG2 | LOG10 | NVL | ODD | ROLESOF | SIN | SIZEOF | SQRT |
        TAN | TYPEOF | USEDIN | VALUE 
end define

define  built_in_procedure 
	INSERT | REMOVE 
end define

define  case_action 
	[list case_label+] ': [stmt]
end define

define  case_label 
	[expression]
end define

define  case_stmt 
	CASE [selector] OF [repeat case_action]
        [opt case_stmt_opt] END_CASE ';
end define

define case_stmt_opt
	OTHERWISE ': [stmt]
end define

define  compound_stmt 
	BEGIN [repeat stmt+] END '; 
end define

define  constant_decl 
	CONSTANT [repeat constant_body+] END_CONSTANT ';
end define

define  constant_body 
	[constant_id] ': [base_type] ':= [expression] ';
end define

define  constant_factor 
	[built_in_constant] | [constant_ref]
end define

define  constant_id 
	[simple_id]
end define

define  constructed_types 
	[enumeration_type] | [select_type]
end define

define  declaration 
	[entity_decl] | [function_decl] | [procedure_decl] | [type_decl]
end define

define  derived_attr 
	[attribute_decl] ': [base_type] ':= [expression] ';
end define

define  derive_clause 
	DERIVE [repeat derived_attr+]
end define

define  domain_rule 
	[opt domain_rule_opt] [expression]
end define

define domain_rule_opt
	[label] ':
end define

define  element 
	[expression] [opt element_opt]
end define

define element_opt
	': [repetition]
end define

define  entity_decl 
	[entity_head] [IN] [entity_body] [EX] END_ENTITY '; [NL][NL]
end define

define  entity_body 
	[repeat explicit_attr] [opt derive_clause] [opt inverse_clause]
        [opt  unique_clause] [opt where_clause]
end define

define  entity_head 
		ENTITY [entity_id] [opt subsuper] '; [NL]
end define

define  entity_id 
	[simple_id]
end define

define  entity_constructor 
	[entity_ref] '( [opt entity_ctor_opt] ')
end define

define entity_ctor_opt
	[list expression+]
end define

define  enumeration_id 
	[simple_id]
end define

define  enumeration_reference 
	[opt enum_ref_opt] [enumeration_ref]
end define

define enum_ref_opt
	[type_ref] '.
end define

define  enumeration_type 
	ENUMERATION OF '( [list enumeration_id+] ') 
end define

define  escape_stmt 
	ESCAPE '; 
end define

define  explicit_attr 
	[list attribute_decl+] ': [opt 'OPTIONAL] [base_type] '; [NL]
end define

define expression 
	[simple_expression] [opt expression_opt]
end define

define expression_opt
	[rel_op_extended] [simple_expression]
end define

define  factor 
	[simple_factor] [opt factor_opt]
end define

define factor_opt
	'** [simple_factor]
end define

define  formal_parameter 
	[list parameter_id+] ': [parameter_type]
end define

define  function_decl 
	[function_head] [opt algorithm_head] 
        [repeat stmt+] END_FUNCTION ';
end define

define  function_call 
	[function_call_a] [opt actual_parameter_list]
end define

define function_call_a
	[built_in_function] | [function_ref]
end define

define  function_head 
	FUNCTION [function_id] [opt function_head_opt] ': [parameter_type] ';
end define

define function_head_opt
	'( [formal_parameter] [repeat function_head_elem] ')
end define

define function_head_elem
	'; [formal_parameter]
end define

define  function_id 
	[simple_id]
end define

define  general_aggregation_types 
	[general_array_type] | [general_bag_type] | [general_list_type]
        | [general_set_type]
end define

define  general_array_type 
	ARRAY [opt bound_spec] OF [opt 'OPTIONAL] [opt 'UNIQUE]
        [parameter_type]
end define

define  general_bag_type 
	BAG [opt bound_spec] OF [parameter_type]
end define

define  general_list_type 
	LIST [opt bound_spec] OF [opt 'UNIQUE] [parameter_type]
end define

define  general_ref 
	[alias_ref] | [parameter_ref] | [variable_ref]
end define

define  general_set_type 
	SET [opt bound_spec] OF [parameter_type]
end define

define  generalized_types 
	[aggregate_type] | [general_aggregation_types] | [generic_type]
end define

define  generic_type 
	GENERIC [opt generic_type_opt]
end define

define generic_type_opt
	': [type_label]
end define

define  group_qualifier 
	'\ [entity_ref]
end define

define  if_stmt 
	IF [logical_expression] THEN [repeat stmt+] [opt if_stmt_opt] END_IF ';
end define

define if_stmt_opt
	ELSE [repeat stmt+]
end define

define  increment 
	[numeric_expression]
end define

define  increment_control 
	[variable_id] ':= [bound_1] TO [bound_2] [opt increment_control_opt]
end define

define increment_control_opt
	BY [increment]
end define

define  index 
	[numeric_expression]
end define

define  integer_type 
	INTEGER 
end define

define  interface_specification 
	[reference_clause] | [use_clause]
end define

define  interval 
	'{ [interval_item] [interval_op] 
           [interval_item] [interval_op]
           [interval_item] '} 
end define

define  interval_item 
	[simple_expression]
end define

define  interval_op 
	'< | '<= 
end define

define  inverse_attr 
	[attribute_id] ': [opt inverse_attr_opt] [entity_ref]
        FOR [attribute_ref] '; 
end define

define inverse_attr_opt
	[inverse_attr_opt_a] [opt bound_spec] OF
end define

define inverse_attr_opt_a
	SET | BAG
end define

define  inverse_clause 
	INVERSE [repeat inverse_attr+]
end define

define  label 
	[simple_id]
end define

define  llist_type 
	LIST [opt bound_spec] OF [opt 'UNIQUE] [base_type]
end define

define  literal 
	[binary_literal] | [integer_literal] | [logical_literal] |
        [real_literal] | [string_literal]
end define

define  local_decl 
	LOCAL [repeat local_variable+] END_LOCAL ';
end define

define  local_variable 
	[list variable_id+] ': [parameter_type] [opt local_var_opt] ';
end define

define local_var_opt
	':= [expression]
end define

define  logical_expression 
	[expression]
end define

define  logical_literal 
	FALSE | TRUE | UNKNOWN 
end define

define  logical_type 
	LOGICAL 
end define

define  multiplication_like_op 
	'* | '/ | DIV | MOD | AND | '|'|
end define

define  named_types 
	[entity_ref] | [type_ref]
end define

define  named_type_or_rename 
	[named_types] [opt named_type_opt]
end define

define named_type_opt
	AS [entity_or_type]
end define

define entity_or_type
	[entity_id] | [type_id]
end define

define  null_stmt
	';
end define

define  number_type 
	NUMBER 
end define

define  numeric_expression 
	[simple_expression]
end define

define  one_of 
	ONEOF '( [list supertype_expression+] ')
end define

define  parameter 
	[expression]
end define

define  parameter_id 
	[simple_id]
end define

define  parameter_type 
	[generalized_types] | [named_types] | [simple_types]
end define

define  population 
	[entity_ref]
end define

define  precision_spec 
	[numeric_expression]
end define

define  primary 
	[qualifiable_stuf] | [literal]
end define

define qualifiable_stuf
	[qualifiable_factor] [repeat qualifier]
end define

define  procedure_decl 
	[procedure_head] [opt algorithm_head]
          [repeat stmt]
        END_PROCEDURE ';
end define

define  procedure_call_stmt 
	[name_of_the_functor] [opt actual_parameter_list] ';
end define

define name_of_the_functor
	[built_in_procedure] | [procedure_ref]
end define

define  procedure_head 
	PROCEDURE [procedure_id] [opt procedure_head_opt] ';
end define

define procedure_head_opt
	'( [opt 'VAR] [formal_parameter] [repeat formal_elem] ')
end define

define formal_elem
	'; [opt 'VAR] [formal_parameter]
end define

define  procedure_id 
	[simple_id]
end define

define  qualifier 
	[attribute_qualifier] | [group_qualifier] | [subcomponent_qualifier]
end define

define  qualifiable_factor 
	[function_call] | [attribute_ref] | [constant_factor] |
        [general_ref] | [population]
end define

define  qualified_attribute 
	SELF [group_qualifier] [attribute_qualifier]
end define

define  query_expression 
	%% WATCH OUT! HERE IT IS ... -- JRC
	QUERY '( [variable_id] '<* [aggregate_source] | [logical_expression] ') 
end define

define  real_type 
	REAL [opt real_type_opt] 
end define

define real_type_opt
	'( [precision_spec] ')
end define

define   reference_clause 
	REFERENCE FROM [schema_ref] [opt reference_clause_opt] ';
end define

define reference_clause_opt
	'( [list resource_or_rename+] ')
end define

define  referenced_attribute 
	[attribute_ref] | [qualified_attribute]
end define

define  rel_op 
	'< | '> | '<= | '>= | '<> | '= | ':<>: | ':=:
end define

define  rel_op_extended 
 [rel_op] | IN | LIKE 
end define

define  rename_id 
	[entity_id] | [function_id] | [procedure_id] | [type_id]
end define

define  rrepeat_control 
	[opt increment_control] [opt while_control] [opt until_control] 
end define

define  rrepeat_stmt 
	REPEAT [rrepeat_control] '; [repeat stmt+] END_REPEAT '; 
end define

define  repetition 
	[numeric_expression]
end define

define  resource_or_rename 
	[resource_ref] [opt resource_or_rename_opt]
end define

define resource_or_rename_opt
	AS [rename_id]
end define

define  resource_ref 
	[constant_ref] | [entity_ref] | [function_ref] | 
        [procedure_ref] | [type_ref]
end define

define  return_stmt 
	RETURN [opt return_stmt_opt] ';
end define

define return_stmt_opt
	'( [expression] ')
end define

define   rule_decl 
	[rule_head] [opt algorithm_head] [repeat stmt] [where_clause]
        END_RULE ';
end define

define  rule_head 
	RULE [rule_id] FOR '( [list entity_ref+] ') ';  
end define

define   rule_id 
	[simple_id]
end define

define  schema_decl 
	SCHEMA [schema_id] '; [NL][IN] [schema_body] [NL][EX] END_SCHEMA ';
end define

define  schema_body 
	[repeat interface_specification] [opt constant_decl]
        [repeat schema_body_elem]
end define

define schema_body_elem
	[declaration] | [rule_decl]
end define

define  schema_id
	[simple_id]
end define

define  select_type 
	SELECT '( [list named_types+] ')
end define

define  selector 
	[expression]
end define

define  set_type 
	SET [opt bound_spec] OF [base_type]
end define

define  sign 
	'+ | '- 
end define

define  simple_expression 
	[term] [repeat simple_elem]
end define

define simple_elem
	[add_like_op] [term]
end define

define  simple_factor 
	[aggregate_initializer] | [entity_constructor] |
        [enumeration_reference] | [interval] |
        [query_expression] | [simple_factor_a] | [simple_factor_b]
end define

define simple_factor_a
	[opt 'NOT] '( [expression] ')
end define

define simple_factor_b
	[opt unary_op] [primary]
end define


define  simple_types 
	[binary_type] | [boolean_type] | [integer_type] | [logical_type] |
	[number_type] | [real_type] | [string_type]
end define

define  skip_stmt 
	SKIP '; 
end define

define  stmt 
	[alias_stmt] | [assignment_stmt] | [case_stmt] | [compound_stmt] |
        [escape_stmt] | [if_stmt] | [null_stmt] | [procedure_call_stmt] |
        [rrepeat_stmt] | [return_stmt] | [skip_stmt]
end define

define  string_literal 
	[simple_string_literal] | [encoded_string_literal]
end define

define  string_type 
	STRING [opt string_type_opt]
end define

define string_type_opt
	'( width ') [opt 'FIXED]
end define

define  subcomponent_qualifier 
	'[ [index] [opt subcomp_opt] '] 
end define

define subcomp_opt
	': [index]
end define

define  subsuper 
	[opt supertype_declaration] [opt subtype_declaration] 
end define

define  subtype_declaration 
	[NL] SUBTYPE OF '( [list entity_ref+] ')
end define

define  supertype_declaration 
	[NL] ABSTRACT SUPERTYPE [opt supertype_opt] [NL] |
	[NL] [opt 'ABSTRACT] SUPERTYPE OF '( [supertype_expression] ')
end define

define supertype_opt
	OF '( [supertype_expression] ')
end define

define  supertype_expression 
	[supertype_factor] [repeat supertype_exp_elem]
end define

define supertype_exp_elem
	[and_or_andor] [supertype_factor]
end define

define and_or_andor
	AND | ANDOR
end define

define  supertype_factor 
	[entity_ref] | [one_of] | '( [supertype_expression] ') 
end define

define  term 
	[factor] [repeat term_elem]
end define

define term_elem
	[multiplication_like_op] [factor]
end define

define  type_decl 
	TYPE [type_id] '= [underlying_type] '; [opt where_clause] END_TYPE '; 
end define

define  type_id 
	[simple_id]
end define

define  type_label 
	[simple_id]
end define

define  unary_op 
	'+ | '- | NOT 
end define

define  underlying_type 
	[constructed_types] | [aggregation_types] | [simple_types] | [type_ref]
end define

define  unique_clause 
	UNIQUE [unique_rule] '; [repeat unique_clause_elem]
end define

define unique_clause_elem
	[unique_rule] ';
end define

define  unique_rule 
	[opt unique_rule_opt] [list referenced_attribute+]
end define

define unique_rule_opt
	[label] ':
end define

define  until_control 
	UNTIL [logical_expression]
end define

define  use_clause 
	USE FROM [schema_ref] [opt use_clause_opt] ';
end define

define use_clause_opt
	'( [list named_type_or_rename+] ')
end define

define  variable_id 
	[simple_id]
end define

define  where_clause 
	WHERE [domain_rule] '; [repeat where_clause_elem]
end define

define where_clause_elem
	[domain_rule] '; 
end define

define  while_control 
	WHILE [logical_expression]
end define

define  width 
	[numeric_expression]
end define



