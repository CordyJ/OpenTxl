%include "%curses"
%include "%system"
%include "%termchars"
const Sup := chr (11)
const Sdown := "\n"
const Sleft := "\b"
const Sright := chr (12)
const Sdownleft := "\r"
const arrowkeymap : array "A".."D" of char := init (Sup, Sdown, Sright, Sleft)
const Sinsert := "i"
const Sdelete := "d"
const Sfind := "/"
const Sgoto := "g"
const Spage := "p"
const Sfile := "f"
const Sread := "r"
const Swrite := "w"
const Squit := "q"
const Swritequit := "z"
const Shelp := "h"
const Srun := "t"
const Sredraw := "l"
const Smove := "m"
const Sreplace := "x"
const Sbad := "*"
const functionkeymap : array "P".."S" of char := init (Sinsert, Sdelete, Sfind,
  Spage)
const nul := chr (0)
const bel := chr (7)
const del := chr (127)
const esc := "\e"
const ins := "\^"
const red := chr (18)
const cr := "\r"
const maxlines := 1000
const avglinelength := 25
const maxchars := maxlines * avglinelength
const linesize := 79
const screensize := curses.lines - 2
var chars : array 1..maxchars of char
var numchars := 0
var lines : array 1..maxlines of 0..maxchars
var numlines := 0
var compacted := true
const nulltext := "~"
const nullline := 1
const emptyline := 0
var firstline : int
var currentline : int
var currentchar : int
var file : int
var filename : string
var command : char := nul
var direction : char := nul
var textchar : char := nul
var pattern := ""
var msgtext := ""
var quitting := false
procedure putinfo
    var putinfoinfoline1 : string (linesize)
    putinfoinfoline1 := filename (1..min (14, length (filename)))
    const putinfonpages1 := min (20, numlines div (screensize + 1) + 1)
    const putinfopage1 := min (20, currentline div (screensize + 1) + 1)
    putinfoinfoline1 += "  ["
    putinfoinfoline1 += repeat (" ", putinfopage1 - 1)
    putinfoinfoline1 += "*"
    putinfoinfoline1 += repeat (" ", putinfonpages1 - putinfopage1)
    putinfoinfoline1 += "]  "
    if msgtext not = "" then
        putinfoinfoline1 += msgtext
        putinfoinfoline1 := putinfoinfoline1 (1..min (linesize, length (
          putinfoinfoline1)))
    end if
    putinfoinfoline1 += repeat (" ", linesize - length (putinfoinfoline1))
    curses.move (0, 0)
    curses.standout
    curses.addstr (putinfoinfoline1)
    curses.standend
end putinfo
procedure message (msg : string)
    msgtext := messagemsg1
    putinfo
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
end message
procedure error (msg : string)
    message ("?" + errormsg1)
    put bel..
    command := nul
end error
procedure encodetext (linetext : string (linesize), var linechars : 0..maxchars
  )
    if encodetextlinetext1 = "" then
        encodetextlinechars1 := emptyline
    else
        numchars += 1
        chars (numchars) := chr (0)
        encodetextlinechars1 := numchars
        const encodetextlinelength1 := length (encodetextlinetext1)
        var encodetexti1 := 1
        loop
            const encodetextch1 := encodetextlinetext1 (encodetexti1)
            var encodetextcount1 := 1
            loop
                exit when encodetexti1 + encodetextcount1 >
                  encodetextlinelength1 or encodetextlinetext1 (encodetexti1 +
                  encodetextcount1) not = encodetextch1
                encodetextcount1 += 1
            end loop
            if encodetextcount1 > 1 then
                if encodetextcount1 > 2 then
                    numchars += 1
                    chars (numchars) := chr (128 + encodetextcount1)
                else
                    numchars += 1
                    chars (numchars) := encodetextch1
                end if
            end if
            numchars += 1
            chars (numchars) := encodetextch1
            encodetexti1 += encodetextcount1
            exit when encodetexti1 > encodetextlinelength1
        end loop
        const encodetextencodedlength1 := numchars - encodetextlinechars1
        chars (encodetextlinechars1) := chr (encodetextencodedlength1)
    end if
end encodetext
procedure decodetext (linechars : 0..maxchars, var linetext : string (linesize)
  )
    decodetextlinetext1 := ""
    if decodetextlinechars1 not = emptyline then
        const decodetextencodedlength1 := ord (chars (decodetextlinechars1))
        const decodetextendchar1 := decodetextlinechars1 +
          decodetextencodedlength1
        var decodetextlinechar1 := decodetextlinechars1
        loop
            decodetextlinechar1 += 1
            if ord (chars (decodetextlinechar1)) > 128 then
                const decodetextcount1 := ord (chars (decodetextlinechar1)) -
                  128
                decodetextlinechar1 += 1
                decodetextlinetext1 += repeat (chars (decodetextlinechar1),
                  decodetextcount1)
            else
                decodetextlinetext1 += chars (decodetextlinechar1)
            end if
            exit when decodetextlinechar1 = decodetextendchar1
        end loop
    end if
end decodetext
procedure compact
    message ("compacting storage, please wait")
    numchars := 2
    for l : 1..numlines
        var compactlinetext1 : string (linesize)
        decodetext (lines (l), compactlinetext1)
        encodetext (compactlinetext1, lines (l))
    end for
    message ("")
end compact
procedure storetext (linenum : int, linetext : string (linesize))
    if numchars >= maxchars - linesize and not compacted then
        compact
        compacted := true
    end if
    if numchars >= maxchars - linesize then
        assert compacted
        error ("out of space")
        lines (storetextlinenum1) := emptyline
    else
        compacted := compacted and lines (storetextlinenum1) = emptyline or
          lines (storetextlinenum1) = nullline
        encodetext (storetextlinetext1, lines (storetextlinenum1))
    end if
end storetext
procedure fetchtext (linenum : int, var linetext : string (linesize))
    decodetext (lines (fetchtextlinenum1), fetchtextlinetext1)
end fetchtext
procedure getcommand
    if command = nul then
        curses.getch (command)
    end if
    direction := nul
    textchar := nul
    msgtext := ""
    if command = esc then
        curses.getch (command)
        if command = "[" or command = "O" then
            curses.getch (command)
        end if
        if command >= "A" and command <= "D" then
            direction := arrowkeymap (command)
            command := Smove
        elsif command >= "P" and command <= "S" then
            command := functionkeymap (command)
        end if
    elsif command = del then
        command := Sdelete
        direction := Sright
    elsif command = ins then
        command := Sinsert
        direction := Sleft
    elsif command = cr then
        command := Smove
        direction := Sdownleft
    elsif command = red then
        command := Sredraw
    elsif command = Sleft or command = Sright or command = Sup or command =
      Sdown or command = Sdownleft then
        direction := command
        command := Smove
    elsif command = nul then
        command := Squit
    elsif command >= " " then
        textchar := command
        command := Sreplace
    end if
    quitting := quitting and command = Squit
end getcommand
procedure getdirection
    if direction not = nul and direction not = esc and direction not = cr then
        return
    end if
    if direction = nul then
        curses.getch (direction)
    end if
    if direction = esc then
        curses.getch (direction)
        if direction = "[" then
            curses.getch (direction)
        end if
        if direction >= "A" and direction <= "D" then
            direction := arrowkeymap (direction)
        else
            direction := Sbad
        end if
    elsif direction = cr then
        direction := Sdown
    elsif direction = Sleft or direction = Sright or direction = Sup or
      direction = Sdown then
    else
        direction := Sbad
    end if
    if direction = Sbad then
        error ("bad direction")
    end if
end getdirection
procedure flush
    var flushc1 : char
    loop
        exit when not curses.hasch
        curses.getch (flushc1)
    end loop
end flush
procedure read_
    message ("read")
    %open : file, filename, get
    if file not = 0 then
        numlines := 0
        loop
            exit when eof (file) or numlines = maxlines - 1 or numchars >=
              maxchars - linesize
            var read_s1 : string
            get : file, read_s1 : *
            loop
                const read_tabposition1 := index (read_s1, "\t")
                exit when read_tabposition1 = 0
                const read_tabblanks1 := repeat (" ", 8 - (read_tabposition1 - 1
                  ) mod 8)
                read_s1 := read_s1 (1..read_tabposition1 - 1) + read_tabblanks1
                  + read_s1 (read_tabposition1 + 1..*)
            end loop
            read_s1 := read_s1 (1..min (length (read_s1), linesize))
            numlines += 1
            storetext (numlines, read_s1)
        end loop
        if numlines = maxlines - 1 or numchars >= maxchars - linesize then
            error ("file too large")
        else
            message ("read " + intstr (numlines, 1) + " lines, " + intstr (
              numchars, 1) + " chars")
        end if
        %close : file
    else
        message ("new file")
    end if
end read_
procedure write_
    message ("write")
    %open : file, filename, put
    if file not = 0 then
        for i : 1..numlines
            var write_linetext1 : string (linesize)
            fetchtext (i, write_linetext1)
            loop
                exit when length (write_linetext1) = 0 or write_linetext1 (
                  length (write_linetext1)) not = " "
                write_linetext1 := write_linetext1 (1..length (write_linetext1)
                  - 1)
            end loop
            loop
                const write_tabposition1 := index (write_linetext1, "        ")
                exit when write_tabposition1 = 0
                write_linetext1 := write_linetext1 (1..write_tabposition1 - 1) +
                  "\t" + write_linetext1 (write_tabposition1 + 8..*)
            end loop
            put : file, write_linetext1
        end for
        %close : file
        message ("write " + intstr (numlines, 1) + " lines")
    else
        error ("can't write file")
    end if
end write_
procedure clear
    numlines := 0
    numchars := 0
    storetext (1, nulltext)
    assert lines (1) = nullline
    for i : 1..maxlines
        lines (i) := nullline
    end for
    firstline := 1
    currentline := 1
    currentchar := 1
end clear
procedure draw
    for i : firstline..firstline + screensize
        var drawlinetext1 : string (linesize)
        if i < maxlines then
            fetchtext (i, drawlinetext1)
        else
            drawlinetext1 := nulltext
        end if
        curses.move (i - firstline + 1, 0)
        curses.addstr (drawlinetext1)
        curses.clrtoeol
    end for
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
end draw
procedure scrolldown
    if firstline > 1 then
        firstline -= 1
        curses.move (1, 0)
        curses.insertln
        var scrolldownfirstlinetext1 : string (linesize)
        fetchtext (firstline, scrolldownfirstlinetext1)
        curses.addstr (scrolldownfirstlinetext1)
        curses.clrtoeol
        curses.refresh
    end if
end scrolldown
procedure scrollup
    if firstline + screensize < maxlines then
        firstline += 1
        curses.move (1, 0)
        curses.deleteln
        curses.move (screensize + 1, 0)
        var scrolluplastlinetext1 : string (linesize)
        fetchtext (firstline + screensize, scrolluplastlinetext1)
        curses.addstr (scrolluplastlinetext1)
        curses.clrtoeol
        curses.refresh
    end if
end scrollup
procedure move
    message ("")
    if direction = Sup and currentline > 1 then
        currentline -= 1
    elsif direction = Sdown and currentline < maxlines and lines (currentline)
      not = nullline then
        currentline += 1
    elsif direction = Sright and currentchar < linesize then
        currentchar += 1
    elsif direction = Sleft and currentchar > 1 then
        currentchar -= 1
    elsif direction = Sdownleft and currentline < maxlines and lines (
      currentline) not = nullline then
        currentchar := 1
        currentline += 1
    end if
    if currentline < firstline then
        scrolldown
    elsif currentline > firstline + screensize then
        scrollup
    end if
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
    command := nul
end move
procedure page
    message ("page _")
    getdirection
    if direction = Sup then
        message ("page up")
        if currentline > 1 then
            currentline := max (1, currentline - screensize)
            firstline := max (1, firstline - screensize)
            putinfo
            draw
        else
            error ("beginning of file")
        end if
    elsif direction = Sdown then
        message ("page down")
        if currentline not = numlines then
            currentline := min (numlines, currentline + screensize)
            firstline := min (numlines, firstline + screensize)
            putinfo
            draw
        else
            error ("end of file")
        end if
    elsif direction = Sright then
        message ("page right")
        var pagecurrentlinetext1 : string (linesize)
        currentchar := length (pagecurrentlinetext1)
    elsif direction = Sleft then
        message ("page left")
        currentchar := 1
    end if
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
    command := nul
end page
procedure insert
    if direction = nul then
        message ("insert _")
        getdirection
    end if
    if direction = Sup then
        message ("insert up")
        if numlines = maxlines - 1 then
            error ("too many lines")
        else
            if currentline > firstline + screensize then
                curses.move (1, 0)
                curses.deleteln
                firstline += 1
            end if
            curses.move (currentline - firstline + 1, 0)
            curses.insertln
            currentchar := 1
            for decreasing i : maxlines - 1..currentline
                lines (i + 1) := lines (i)
            end for
            lines (currentline) := emptyline
            command := nul
            numlines += 1
            putinfo
        end if
    elsif direction = Sdown then
        message ("insert down")
        if numlines = maxlines - 1 then
            error ("too many lines")
        else
            curses.move (1, 0)
            curses.deleteln
            curses.move (currentline - firstline + 1, 0)
            curses.insertln
            firstline += 1
            currentline += 1
            currentchar := 1
            for decreasing i : maxlines - 1..currentline
                lines (i + 1) := lines (i)
            end for
            lines (currentline) := emptyline
            command := nul
            numlines += 1
            putinfo
        end if
    elsif direction = Sright then
        message ("insert right")
        var insertlinetext1 : string (linesize)
        fetchtext (currentline, insertlinetext1)
        if currentchar < linesize then
            currentchar += 1
        end if
        if currentchar > length (insertlinetext1) then
            insertlinetext1 += repeat (" ", currentchar - length (
              insertlinetext1))
        end if
        var insertc1 : char
        loop
            curses.move (currentline - firstline + 1, currentchar - 1)
            curses.getch (insertc1)
            exit when insertc1 < " " or length (insertlinetext1) = linesize
            curses.insertch (insertc1)
            insertlinetext1 := insertlinetext1 (1..currentchar) + insertc1 +
              insertlinetext1 (currentchar + 1..*)
            if currentchar < linesize then
                currentchar += 1
            end if
        end loop
        storetext (currentline, insertlinetext1)
        command := insertc1
    elsif direction = Sleft then
        message ("insert left")
        var insertlinetext2 : string (linesize)
        fetchtext (currentline, insertlinetext2)
        var insertc2 : char
        loop
            curses.move (currentline - firstline + 1, currentchar - 1)
            curses.getch (insertc2)
            exit when insertc2 < " " or length (insertlinetext2) = linesize
            curses.insertch (insertc2)
            insertlinetext2 := insertlinetext2 (1..currentchar - 1) + insertc2 +
              insertlinetext2 (currentchar..*)
            if currentchar < linesize then
                currentchar += 1
            end if
        end loop
        storetext (currentline, insertlinetext2)
        command := insertc2
    end if
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
end insert
procedure delete
    if direction = nul then
        message ("delete _")
        getdirection
    end if
    if direction = Sup then
        message ("delete up")
        curses.deleteln
        for i : currentline..maxlines - 1
            exit when lines (i) = nullline
            lines (i) := lines (i + 1)
        end for
        if firstline > 1 then
            firstline -= 1
            curses.move (1, 0)
            curses.insertln
            var deletefirstlinetext1 : string (linesize)
            fetchtext (firstline, deletefirstlinetext1)
            curses.addstr (deletefirstlinetext1)
        else
            curses.move (screensize + 1, 0)
            var deletelastlinetext1 : string (linesize)
            fetchtext (firstline + screensize, deletelastlinetext1)
            curses.addstr (deletelastlinetext1)
        end if
        if currentline > 1 then
            currentline -= 1
        end if
        numlines -= 1
        putinfo
    elsif direction = Sdown then
        message ("delete down")
        curses.deleteln
        for i : currentline..maxlines - 1
            exit when lines (i) = nullline
            lines (i) := lines (i + 1)
        end for
        curses.move (screensize + 1, 0)
        var deletelastlinetext2 : string (linesize)
        fetchtext (firstline + screensize, deletelastlinetext2)
        curses.addstr (deletelastlinetext2)
        curses.clrtoeol
        numlines -= 1
        putinfo
    elsif direction = Sright then
        message ("delete right")
        curses.deletech
        var deletelinetext1 : string (linesize)
        fetchtext (currentline, deletelinetext1)
        if currentchar <= length (deletelinetext1) then
            deletelinetext1 := deletelinetext1 (1..currentchar - 1) +
              deletelinetext1 (currentchar + 1..*)
        end if
        storetext (currentline, deletelinetext1)
    elsif direction = Sleft then
        message ("delete left")
        curses.deletech
        var deletelinetext2 : string (linesize)
        fetchtext (currentline, deletelinetext2)
        if currentchar <= length (deletelinetext2) then
            deletelinetext2 := deletelinetext2 (1..currentchar - 1) +
              deletelinetext2 (currentchar + 1..*)
        end if
        storetext (currentline, deletelinetext2)
        if currentchar > 1 then
            currentchar -= 1
        end if
    else
        error ("bad direction")
    end if
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
    command := nul
end delete
procedure find
    const findoldpattern1 := pattern
    pattern := ""
    var findc1 : char
    loop
        message ("find '" + pattern)
        curses.getch (findc1)
        exit when findc1 < " " or length (pattern) = linesize
        pattern += findc1
    end loop
    if pattern = "" then
        pattern := findoldpattern1
    end if
    message ("find '" + pattern + "' _")
    direction := findc1
    getdirection
    if direction = Sright then
        message ("find '" + pattern + "' right")
        var findlinetext1 : string (linesize)
        fetchtext (currentline, findlinetext1)
        var findposition1 : int
        loop
            findposition1 := index (findlinetext1, pattern)
            exit when findposition1 = 0 or findposition1 > currentchar
            findlinetext1 := findlinetext1 (1..findposition1 - 1) + "~" +
              findlinetext1 (findposition1 + 1..*)
        end loop
        if findposition1 > currentchar then
            currentchar := findposition1
        else
            error ("not found")
        end if
    elsif direction = Sleft then
        message ("find '" + pattern + "' left")
        var findlinetext2 : string (linesize)
        fetchtext (currentline, findlinetext2)
        const findposition4 := index (findlinetext2, pattern)
        if findposition4 not = 0 and findposition4 < currentchar then
            currentchar := findposition4
        else
            error ("not found")
        end if
    elsif direction = Sdown then
        message ("find '" + pattern + "' down")
        const findoldline1 := currentline
        var findposition2 := 0
        for l : currentline + 1..numlines
            var findlinetext3 : string (linesize)
            fetchtext (l, findlinetext3)
            findposition2 := index (findlinetext3, pattern)
            if findposition2 not = 0 then
                currentline := l
                currentchar := findposition2
                exit
            end if
        end for
        if currentline = findoldline1 or findposition2 = 0 then
            error ("not found")
        elsif currentline > firstline + screensize then
            firstline := max (1, currentline - screensize div 2)
            putinfo
            draw
        end if
    elsif direction = Sup then
        message ("find '" + pattern + "' up")
        const findoldline2 := currentline
        var findposition3 := 0
        for decreasing l : currentline - 1..1
            var findlinetext4 : string (linesize)
            fetchtext (l, findlinetext4)
            findposition3 := index (findlinetext4, pattern)
            if findposition3 not = 0 then
                currentline := l
                currentchar := findposition3
                exit
            end if
        end for
        if currentline = findoldline2 or findposition3 = 0 then
            error ("not found")
        elsif currentline < firstline then
            firstline := max (1, currentline - screensize div 2)
            putinfo
            draw
        end if
    end if
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
    command := nul
end find
procedure goto
    var gotolinenumtext1 := ""
    var gotoc1 : char
    loop
        message ("go to " + gotolinenumtext1)
        curses.getch (gotoc1)
        exit when gotoc1 < "0" or gotoc1 > "9" or length (gotolinenumtext1) = 6
        gotolinenumtext1 += gotoc1
    end loop
    var gotolinenum1 := strint ("0" + gotolinenumtext1)
    if gotolinenum1 = 0 and gotoc1 = "$" then
        gotolinenum1 := numlines
        gotoc1 := nul
    elsif gotolinenum1 < 1 then
        gotolinenum1 := 1
    elsif gotolinenum1 > numlines then
        gotolinenum1 := numlines
    end if
    currentline := max (1, gotolinenum1)
    currentchar := 1
    if currentline >= firstline and currentline <= firstline + screensize then
        curses.move (currentline - firstline + 1, currentchar - 1)
        curses.refresh
    else
        firstline := max (1, currentline - screensize div 2)
        message ("go to " + intstr (currentline, 1))
        draw
    end if
    if gotoc1 = "\r" then
        command := nul
    else
        command := gotoc1
    end if
end goto
procedure redraw
    putinfo
    draw
    command := nul
end redraw
procedure filecmd
    var filecmdnewfilename1 := ""
    var filecmdc1 : char
    loop
        message ("file '" + filecmdnewfilename1)
        curses.getch (filecmdc1)
        if filecmdc1 = "\b" and length (filecmdnewfilename1) > 0 then
            filecmdnewfilename1 := filecmdnewfilename1 (1..length (
              filecmdnewfilename1) - 1)
        else
            exit when filecmdc1 < " " or length (filecmdnewfilename1) > 50
            filecmdnewfilename1 += filecmdc1
        end if
    end loop
    if filecmdnewfilename1 not = "" then
        filename := filecmdnewfilename1
    end if
    message ("file '" + filename + "'")
    command := nul
end filecmd
procedure readcmd
    clear
    read_
    draw
    command := nul
end readcmd
procedure writecmd
    write_
    command := nul
end writecmd
procedure help
    const helphelpfile1 := "/staff/cordy/lib/scedhelp"
    var helprc1 := 0
    curses.endwin
    system ("sced " + helphelpfile1, helprc1)
    curses.clear
    curses.noecho
    curses.crmode
    curses.nonl
    redraw
    if helprc1 not = 0 then
        error ("help failed")
    end if
    command := nul
end help
procedure run
    const runoldfilename1 := filename
    filename := "%scedtemp.t"
    writecmd
    curses.clear
    curses.refresh
    curses.endwin
    termchars := oldtermchars
    settermchars
    var runrc1 := 0
    system ("ttg %scedtemp.t 2> %scedtemp.errs", runrc1)
    var runerrstream1 : int
    %open : runerrstream1, "%scedtemp.errs", get
    var runs1 : string
    for : 1..3
        exit when runerrstream1 = 0 or eof (runerrstream1)
        get : runerrstream1, runs1 : *
    end for
    var runerrmessage1 := ""
    var runerrline1 := 0
    if runerrstream1 not = 0 and not eof (runerrstream1) then
        get : runerrstream1, runerrmessage1 : *
        var runi1 := 1
        loop
            exit when runi1 > length (runerrmessage1) or (runerrmessage1 (runi1
              ) >= "0" and runerrmessage1 (runi1) <= "9")
            runi1 += 1
        end loop
        loop
            exit when runi1 > length (runerrmessage1) or (runerrmessage1 (runi1
              ) < "0" or runerrmessage1 (runi1) > "9")
            runerrline1 := runerrline1 * 10 + ord (runerrmessage1 (runi1)) - ord
              ("0")
            runi1 += 1
        end loop
        runerrmessage1 := runerrmessage1 (runi1..*)
    end if
    if runerrstream1 not = 0 then
        %close : runerrstream1
    end if
    system ("rm -f %scedtemp.*", runrc1)
    if runerrline1 not = 0 then
        firstline := max (1, runerrline1 - screensize div 2)
        currentline := min (runerrline1, numlines)
        currentchar := 1
    end if
    if runerrmessage1 not = "" then
        var runi2 := 1
        loop
            exit when runi2 > length (runerrmessage1) or runerrmessage1 (runi2)
              = ":"
            runi2 += 1
        end loop
        if runi2 < length (runerrmessage1) and runerrmessage1 (runi2) = ":" then
            runerrmessage1 := runerrmessage1 (runi2 + 1..*)
        end if
        put skip..
        if runerrline1 not = 0 then
            put "Line ", runerrline1, ":"..
        end if
        put runerrmessage1
    end if
    put skip, "[Hit return to resume editing] "..
    get runs1 : *
    termchars (TINTRC) := TUNDEF
    settermchars
    curses.clear
    curses.noecho
    curses.crmode
    curses.nonl
    filename := runoldfilename1
    msgtext := ""
    redraw
    if runerrmessage1 not = "" then
        error (runerrmessage1)
    end if
    command := nul
end run
procedure quitcmd
    error ("discard changes - quit again to confirm")
    quitting := true
end quitcmd
procedure replace
    pre textchar >= " "
    message ("")
    var linetext : string (linesize)
    fetchtext (currentline, linetext)
    if currentchar > length (linetext) then
        linetext := linetext + repeat (" ", currentchar - length (linetext))
    end if
    if currentchar <= length (linetext) then
        linetext := linetext (1..currentchar - 1) + textchar + linetext (
          currentchar + 1..*)
    end if
    currentchar += 1
    if currentchar > linesize then
        currentchar := linesize
    end if
    if currentline > numlines then
        numlines += 1
    end if
    curses.addch (textchar)
    curses.move (currentline - firstline + 1, currentchar - 1)
    curses.refresh
    command := nul
end replace
gettermchars
termchars (TINTRC) := TUNDEF
settermchars
curses.clear
curses.noecho
curses.crmode
curses.nonl
clear
if nargs > 0 then
    filename := fetcharg (1)
    read_
else
    filename := "%temp"
end if
putinfo
draw
command := nul
loop
    getcommand
    if command = Smove then
        move
    elsif command = Sreplace then
        replace
    elsif command = Sinsert then
        insert
    elsif command = Sdelete then
        delete
    elsif command = Spage then
        page
    elsif command = Sfind then
        find
    elsif command = Sgoto then
        goto
    elsif command = Sfile then
        filecmd
    elsif command = Sread then
        readcmd
    elsif command = Swrite then
        writecmd
    elsif command = Squit then
        exit when quitting
        quitcmd
    elsif command = Swritequit then
        write_
        exit when file not = 0
    elsif command = Shelp then
        help
    elsif command = Srun then
        run
    elsif command = Sredraw then
        redraw
    else
        error ("bad command")
        flush
    end if
end loop
termchars := oldtermchars
settermchars
curses.move (screensize + 1, 0)
curses.refresh
curses.endwin
put ""

