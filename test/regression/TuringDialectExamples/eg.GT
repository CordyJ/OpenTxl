% Example generic Turing dialect program

generic stack (itemtype, stacksize)
    module stack 
	export (empty, push, pop)

	var top : 0 .. stacksize := 0
	var contents : array 1 .. 50 of itemtype

	procedure push (item : itemtype)
	    top := top + 1
	    contents (top) := item
	end push

	procedure pop (var item : itemtype)
	    item := contents (top)
	    top := top - 1
	end pop

	function empty : boolean
	    result top = 0
	end empty
    end stack

% A module supporting a stack of strings
instance stringstack : stack (string, 50)

% Another module supporting a stack of records
type pervasive symbolinfo:
    record
	symbol : string
	number : int
    end record
instance symbolstack : stack (symbolinfo, 100)

% Use them
for i : ord ("a") .. ord ("z")
    stringstack.push (chr (i))
end for

loop
    exit when stringstack.empty
    var s : string
    stringstack.pop (s)
    var si : symbolinfo
    si.symbol := s
    si.number := ord (s)
    symbolstack.push (si)
end loop

loop
    exit when symbolstack.empty
    var si : symbolinfo
    symbolstack.pop (si)
    put si.symbol ..
end loop

put ""
