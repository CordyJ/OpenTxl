% TXL Basis Grammar for Jensen & Wirth Standard PASCAL
% J.R. Cordy, Queen's University, 22.10.92

comments
	{ }
	(* *)
end comments

compounds
	:= .. >= <= <>
end compounds

keys
    array begin boolean case const char do downto
    else 'end enum for 'function if 				
    integer of packed procedure real record 		
    'repeat type var file program write writeln read
    readln then while until to with and or
    'not true false set goto in
end keys

define program
	program [id] ( [list id+] ) ;	[NL]
	[block] .
end define

define block
	[IN]
	[repeat declaration]		
	[repeat subprogramDeclaration]	
	[EX] [NL]
	[beginEnd] 
end define

define beginEnd
	begin			[NL] [IN]
	    [opt statements]	[EX]
	'end                                            
end define 

define statements
	[repeat statementSemicolon+] 
end define

define statementSemicolon
	[statement] [opt ';] 	[NL]
end define

define declaration
	[constDeclaration]	
    |   [typeDeclaration]     	
    |   [variableDeclaration]  	
    |   [labelDeclaration]     	
end define

define constDeclaration
	const 				[IN][NL]
	    [repeat constDefinition+]	[EX]
end define

define constDefinition
	[id] = [constant] ;	[NL]
end define

define constant
	[opt plusOrMinus] [id]
    |   [opt plusOrMinus] [number]
    |   [charlit] 
    |	''' [SPOFF] ''' [SPON]	% ''''
    |	true
    |	false
end define

define plusOrMinus
	+ | -
end define

define typeDeclaration
	type 				[IN][NL]
	    [repeat typeDefinition+]	[EX]
end define

define typeDefinition
	[id] = [typeSpec] ;	[NL]
end define

define typeSpec
        [simpleType]
    |   [pointerType]
    |   [opt 'packed] [arrayType]
    |   [opt 'packed] [setType]
    |   [opt 'packed] [fileType]
    |   [opt 'packed] [recordType]
end define

define simpleType
	[typeIdentifier]
    |   [enumeratedType]
    |   [subrangeType]
end define

define typeIdentifier
	[id]
    |	'integer
    |   'real
    |   'boolean
    |   'char
end define

define enumeratedType
	( [list id+] )
end define

define subrangeType
	[constant] .. [constant]
end define

define pointerType
	^ [typeSpec]
end define

define arrayType
	array '[ [list simpleType+] '] of [typeSpec]
end define

define fileType
	file of [typeSpec]
end define

define setType
	set of [simpleType]
end define

define recordType
				[NL] [IN]
	record 			[IN]
	    [fieldList]		[EX] [NL]
	'end			[EX]
end define

define fieldList
	[recordField] [repeat semicolonRecordField] 
    |   [variantRecord]
end define

define recordField
	[NL]
	[list id+] : [typeSpec]
end define

define semicolonRecordField
	; [recordField]
end define

define variantRecord
	case [expression] of  		[IN][IN]
	    [caseAlternative]
	    [repeat caseAlternative]	[EX][EX][NL]
	'end
	case [id] : [typeSpec] of	[IN][IN]
	    [variant] 		
	    [repeat semicolonVariant]	[EX][EX][NL]
end define

define variant
	[NL][EX]
	[list constant+] : 	[IN][NL]
	    ( [fieldList] )
end define

define semicolonVariant
	; [variant]
end define

define variableDeclaration
	var 				[IN][NL]
	    [repeat idTypeSpec+]	[EX]
end define

define idTypeSpec
	[list id+] : [typeSpec] ; [NL]
end define

define labelDeclaration
	label [list number+] ;
end define

define subprogramDeclaration
	[procedureDeclaration]
    |   [functionDeclaration]
end define

define procedureDeclaration
	[NL]
	procedure [id] [opt parameterList] ; [NL]
	[block] ; [NL]
end define

define parameterList
    	( [parameterDeclaration] [repeat semicolonParameterDeclaration] )
end define

define parameterDeclaration
	[opt 'var] [list id+] : [typeIdentifier]
    |	'function [id] : [typeIdentifier]
    |	procedure [id] 
end define

define semicolonParameterDeclaration
	; [parameterDeclaration]
end define

define functionDeclaration
	[NL]
	'function [id] [opt parameterList] : [typeIdentifier] ; [NL]
	[block] ; [NL]
end define

define statement
   	[opt statementLabel] [unlabeledStatement]
end define

define statementLabel
	[number] :
end define

define unlabeledStatement
        [assignmentStatement]                    
    |	[callStatement]
    |	[writeStatement]                
    |   [writelnStatement]              
    |   [readStatement]                 
    |   [readlnStatement]               
    |   [beginEnd] 
    |   [ifStatement]           
    |   [caseStatement] 
    |   [whileStatement]                
    |   [repeatStatement]               
    |   [forStatement]                  
    |   [withStatement]                 
    |   [gotoStatement]         
    |   ;               
end define

define assignmentStatement
	[variable] := [expression]
end define

define callStatement
	[id] [opt argumentList]
end define

define argumentList
	( [list expression+] ) 
end define

define writeStatement
	write [writeArgumentList] 
end define

define writeArgumentList
	( [list writeArgument+] )        
end define

define writeArgument
	[expression] [opt colonExpression]
end define

define colonExpression
	: [expression]
end define
    
define writelnStatement
	writeln [opt writeArgumentList]
end define

define readStatement
	read [readArgumentList]
end define

define readArgumentList
	( [list id+] )
end define

define readlnStatement
	readln [opt readArgumentList]
end define

define ifStatement
	if [expression] then	[IN][NL]
	    [statement]		[EX]
	[opt elsePart]
end define

define elsePart
	[NL]
	else 			[IN][NL]
	    [statement]		[EX]
end define

define caseStatement
	case [expression] of  		[IN][IN]
	    [caseAlternative]
	    [repeat caseAlternative]	[EX][EX][NL]
	'end
end define

define caseAlternative
	[NL] [EX] 
	[list constant+] :	[IN][NL]
	    [opt statement] ;	
end define

define whileStatement
	while [expression] do 	[IN][NL]
	    [statement]		[EX]
end define

define repeatStatement
	'repeat			[IN][NL]
	    [opt statements]	[EX]
	until [expression]
end define

define forStatement
	for [id] := [expression] [toOrDownto] [expression] do	[IN][NL]
	    [statement]	[EX]
end define

define toOrDownto
	to | downto
end define

define withStatement
	with [list variable+] do	[IN][NL]
	    [statement]			[EX]
end define

define gotoStatement
	goto [number] 
end define

define variable
    	[id] [repeat componentSelector]
end define

define componentSelector
	'[ [list expression+] ']
    |	. [id]
    |	^
end define

define expression
	[simpleExpression] [repeat operatorSimpleExpression]
end define

define operatorSimpleExpression
	[operator] [simpleExpression]
end define

define operator
	=  |  <  |  >  |  <>  |  >=  |  <=  |  in
end define

define simpleExpression
	[opt prefixOperator] [term] [repeat termOperatorTerm]
end define

define termOperatorTerm
	[termOperator] [term]
end define

define termOperator
	+ | - | or
end define

define term
	[factor] [repeat factorOperatorFactor]
end define

define factorOperatorFactor
	[factorOperator] [factor]
end define

define factorOperator
	* | / | div | mod | and
end define

define factor
	[constant]
    |   [variable] 
    |   [id] ( [list expression+] )        
    |   ( [expression] )
    |   'not [factor]
    |   '[ [list subrangeExpn+] ']
end define

define subrangeExpn
	[expression] .. [expression]
end define

define prefixOperator
	+  |  -  
end define

