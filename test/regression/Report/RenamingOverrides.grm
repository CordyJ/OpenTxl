% RenamingOverrides.Grammar
% Written by Russ Halliday, May 1995
% Copyright 1995, Legasys Corp.

% This module is part of the renaming/fact extraction suite for COBOL.
% The purpose of this module is to provide grammar definitions that are
% either entirely new and local only the purpose of the renaming, or are
% overrides of the specification given in Cobol.Grammar.

% Originally produced in May of 1995

% Major revamping in July of 1995, to accommodate Grammar 3.2

% This is the same definition as given in Cobol.Grammar, with the exception
% that it has room for a [facts] after the [identification
% division].  This is so that the Program() predicate (and any others I think
% of along the way) can be inserted there.


%% T.D.  Reorganized file.. Nov 1995

%% T.D. Added rebracketing Dec 18, 1995.  this is not an entierly correct solution
%% Some comments at the ends of records go missing...  Merged in this way because
%% we don't have time to go to the new grammar entirely.  Also, c_statement is
%% wrong.  Two new statements from the grammar at not there.  Not used in the DDA
%% system.

%% T.D. Feb 13, 1996 - Revamped to match LexerCobol.Grammar from DAJ (Variant
%% of 4.2 that handles US West and 
%% T.D. Feb 14,15 96 -> Deleted Redundant facts, reorganized, and added new
%% facts

%% New Versioning Numbers
%% v3r1 (march 21, 1996)

%% v3r2 T.D. April 8, 1996 - Cleanup.
%%     - Separate Prolog Facts, so can be individually extracted
%%     - Remove Commented out definitions that won't be coming back

%% R.A.T.H. changes for v3r3 - Field size information.
%%	- create new fact, 'FieldSize' to denote field length
%%	- allow annotation of records and fields with field size

%% v3r4 - May 16, 1996
%%    M.S.S. - generating facts for the file description entries.
%%    T.D.   - Added Conflict Facts for client reports.

function RenameVersion
    replace [stringlit]
	CurString [stringlit]
    by
	CurString [+ "Renaming Overrides v3.4 (May 16, 1996)"]
end function


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% X) Record Definition Overrides %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% level_1_group_item, level_1_data_item, level_77_description, 
%% record_group_item, record_data_item have all been extended to
%% allow for an optional 'field_size_clause', which will consist
%% of two numbers (one for field length, the other for offset)
%% enclosed in braces.

define field_size_clause
	'{ [number] [number] '}
end define

define level_1_group_item
	[NL] [NL] [level_1] [SP] [id_or_FILLER] 
	  [opt field_size_clause]
	  [opt '&]
	  [repeat group_description_clause] [dot]
	  [opt facts]                    				[IN]
	  [repeat level_66_or_88_description] [SP] '[
	     [repeat record_item] [SP] ']  				[EX]
end define

define level_1_data_item
        [NL] [NL] [level_1] [SP]
	  [opt id_or_FILLER] 
	  [opt field_size_clause]
	  [opt '&] [repeat picture_or_description_clause+] [dot]
	  [opt facts]							[IN]
	    [repeat level_66_or_88_description]				[EX]
end define

define level_77_description
         								[NL] 
	'77 [SP] [id_or_FILLER] 
	     [opt field_size_clause]
	     [repeat picture_or_description_clause] [dot]
	     [opt facts]
	     [IN] [repeat level_66_or_88_description] [EX]
	     %% T.D Feb 14/96 The grammar only allows 88's here.  The Y2K code
	     %% is more general if 66 is also here.  66 will never be here since
	     %% we are handling valid cobol code.
end define

% The following definition of record_item is extended to allow square brackets
% to be parsed as record_items (so that the initial parse picks up the
% structures as record_item).  Also, it was extended to allow facts to be
% embedded in the code right after the definition.
% T.D. No longer any square brackets? Comment holdover from early summer?

define record_group_item
        [NL] [level_number] [SP]
	  [id_or_FILLER]  
	  [opt field_size_clause]
	  [opt '&] [repeat group_description_clause] [dot]
	  [opt facts]							[IN]
	  [repeat level_66_or_88_description] [SP] '[
	    [repeat record_item] [SP] ']				[EX]
end define

define record_data_item
        [NL] [level_number] [SP] [id_or_FILLER] 
	  [opt field_size_clause]
	  [opt '&]
	  [repeat picture_or_description_clause] [dot]
	  [opt facts]							[IN]
	  [repeat level_66_or_88_description]				[EX]
end define


%% T.D. Feb 14/96 - Changed to put facts directly on the 66 and 88
%% conditions.  More consistent with other levels.

define level_66_description
	[NL] '66 [SP] [id_or_FILLER] [opt '&] [TAB_38] [renames_clause] [dot]
	[opt facts]
end define

define level_88_description
	[NL] '88 [SP] [id_or_FILLER] [opt '&] [TAB_38] [value_clause] [dot]  
	[opt facts]
end define

%%%%%%%%%%%%%%%%%%%%%%%%%
%% Y) Fact Definitions %%
%%%%%%%%%%%%%%%%%%%%%%%%%

define facts 
	[repeat prolog_fact]
end define

% [prolog_fact]'s are predicates that are embedded in places in the code that
% will be extracted later to form the fact database.

keys
	Compared Move Date
	Name Program Value
	Pic IsGlobal Usage RedefinedBy
	Calls Renames SubRedefines
end keys

%% T.D. Feb 14 96 Deleted all sorts of keywords (above) and facts (below)
%% most were facts that were not being used at all.

define prolog_fact
	[comp_fact]
    |   [move_fact]
    |   [movelit_fact]
    |	[date_fact]
    |   [done_flag]
    |	[name_fact]
    |   [program_fact]
    |   [value_fact] 
    |   [pic_fact]
    |   [global_fact] 
    |   [usage_fact]
    |   [redefine_fact]
    |   [redefined_by_fact]
    |   [rename_fact]
    |   [field_fact]
	% The above two facts are nonterminals so that they can be extracted
	% directly using the TXL '^' function.
    |   [call_fact]
    |   [arg_fact]
    |   [entry_fact]
    |   [param_fact]
    |   [docall_fact]
    |   [alias_fact]
    |   [arglit_fact]
    |	[field_size_fact]
    |   [level_01_fact]
    |   [level_77_fact]
    |   [occurs_fact]
    |   [file_fact] 		% M.S.S. 15/5/96
    |   [filerec_fact] 		% M.S.S. 16/5/96
    |   [sysfile_fact] 		% M.S.S. 16/5/96
    |   [conflict_fact]		%% T.D. 16/5/96
    |   [no_trans_fact]		%% T.D. 18/5/96
    |   [change_pic_fact]	%% T.D. 18/5/96
end define

define change_pic_fact
	[NL] [IN] '$ 'ChangePic '( [newNameClause],[picture],[picture] ') '$ [EX]    
end define

define no_trans_fact
	[NL] [IN] '$ 'NoTransform '( [newNameClause] ') '$ [EX]    
end define

define conflict_fact
	[NL] [IN] '$ 'Conflict '( [newNameClause], [date_type], [newNameClause], [date_type], [how_date] ') '$ [EX]
end define

define occurs_fact
	[NL] [IN] '$ 'Occurs '( [newNameClause], [number] ') '$ [EX]
end define

define level_01_fact
	[NL] [IN] '$ 'Level01 '( [newNameClause] ') '$	[EX]
end define

define level_77_fact
	[NL] [IN] '$ 'Level77 '( [newNameClause] ') '$ 	[EX]
end define

define arg_fact
	[NL] [IN] '$ 'Argument '( [newNameClause], [newNameClause_or_literal], [number] ') '$ [EX]
end define

define entry_fact
	[NL] [IN] '$ 'Entry '([id], [id_or_literal]) '$ [EX]
end define

define param_fact
	[NL] [IN] '$ 'Parameter '( [id_or_literal], [newNameClause], [number] ') '$ [EX]
end define

define docall_fact
	[NL] [IN] '$ 'DoCall  '( [id] , [id] ') '$ [EX]
end define

define comp_fact
	[NL] [IN] '$ [opt '&] Compared '( [newNameClause], [newNameClause] ') '$ [EX]
end define

define move_fact
        [NL] [IN] '$ [opt '&] Move '( [newNameClause], [newNameClause] ') '$ [EX]
    |   [NL] [IN] '$ [opt '&] MoveCor '( [newNameClause], [newNameClause] ') '$ [EX]
end define

define movelit_fact
	[NL] [IN] '$ MoveLit '( [literal], [newNameClause] ') '$ [EX] %% T.D. 15.02.96
end define

define program_fact
	[NL] [IN] '$ 'Program '( [newNameClause] ') '$  [EX]
end define

define value_fact
	[NL] [IN] '$ 'Value '( [newNameClause], [literal_operands] ') '$ [EX]
end define

define pic_fact
	[NL] [IN] '$ 'Pic '( [newNameClause], [picture] ') '$ [EX]
end define

define global_fact
	[NL] [IN] '$ 'IsGlobal '( [newNameClause], [clause] ') '$ [EX] 
end define

define usage_fact
	[NL] [IN] '$ 'Usage '( [newNameClause], [usage_type] ') '$ [EX]
end define

define call_fact
        [NL] [IN] '$ 'Calls '( [id], [newNameClause] , [call_type]') '$ [EX]
end define

define call_type
	'STATIC
    |   'DYNAMIC
end define

define field_fact
	[NL] [IN] '$ 'Field '( [newNameClause], [newNameClause], [number], [number] ') '$ [EX]
end define

define alias_fact
	[NL] [IN] '$ 'Alias '( [newNameClause], [newNameClause], [alias_type] ') '$ [EX]
end define

define alias_type
      'LINK
    | 'FILE
    | 'GROUP
    | 'HAND
end define

define arglit_fact
	[NL] [IN] '$ 'ArgLit '( [literal], [newNameClause]') '$ [EX]
end define

define newNameClause_or_literal
      [newNameClause]
    | [literal]
end define

define done_flag
	[NL] [IN] '$ 'Done '( [newNameClause] ') '$ [EX]
end define

define how_date
        'ACCEPT 'SYSTEM 'DATE
      | 'REDEFINES [id]
      | 'REDEFINED
      | 'PARAMETER 'TO [identifier_or_literal]
      | 'REFERENCE
      | 'NAMING 'CONVENTION
      | 'HAND-TAGGED
      | 'MOVE
      | 'COMPARE
      | 'ALIAS
      | 'GROUP
end define

define date_fact
    [NL] [IN] '$ 'Date '( [newNameClause], [date_type], [number], [how_date] ') '$ [EX]
end define

define date_type
    [stringlit]				%% T.D. March 1/1996
end define

define name_fact
        [NL] [IN] '$ 'Name '( [id], [newNameClause] ') '$ [EX]
end define

define redefined_by_fact
	[NL] [IN] '$ RedefinedBy '( [newNameClause], [newNameClause] ') '$
	[EX] %% T.D. [EX] Was Missing
end define

define redefine_fact
        [NL] [IN] '$ 'Redefines '( [newNameClause], [clause] ') '$ [EX]
    |   [NL] [IN] '$ 'SubRedefines '( [newNameClause], [clause] ') '$ [EX]
	% When a subfield of a field that redefines another is used, it
	% would be useful to know what data structure it refers to.
end define

define rename_fact
        [NL] [IN] '$ 'Renames '( [newNameClause], [clause] ') '$ [EX]
end define
	
define hash_newNameClause
	'# [newNameClause] 
end define

define date_type_clause
	'{ [repeat date_type] '}
end define

define newNameClause
	[repeat id+]
end define

define field_size_fact
	[NL] [IN] '$ 'FieldSize '( [newNameClause], [number] ') '$ [EX]
end define

%% M.S.S. 15/5/96 - change the [id] in the file description clause
%% to be [newnameclause] in the fact.

define file_type
      'Regular 
    | 'Sort
end define

define file_fact % M.S.S. 15/5/96
    [NL] [IN] '$ 'File '([newNameClause], [file_type]') '$ [EX]
end define

define filerec_fact
    [NL] [IN] '$ 'FileRec '([newNameClause], [newNameClause]') '$ [EX]
end define

define sysfile_fact
    [NL] [IN] '$ 'SysFile '([newNameClause], [repeat id_or_literal+]') '$ [EX]
end define    

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% W) Grammar Overrides to allow embedded facts %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

define program
	[identification_division]
	[opt environment_division]
	[opt facts]
	[opt data_division]
	[opt procedure_division]
	[repeat nested_source_program]
	[opt end_clause]
end define


% The [data_clause] definition was changed so that it contained [repeat 
% identifier] instead of [repeat id].  This is because it makes reference
% to records, whose names will have changed.  We need those changes to be
% reflected here as well, and this is accomplished easily by changing
% [id] to [identifier] - the rules will then test the [data_clause] as
% well.

define data_clause
        'DATA [RECORD_or_RECORDS] [opt IS_or_ARE] [repeat identifier+]
end define

% the [identifier] definition was rewritten so that it has an optional
% dollar sign ($) as an attribute, to mark those that have been examined
% by the rules.  Also, since we do not want to change the BNS code's naming
% conventions, we put the renamed version of the identifier as an attribute
% at the end of the structure.

define identifier
   	[id] [repeat qualifier] [opt subscript] [opt date_type_clause]
     |  '[ [id] [repeat qualifier] [opt subscript] [opt hash_newNameClause]
           [opt date_type_clause] ']
end define


define move_statement
    	[NL] 'MOVE [opt '&] [move_clause]
end define

define clause
        [picture_or_description_clause]
    |   [group_description_clause]
end define

define id_or_FILLER
	[id] [opt 'DO_NOT_TRANSFORM] [opt date_type_clause]
     |  'FILLER
end define

%% M.S.S. 15/5/96 - the file_description definition is changed so that
%% [repeat prolog_facts] can be included in the definition.
%% this is required for adding Name facts to the File Section
%% the original definition is copied fron the file LSCobol.Grammar

define file_description
        						[NL] [NL]
    	'FD [SP] [id] [opt IS_EXTERNAL] [opt IS_GLOBAL] [IN] 
	    [repeat file_description_clause] [dot]	[EX] %% T.D. BNS_missing_dot -> dot 07.03.96
        [facts]
        [repeat record_description]
end define 

%% M.S.S. 15/5/96 - the sort_merge_description definition is changed so that
%% [repeat prolog_facts] can be included in the definition.
%% this is required for adding Name facts to the File Section
%% the original definition is copied fron the file LSCobol.Grammar

define sort_merge_file_description
    	   							[NL] [NL]
    	'SD [SP] [id] 						[IN] 
	    [repeat sort_merge_description_clause] [dot]	[EX]
        [facts]
        [repeat record_description]
end define

%%%%%%%%%%%%%
%% Z) Misc %%
%%%%%%%%%%%%%

%% Overrides for formal parameters

define procedure_parameter_item
	[opt BY_REFERENCE_or_VALUE] [identifier]
end define

