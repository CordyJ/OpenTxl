% Trivial T'Nial basis grammar for prototyping type inference:  
% allows only variable declarations and assignments.  
% The only typespecs are int and real, and the only expressions 
% are 1, 42 and 3.14.

% Expressions and variable references have optional attributes in their
% specifications for use in the attributed output.

comments
	'%
end comments

compounds
	:=
end compounds

keys
	int boolean array atom any empty ERROR
end keys

define program
	[declarationsAndStatements]
end define

define declarationsAndStatements
	[declarationOrStatement] [opt restOfScope] 
end define

define restOfScope
	; [NL]
	[declarationsAndStatements]
end define

define declarationOrStatement
	[declaration]
    |	[statement]
    |	[nullStatement]
end define

define declaration
	var [id] : [typeSpec]
end define

define typeSpec
	int
    |	boolean
    |	array
    |	atom
    |	any
    |	empty
    |	ERROR
end define

define statement
	[lhs] := [expression]
end define

define lhs
	[varRef]
end define

define expression
	[expressionValue] [optionalExpressionAttrs]
end define

define optionalExpressionAttrs
	[expressionAttrs]
    |	[nullExpressionAttrs]
end define

define expressionAttrs
	( [typeAttribute] )
end define

define nullExpressionAttrs
	[nullAttrList]
end define

define expressionValue
	[booleanConstant]
    |	[intConstant]
    |	[varRef]
end define

define booleanConstant
	true
    |	false
end define

define intConstant
	'1
    |	'42
end define

define varRef
	[id] [optionalVarRefAttrs]
end define

define optionalVarRefAttrs
	[varRefAttrs]
    |	[nullVarRefAttrs]
end define

define nullVarRefAttrs
	[nullAttrList]
end define

define varRefAttrs
	( [typeAttribute] )
end define

define typeAttribute
	[typeSpec] | [empty]
end define

define ita
	[typeSpec]
end define

define nullStatement
	[empty]
end define

define nullAttrList
	[empty]
end define
