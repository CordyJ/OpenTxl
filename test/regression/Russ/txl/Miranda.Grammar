% Miranda basis grammar
% Russ Halliday
% Queen's University
% January, 1995

%% #pragma -id "'"
tokens
	id 	|  "\a\i*'?"
end tokens

compounds
	++ -- ::= :: || == -> .. // => <- <= >= ~= $$ $- $+ $*
	\/ 
end compounds


comments
	||
end comments


keys
	'abstype 'with 'type 'if 'otherwise 'where 'readvals 'show
end keys


define program
	[repeat declaration] 
end define


define declaration
	[definition] [NL]
   |	[type_definition] [NL]
   |	[spec] [NL]
   |	[libdir] [NL]
   |    ';
end define


define definition
	[fnform] '= [rhs]				[NL]
   |	[pat] '= [rhs]  
end define

define type_definition
	[tform] == [type] [opt ';] 			
   |    [tform] ::= [constructs] [opt ';] 		
   |    'abstype [tform_list] 'with [sig] [opt ';]	
end define


define spec
	[var_list] :: [type] [opt ';]			
   |	[tform_list] :: [type] [opt ';]			
end define	


define sig
	[repeat spec+]
end define


define constructs
	[construction] '| [constructs]
   |    [construction]
end define


define construction
	[id] [repeat argtype]
   |	[type] '$[id] [type]
   |    ( [construction] ) [repeat argtype]
end define


define type
	[argtype]
   |	[typename] [repeat argtype]
   |	[type] -> [type]
   |	[type] '$[typename] [type]
end define


define typevar
	[repeat '[] '] [repeat '[] [repeat ']]
end define


define argtype
	[typename]
   |	[typevar]
   |	( [opt type_list] )
   |	'[ [opt type_list] ']
end define


define tform
	[typename] [repeat typevar]
   |	[typevar] '$[typename] [typevar]
end define


define fnform
	[id] [repeat formal]
   |	[pat] '$[id] [pat]
   | 	( [fnform] ) [repeat formal]
end define


define pat 
	[formal]
   |	'-[number]
   |	[id] [repeat formal]
   |	[pat] : [pat]
   | 	[pat] + [number]
   |    [pat] '$[id] [pat]
   | 	( [pat] ) [repeat formal]
end define


define formal
	[id]
   | 	[lit1]
   |	( [opt pat_list] )
   |	'[ [opt pat_list] ']
end define


define lit1
% NOTE:  This should NOT include floating-point numbers
	[number]
   |	[stringlit]
   |	[charlit]
end define


define lit
% NOTE:  This SHOULD include floating-point numbers
	[number]
   |	[stringlit]
   |	[charlit]
end define


define rhs
    	[simple_rhs] [opt ';]				
    |	[cases]
end define


define simple_rhs
	[expression] 			[NL] [IN]
	[opt whdefs]			[NL] [EX]
end define


define cases
	[alt] [opt ';] = [cases]			[NL] [IN]
    |	[lastcase] [opt ';]				[NL] [EX]
end define


define alt
	[expression] ', [opt 'if] [expression]
end define


define lastcase
	[lastalt] 			[NL] [IN]
	[opt whdefs]			[NL] [EX]
end define


define lastalt
	[expression] ', [opt 'if] [expression]
   |	[expression] ', otherwise
end define


define whdefs
	'{
		'where [repeat definition+]
	'}
end define


define expression
   	[exp]
   |	[infix]
   | 	[prefix1]
end define


define exp
   	[exp] [infix] [exp]
    |	[prefix] [exp]
   |    [repeat simple+]
end define

define exp1 
    [exp]
end define


define simple
   	[id]
   |	[lit]
   |	'readvals
   |	'show
   |	( [infix1] [exp] )
   |	( [exp] [infix] )
   |	( [opt exp_list] )
   |	'[ [opt exp_list] ']
   |	'[ [expression] .. [opt expression] ']
   |	'[ [expression] ', [expression] .. [opt expression] ']
   |	'[ [expression] '| [qualifs] ']
   |	'[ [expression] // [qualifs] ']
end define


define qualifs
	[qualifier] '; [qualifs]
   |	[qualifier]
end define


define qualifier
	[expression]
   |	[generator]
end define


define generator
	[pat_list] <- [expression]
   |	[pat] <- [expression] ', [expression] ..
end define


define typename
	'char
   |	'bool
   |	'num
   |	[id]
   |	'*
end define


define exp_list
	[list expression]
end define


define pat_list
	[list pat]
end define


define tform_list
	[list tform]
end define


define var_list
	[list id]
end define


define type_list
	[list type]
end define


define infix
	[infix1]
   |	-
end define


define infix1
	++ | -- | : | \/ | & | ~ | > | >= | = | ~= 
   |    <= | < | + | * | / | div | mod | ^ | . | ! 
   |	'$[id]
end define


define prefix
	[prefix1]
   |	-
end define


define prefix1
	~ | #
end define


define libdir
	'% 'include [expression]
   |	'% 'export [expression]
   |	'% 'insert [expression]
   |    '% 'list [expression]
   |	'% 'nolist [expression]
end define
